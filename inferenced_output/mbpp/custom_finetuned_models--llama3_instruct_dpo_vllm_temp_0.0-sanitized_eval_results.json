{"date": "2024-08-09 15:33", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set([element for element in set(list1) if element in set(list2)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    return all(c.islower() or c == '_' for c in text)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["_"]]}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, depth):\n    return base * height * depth", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 8, 6]], "plus_fail_tests": [[100, 50, 10]]}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    return set(word for word in s.split() if len(word) >= 4)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    return n == 383", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return [x for _,x in sorted((sum(row), row) for row in matrix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, char):\n    return s.replace(char, '') if s[0] == char or s[-1] == char else s.replace(char, '', 2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaa", "a"]]}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    for i in range(1, len(s)):\n        if s == s[i:] + s[:i]:\n            return i\n    return len(s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s, dirty_chars):\n    return \"\".join([c for c in s if c not in dirty_chars])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(lst):\n    return len(lst) != len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(n):\n    return n == 2 * int(str(n)[::-1]) - 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a, b):\n    # Convert the numbers to binary and remove the '0b' prefix\n    bin_a = bin(a)[2:]\n    bin_b = bin(b)[2:]\n    \n    # Make the binary strings the same length by adding leading zeros\n    max_len = max(len(bin_a), len(bin_b))\n    bin_a = bin_a.zfill(max_len)\n    bin_b = bin_b.zfill(max_len)\n    \n    # Compare the binary strings\n    for i in range(max_len):\n        if bin_a[i] != bin_b[i]:\n            # If the bits differ at one position, return True\n            if bin_a.count('1') == bin_b.count('1'):\n                return True\n            return False\n    # If no differing bit is found, return False\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[13, 9]], "plus_fail_tests": [[-10, 10]]}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(lst, n):\n    return heapq.nlargest(n, lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    return int(''.join(map(str, sorted(digits, reverse=True))))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    return (a < 0 and b > 0) or (a > 0 and b < 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(lst):\n    return max(x[1] - x[0] for x in lst) if len(lst) > 1 else None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return 8*n**3 - 13*n + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    return all(pattern == sequence[i] for i, pattern in enumerate(sequence))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "greenn"], ["a", "b", "b"]]], "plus_fail_tests": [[[], ["a", "b", "c"]]]}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    a = 0\n    while (a * a) <= n:\n        b = int((n - a * a) ** 0.5)\n        if a * a + b * b == n:\n            return True\n        a += 1\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[991]]}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) == 0:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            decreasing = False\n        elif arr[i] > arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    def comb_sort_algorithm(lst):\n        gap = len(lst)\n        swapped = True\n        while gap > 1 or swapped:\n            gap = max(1, int(gap / 1.3))\n            swapped = False\n            for i in range(len(lst) - gap):\n                if lst[i] > lst[i + gap]:\n                    lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                    swapped = True\n        return lst\n\n    return comb_sort_algorithm(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        bell = [0, 1, 2]\n        for i in range(3, n + 1):\n            bell.append(bell[i - 1] + sum(bell[:i - 1]))\n        return bell[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        total = 0\n        for j in range(i, len(s)):\n            total += int(s[j])\n            if total == j - i + 1 and s[i:j+1].isdigit():\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst1, lst2):\n    if not isinstance(lst1, list) or not isinstance(lst2, list):\n        return False\n    if len(lst2) > len(lst1):\n        return False\n    for i in range(len(lst1) - len(lst2) + 1):\n        if lst1[i:i+len(lst2)] == lst2:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for i in lst:\n        if type(i) == list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    return len(set(map(len, tuples))) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return len([x for x in lst if x > 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_Diff(n):\n    return str(n).isdigit() and int(str(n)) % 11 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-12345678901234567889]]}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(i % k == 0 for i in t)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(lst, target):\n    for item in lst:\n        if target in item:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1) * (n - 1) + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hadoop"]], "plus_fail_tests": [["a"]]}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    s = str(n)\n    return len(set(s)) == 1 or (len(set(s)) == 2 and '1' in s\n                                 and (s.count('1') * 2 == len(s) or s.count('0') * 2 == len(s)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1212121]], "plus_fail_tests": [[82]]}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return n - 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * (radius ** 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(lst):\n    return max(len(word) for word in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return sum(i * (i + 1) // 2 for i in range(1, n + 1)) * 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[10]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    return min(len(i) for i in list_of_lists)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(s):\n    components = s.split('_')\n    return ''.join(x.title() for x in components)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["___python_program"]]}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    return bin(n)[2:]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    frequency = {}\n    for lst in lists:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result / len(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common &= set(lst)\n    return common", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count(bool_list):\n    return bool_list.count(True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    count = 0\n    for _ in range(n % 2**len(s).bit_length()):\n        s = str(int(s) ^ (1 << len(s) - 1 - s[::-1].index('1'))).zfill(len(s))\n    return s.count('1')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["011001", 6]], "plus_fail_tests": [["0000", 3]]}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list(set([item for sublist in [list1, list2, list3] for item in sublist])))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]], "plus_fail_tests": [[[1000, 999, 998, 997, 996], [1001, 1002, 1003, 1004], [1000, 999, 998, 997, 996]]]}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n += 1\n    while not str(n) == str(n)[::-1]:\n        n += 1\n    return n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 1:\n        return n * (n - 1) * (n - 2) // 6\n    elif m == 2:\n        return n * (n - 1) // 2\n    elif m == 3:\n        return n\n    else:\n        return 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[1, 0]]}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(nums):\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] != nums[i-1] if i > 0 else True:\n            return nums[i]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, 3, 3, 4, 4]]], "plus_fail_tests": [[[]]]}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(c):\n    return math.atan2(c.imag, c.real)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[2, 7], [2, 6], [1, 8], [4, 9]]]], "plus_fail_tests": [[[[-10, 20], [15, -2], [-5, 10]]]]}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words.split() if len(word) > n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    return max(freq, key=freq.get)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    max_zeros = 0\n    max_ones = 0\n    current_zeros = 0\n    current_ones = 0\n    for char in s:\n        if char == '0':\n            current_zeros += 1\n            current_ones = 0\n        else:\n            current_ones += 1\n            current_zeros = 0\n        max_diff = max(max_diff, abs(current_ones - current_zeros))\n        max_zeros = max(max_zeros, current_zeros)\n        max_ones = max(max_ones, current_ones)\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["11000010001"]], "plus_fail_tests": [["0000001110000001111111"]]}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def common_divisors(n, m):\n        def divisors(n):\n            result = set()\n            for i in range(1, int(n**0.5) + 1):\n                if n % i == 0:\n                    result.add(i)\n                    if i * i != n:\n                        result.add(n // i)\n            return result\n        return list(set(divisors(a) & divisors(b)))\n    return sum(common_divisors(a, b))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 15]], "plus_fail_tests": [[27, 81]]}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    target_sum = sum(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) != target_sum:\n            return False\n    for j in range(n):\n        temp = 0\n        for i in range(n):\n            temp += matrix[i][j]\n        if temp != target_sum:\n            return False\n    temp = 0\n    for i in range(n):\n        temp += matrix[i][i]\n    if temp != target_sum:\n        return False\n    temp = 0\n    for i in range(n-1,-1,-1):\n        temp += matrix[i][i]\n    if temp != target_sum:\n        return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n*(2*n-1)*n//2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(lst):\n    zero_count = 0\n    for num in lst:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(lst) if lst else 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    i = 0\n    while 2 ** i <= n:\n        if 2 ** i == n:\n            return True\n        if n % (2 ** i) == 0:\n            n = n - (2 ** i)\n            i += 1\n        else:\n            i += 1\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[123456788]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n < 0:\n        return 2 ** ((n - 1).bit_length() if n % 2 else n.bit_length()) * 2\n    else:\n        return 2 ** n.bit_length() if n != 0 else 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1]]}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    for i in range(len(arr), 0, -1):\n        max_idx = arr.index(max(arr[:i]))\n        if max_idx != i - 1:\n            if max_idx != 0:\n                arr = arr[:max_idx + 1][::-1] + arr[max_idx + 1:]\n            arr = arr[:len(arr) - i + max_idx + 1][::-1] + arr[len(arr) - i + max_idx + 1:]\n    return arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 79, 25, 38, 69]]], "plus_fail_tests": [[[54, 28, 91, 12, 78, 37, 66, 42, 84, 59]]]}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    return set(num for sublist in lst for num in sublist)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements_to_remove):\n    return [value for value in lst if value not in elements_to_remove]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    return n * (n // 2) if n % 2 == 0 else n * (n // 2) + n // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[6]], "plus_fail_tests": [[-5]]}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    s = s.lower()\n    return sum(1 for c in s if ord(c) - 96 == ord('a') <= ord(c) - 96 <= ord('z') - 96)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["xbcefg"]], "plus_fail_tests": [["TheQuickBrownFoxJumpsOverTheLazyDog"]]}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, target):\n    count = 0\n    for i in range(n):\n        if arr[i] == target:\n            count += 1\n    return count > n // 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurance(s):\n    return s.count('std')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    return len(set(type(x) for x in t)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    return bin(n).count(\"1\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([c for i, c in enumerate(s) if i % 2 == 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return m\n    total = 0\n    for i in range(2, m):\n        total += 1\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[100, 10]]}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    return n | (n & ((~0) >> 1))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[20]], "plus_fail_tests": [[999999999]]}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * (radius + height)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 5]], "plus_fail_tests": [[0.5, 5]]}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(set([x for x in lst]), reverse=True)[:n]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[4, 5, 3, 8, 5, 2, 6, 4], 4]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    return {t: lst.count(t) for t in set(tuple(sorted(t)) for t in lst)}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]]], "plus_fail_tests": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]]]}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(s, c):\n    return s.replace(\" \", c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [1] * n\n    dec = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + 1)\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + 1)\n    return max(sum(inc) - 1, sum(dec) - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    i = int(n ** 0.5) + 1\n    while True:\n        square = i * i\n        if square > n:\n            return square\n        i += 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    return [element if i == 0 else element if i == len(lst) else element if i > 0 and i < len(lst) else lst[i-1] for i in range(len(lst)+1)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Black"], "c"]], "plus_fail_tests": [[[], "hello"]]}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    return tup.count(element)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    return len([s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return sum(isinstance(i, int) for i in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "def convert(c):\n    import cmath\n    r = abs(c)\n    theta = cmath.phase(c)\n    return (r, theta)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    star_nums = [15, 28, 43, 66, 91, 122, 153, 182, 209, 244, 277, 318, 357, 394, 429, 462, 493, 522, 549, 574, 607, 638, 667, 702, 735, 766, 795, 828, 857, 882, 913, 942, 969, 994]\n    return star_nums[n-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    result = []\n    i = 0\n    j = 0\n    while i < len(t1) and j < len(t2):\n        if t1[i][1] > t2[j][1]:\n            result.append(t1[i])\n            i += 1\n        elif t2[j][1] > t1[i][1]:\n            result.append(t2[j])\n            j += 1\n        else:\n            if t1[i][0] < t2[j][0]:\n                result.append(t1[i])\n                i += 1\n            else:\n                result.append(t2[j])\n                j += 1\n    result += t1[i:]\n    result += t2[j:]\n    return tuple(map(tuple, result))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8]], [[8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    return human_age * 5", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[100]]}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3]], "plus_fail_tests": [[[], 1]]}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(map(lambda x, y: x//y if y != 0 else float('inf') if x != 0 else float('inf') if y == 0 else 0, tuple1, tuple2))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5, 2, 3, 3], [5, 2, 3, 4]]]}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 == 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return sum(1 for i in range(2, n) if is_prime(i))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    return [tup[-1] for tup in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, repeat):\n    max_sum = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            temp_sum = sum(arr[i:j])\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 10, 20], 3, 2]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(x - y for x, y in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {key: value for key, value in d.items() if value >= n}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    return [x-y for x, y in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for i in t:\n        if not isinstance(i, tuple):\n            count += 1\n        else:\n            break\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return int(((9*n**2) - (n**2)) / 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    return 'ab' in text and (text.find('abb') != -1 or text.find('abbb') != -1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(x == element for x in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    result = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            result += binomial_coefficient(n, i)\n    return result\ndef binomial_coefficient(n, k):\n    if k > n - k:  # take advantage of the symmetry\n        k = n - k\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) // i\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(n):\n    n = str(n)\n    for digit in n:\n        if int(digit) > 0 and int(digit) > int(n).count(digit):\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1234]], "plus_fail_tests": [[9]]}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_len, max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(n*2)\n        if sum(int(c) for c in bin_str[:n]) == sum(int(c) for c in bin_str[n:]):\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[4]]}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    aggregate = {}\n    for name, score in lst:\n        if name in aggregate:\n            aggregate[name] += score\n        else:\n            aggregate[name] = score\n    return max(aggregate.items(), key=lambda x: x[1]) if aggregate else None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    depth = 1\n    stack = [(d, 1)]\n    while stack:\n        current, level = stack.pop(0)\n        if isinstance(current, dict):\n            for k, v in current.items():\n                stack.append((v, level + 1))\n        else:\n            pass\n    return level", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"a": 1, "b": {"c": "python"}}]], "plus_fail_tests": [[{"1": null, "2": {"3": [1, 2, 3, "four", {"five": []}]}}]]}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "def otherside_rightangle(a, b):\n    return (a**2 + b**2)**0.5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if type(element) == list:\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    products = [a * b for a in sorted(list1, reverse=True) for b in sorted(list2, reverse=True)]\n    return [products[i] for i in range(min(n, len(products)))]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], "plus_fail_tests": [[[-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], [-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], 1]]}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        words_list = word.split()\n        for w in words_list:\n            if w[0].lower() == 'p':\n                if w not in result:\n                    result = result + [w]\n                    if len(result) == 2:\n                        return tuple(result)\n    return tuple(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    return max(map(int, [x for x in lst if type(x) == int]) or [float('-inf')]) if any(type(x) == int for x in lst) else max(lst)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["3.14", false, 7.5]]]}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, i, k, j):\n    max_sum = 0\n    current_sum = 0\n    prev_num = float('-inf')\n    for num in arr[:i]:\n        if num > prev_num:\n            current_sum += num\n        else:\n            max_sum = max(max_sum, current_sum)\n            current_sum = num\n        prev_num = num\n    max_sum = max(max_sum, current_sum)\n    current_sum = 0\n    prev_num = float('-inf')\n    for num in arr[i:j+1]:\n        if num > prev_num:\n            current_sum += num\n        else:\n            max_sum = max(max_sum, current_sum)\n            current_sum = num\n        prev_num = num\n    return max_sum + arr[j]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], "plus_fail_tests": [[[5, 2, 4, 1, 3, 6], 6, 1, 3]]}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple(s)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    return n | (n & -n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[125]]}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    return element in tuplex", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    return len(t) == len(set(t))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 0\n    while 2 ** (power + 1) <= n:\n        power += 1\n    return 2 ** power - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1]]}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    result = []\n    for i in range(len(keys)):\n        result.append({keys[i]: {values[i]: scores[i]}})\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(lst, fmt):\n    return [fmt.format(i) for i in map(str, lst)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    memo = {1: 1}\n    def f(k):\n        if k in memo:\n            return memo[k]\n        if k < 2:\n            return 0\n        res = 0\n        for i in range(2, int(k//0.5) + 1):\n            if k % i == 0:\n                res = max(res, i + f(k//i))\n        memo[k] = res\n        return res\n    return f(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[60]], "plus_fail_tests": [[100]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[15]]}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    return (1.0/3) * math.pi * (radius ** 2) * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    def sum_of_digit(n):\n        return sum(int(digit) for digit in str(n))\n    return sum(sum_of_digit(num) for num in lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[-10, 15, 0, -5, 2]]]}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    numbers = sorted([a, b, c])\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(n):\n    return n % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    return sum_of_cubes / n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [x[0] for x in lst]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Greyson Fulton", 98, 99], ["Brady Kent", 97, 96], ["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98]], 2]], "plus_fail_tests": [[[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89]], 1]]}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    result = ()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max1*max2:\n                max1, max2 = arr[i], arr[j]\n                result = (max1, max2)\n            elif arr[i]*arr[j] > max1*max2 and arr[i] > max1:\n                max1, max2 = arr[i], max2\n                result = (max1, max2)\n            elif arr[i]*arr[j] > max1*max2 and arr[i] < max1:\n                max1, max2 = arr[i], max1*max2//arr[i]\n                result = (max1, max2)\n            elif arr[i]*arr[j] > max1*max2 and arr[j] > max2:\n                max1, max2 = arr[i], arr[j]\n                result = (max1, max2)\n            elif arr[i]*arr[j] > max1*max2 and arr[j] < max2:\n                max1, max2 = arr[i], max1*max2//arr[j]\n                result = (max1, max2)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 7, 0, 8, 4]]], "plus_fail_tests": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum(i**3 for i in range(2, 2*n+2, 2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    return min(x[0]*x[1] for x in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(lst):\n    return int(sum(map(round, lst))) if lst else 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]]], "plus_fail_tests": [[[1, 2, 3, 4, 5]]]}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    return sum(1 for sublst in lst for x in sublst if x == element)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t):\n    return '-'.join(map(str, t))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    return any(item in seq2 for item in seq1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(t):\n    return [s[-1] for s in t]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    return min(map(int, filter(lambda x: isinstance(x, int), lst))) if any(isinstance(x, int) for x in lst) else float('inf')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(lst):\n    return [num for num in lst if num % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return not any(i <= num for i in arr)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 3, 4, 5, 6], 8]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 6]]}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, x0, y0):\n    return -a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 8, 4]]}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[15, 25, 35]], "plus_fail_tests": [[2.3, 4.7, 3.9]]}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return [i for i, (x, y) in enumerate(zip(t1, t2)) if x == y]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 4, 6, 9], [5, 2, 3, 3]]], "plus_fail_tests": [[[0, 0, 0, 0], [0, 0, 0, 0]]]}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * (size ** 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    return int(''.join(map(str, lst)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    day, month, year = date.split('-')\n    return f'{day}-{month}-{year}'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["2026-01-02"]], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple(a*b for a, b in zip(t1, t2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 1], [2, 2], [3, 3], [4, 4]], [[5, 5], [6, 6], [7, 7], [8, 8]]]]}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return \"\".join([c for c in s if ord(c.lower()) % 2 == 0 or c.lower() in 'yhn'])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python"]], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_Digit(n):\n    return n % 10", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-987]]}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_Occurrence(lst_tuple, lst):\n    return sum(1 for x in lst_tuple for y in lst if x == y)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    a, b, c = 3, 2, 1\n    total = 2\n    if n == 1:\n        return 2\n    if n == 2:\n        return 2\n    for _ in range(2, n):\n        a, b, c = b, c, a + b\n        if _ == n - 1:\n            total += c\n        else:\n            total += c\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join([c for c in s if c.islower()])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    return min(lst, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return s.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif month in [4, 6, 9, 11]:\n        return False\n    elif month == 2:\n        return False\n    else:\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[1]]}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [x[0] for x in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(lst):\n    return [i**3 for i in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [i for i in lst if len(i) == size]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return 'z' in text", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [s[::-1] for s in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n            \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n        \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    return all(lst[i] + 1 == lst[i+1] for i in range(len(lst)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=False)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Math": 81, "Physics": 83, "Chemistry": 87}]], "plus_fail_tests": [[{"A": -10, "B": 20, "C": -5, "D": 15, "E": 0}]]}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_Digit(n):\n    return int(str(n)[0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(x + y for x, y in zip([t[0]] + list(t), list(t) + [t[-1]]))[1:-1]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuples1, tuples2):\n    set1 = set(map(frozenset, [t for t in tuples1]))\n    set2 = set(map(frozenset, [t for t in tuples2]))\n    return frozenset(map(frozenset, [t for t in set(set1 & set2)]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [7, 8, 9], [10, 11, 12]]]]}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join([c for c in s if c.isupper() or c.isspace()])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(s, old, new):\n    return s.replace(old, new)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    if not nums:\n        return 0\n\n    max_ending_here = nums[0]\n    min_ending_here = nums[0]\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(nums[i], max_ending_here * nums[i])\n        min_ending_here = min(nums[i], min_ending_here * nums[i])\n\n        result = max(result, max_ending_here)\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[-3, -100, -4, -5, -150, -6]]]}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split(s):\n    return list(s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, k):\n    if k < 1 or not arr:\n        return 0\n    max_sum = float('-inf')\n    window_sum = 0\n    window_start = 0\n    for window_end in range(len(arr)):\n        window_sum += arr[window_end]\n        if window_end >= k - 1:\n            max_sum = max(max_sum, window_sum)\n            window_sum -= arr[window_start]\n            window_start += 1\n    return max_sum if max_sum != float('-inf') else 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-2, -3, 4, -1, -2, 1, 5, -3], 8]], "plus_fail_tests": [[[-10, -5, -3, -2, -1], 5]]}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    return [x.strip('\"') for x in s.strip('\"').split(', ')]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["\"python\",\"program\",\"language\""]], "plus_fail_tests": [["This is a test input."]]}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, k):\n    return sum(1 for i in range(len(lst)) for j in range(i+1, len(lst)) if lst[i] != lst[j])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 6], 2]]}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(t1, t2):\n    return tuple(sorted(set(t1) | set(t2)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_natural_numbers = n * (n + 1) // 2\n    return sum_of_cubes - sum_of_natural_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lists):\n    return max(len(sublist) for sublist in lists)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    return functools.reduce(lambda x, y: x * y, set(lst), 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 20, 30, 40, 20, 50, 60, 40]]], "plus_fail_tests": [[[1000000, 2000000, 3000000, 2000000, 4000000, 5000000]]]}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    def last_digit(x):\n        if x % 4 == 0 and x != 0:\n            return 0\n        elif x % 4 == 1:\n            return 1\n        elif x % 4 == 2:\n            return 2 if x % 2 == 0 else 6\n        elif x % 4 == 3:\n            return 3\n    return last_digit(n % 4)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[0]]}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [x for t in zip(list1, list2, list3) for x in t]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(big_list, small_list):\n    return small_list == big_list[:len(small_list)]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lst):\n    return list(set([x for x in lst if lst.count(x) == 1]))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]]]}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    catalan = [0]*(n+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n+1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[n]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(t1, t2):\n    return tuple(x for x in (x for x in t1 + t2 if x not in t1 or x not in t2) if x not in (x for x in t1 + t2 if x in t1 and x in t2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    # Calculate the slant height of the pyramid\n    slant_height = (base_edge**2 + height**2)**0.5\n    \n    # Calculate the area of the base\n    base_area = base_edge**2\n    \n    # Calculate the area of each triangular face\n    face_area = 0.5 * base_edge * height\n    \n    # Calculate the total surface area\n    total_area = base_area + 4 * face_area\n    \n    return int(total_area)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            new_element = tuple(x for x in element if x % 2 == 0)\n            if new_element:\n                result.append(new_element)\n        elif element % 2 == 0:\n            result.append(element)\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 5, [7, 6, [2, 4]], 6, 8]]], "plus_fail_tests": [[[1, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]]]}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    import itertools\n    return [x for x in (tuple(y) for y in itertools.product(lst, repeat=n))]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    return max(lst) - min(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(m, n):\n    return [i**2 for i in range(1, int((n**0.5)+1)) for _ in range(int((m**0.5)+1), -1, -1) if i**2 >= m and i**2 <= n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 30]], "plus_fail_tests": [[-10, -1]]}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    merged = sorted(arr1 + arr2)\n    return merged[k-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "def polar_rect(r, theta):\n    import math\n    x = r * math.cos(math.radians(theta))\n    y = r * math.sin(math.radians(theta))\n    return (x, complex(x, y))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    return '.'.join(map(str, map(int, ip.split('.'))))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    return even - odd if even is not None and odd is not None else None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    result = 0\n    for i in range(1, n+1):\n        product = 1\n        for j in range(i):\n            product *= (n-j) // (j+1)\n        result += product\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    return sys.getsizeof(t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    num = str(n)\n    return n == int(num[::-1]**len(num))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[153]], "plus_fail_tests": [[12345678901234567890]]}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if i % 2 != 0 and i % 3 != 0:\n            lucid_numbers.append(i)\n    return lucid_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2]], "plus_fail_tests": [[[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2]]}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(i) / len(i) for i in tuples]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]], "plus_fail_tests": [[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]]]}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = ''\n    res = ''\n    for char in s:\n        if char.isdigit():\n            nums += char\n        else:\n            if nums:\n                res += nums\n                nums = ''\n            res += char\n    if nums:\n        res += nums\n    return res", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["I1love143you55three3000thousand"]], "plus_fail_tests": [["Hello! My age is 28. I was born on the 1st of January, 1992."]]}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    return [x / y if y != 0 else float('inf') for x, y in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(list_of_lists):\n    result = [ [], [] ]\n    for sub_list in list_of_lists:\n        result[0].append(sub_list[0])\n        result[1].append(sub_list[1])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cummulative_sum(lst):\n    return sum(sum(i) for i in [i for i in map(lambda x: list(x), lst)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "def radian_degree(degrees):\n    import math\n    return degrees * (math.pi / 180)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    nums.sort()\n    count = 1\n    i = 1\n    for j in range(1, len(nums)):\n        if nums[j] % nums[j-1] == 0:\n            i += 1\n        else:\n            count = max(count, i)\n            i = 1\n    return max(count, i)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 6, 13, 17, 18]]], "plus_fail_tests": [[[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]]]}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged = sorted(list1 + list2)\n    return float(merged[size // 2] if size % 2 != 0 else (merged[size // 2] + merged[size // 2 - 1]) / 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], "plus_fail_tests": [[[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10]]}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(lst, n):\n    return [i**n for i in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost, selling):\n    return selling <= cost", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1500, 1200]], "plus_fail_tests": [[-2000, -5000]]}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    if wind_velocity < 4 or temperature < -12.8 or temperature > 15:\n        return None\n    wind_chill_index = 13.12 + 0.6215*temperature - 11.37*(wind_velocity**0.16) + 0.3965*temperature*(wind_velocity**0.16)\n    return round(wind_chill_index)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[120, 35]], "plus_fail_tests": [[0, 0]]}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(lst, n):\n    result = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            result += lst[i] ^ lst[j]\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 3], 11]]}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    return (1/2) * (radius**2) * (radius**2) ** 0.5", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0.5]]}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    def heapify(lst, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and lst[i] < lst[l]:\n            largest = l\n        if r < n and lst[largest] < lst[r]:\n            largest = r\n        if largest != i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n            heapify(lst, n, largest)\n    n = len(lst)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(lst, n, i)\n    for i in range(n-1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def Split(lst):\n    return [i for i in lst if i % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    return [x for x in filter(lambda i: i != 0, lst) ] + [x for x in filter(lambda i: i == 0, lst)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ').replace('  ', ' ').strip().replace(' ', '_')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["The_Avengers"]], "plus_fail_tests": [["  Jumanji The Jungle  "]]}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(\" \", \"%20\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return int((n*(8*n-1))//2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    return 'z' in text[1:-1].lower() if len(text) > 1 else False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    return t + (d,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(grid):\n    n = len(grid)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])\n    max_sum = dp[-1][-1]\n    min_path = float('inf')\n    for i in range(n):\n        for j in range(n):\n            path_sum = dp[i][j]\n            path_len = i + j\n            if i == 0 and j == 0:\n                path_sum -= grid[i][j]\n                path_len -= 1\n            elif i == 0:\n                path_sum -= grid[i][j-1]\n                path_len -= 1\n            elif j == 0:\n                path_sum -= grid[i-1][j]\n                path_len -= 1\n            else:\n                path_sum -= min(grid[i-1][j], grid[i][j-1])\n                path_len -= 1\n            if path_len > 0:\n                max_sum = max(max_sum, path_sum)\n                min_path = min(min_path, path_len)\n    return max_sum / min_path if min_path > 0 else 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, -1]]]]}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    return [i.strip('\"') for i in s.split('\"') if i.strip() != '']", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Cortex \"A53\" Based \"multi\" tasking \"Processor\""]], "plus_fail_tests": [["This is a \"nested 'quote'\" example"]]}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for i in lst:\n        if not result or i != result[-1]:\n            result.append(i)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = pow(base, power)\n    return sum(int(digit) for digit in str(result))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: height_weight for name, height_weight in students.items() if height_weight[0] > min_height and height_weight[1] > min_weight}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 6.0, 70]], "plus_fail_tests": [[{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 5.8, 65]]}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    return sum(1 for a, b in zip(list1, list2) if a == b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone(r, h):\n    import math\n    pi = math.pi\n    return pi * r * (r + math.sqrt(h**2 + r**2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 12]], "plus_fail_tests": [[2.5, 8.3]]}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    try:\n        return arr.index(target)\n    except ValueError:\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    def prod(sublist):\n        result = 1\n        for num in sublist:\n            result *= num\n        return result\n\n    total_sum = 0\n    for i in range(2**len(lst)):\n        sublist = [lst[j] for j in range(len(lst)) if (i & (1 << j))]\n        total_sum += prod(sublist)\n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": [[[]]]}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    # Convert the number to binary and remove the '0b' prefix\n    bin_n = bin(n)[2:]\n    \n    # Calculate the length of the binary number\n    length = len(bin_n)\n    \n    # If the length of the binary number is less than 2, return the number as it is\n    if length < 2:\n        return n\n    \n    # Toggle the middle bits\n    middle = bin_n[1:-1]\n    toggled_middle = ''.join('1' if bit == '0' else '0' for bit in middle)\n    \n    # Combine the first bit, the toggled middle bits, and the last bit\n    result = bin_n[0] + toggled_middle + bin_n[-1]\n    \n    # Convert the binary string back to an integer and return the result\n    return int(result, 2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, val):\n    left = 0\n    right = len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(s):\n    return len(set(s)) == 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    return {t[i]: t[i+1] for i in range(0, len(t)-1, 2)}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    def is_triangular(k):\n        m = (int)((8*k + 1)**0.5) // 2\n        return m*(m+1) == 2*k + 1\n    i = 1\n    while True:\n        if str(int((i*(i+1))/2)).zfill(n)[0] != '1':\n            i -= 1\n            return i\n        while not is_triangular(i):\n            i += 1\n        if len(str(int((i*(i+1))/2)).zfill(n)) != n:\n            i -= 1\n            return i\n        i += 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[5]]}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(a):\n    return (1.0/6.0) * math.sqrt(3) * a**2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(s):\n    vowels = 'aeiouAEIOU'\n    if re.match('^[aeiouAEIOU].*', s):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    return sum(i**5 for i in range(2, 2*n+1, 2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(n):\n        for digit in str(n):\n            if int(digit) != 0 and n % int(digit) != 0:\n                return False\n        return True\n\n    return [i for i in range(startnum, endnum+1) if is_divisible(i)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    return s", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PythonProgrammingExamples"]], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return [int(x) for x in sorted(map(int, lst))]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    return lst + list(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 31, 10]]]}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    return [[x-1, y], [x-1, y+1], [x-1, y+2], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    return any(x is None for x in t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float(s)\n        return len(s.split('.')[1]) <= 2 if '.' in s else True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n            elif lst[j] == lst[i][::-1]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    return sorted(set([x for x in lst if x != min(lst)]))[0] if len([x for x in lst if x != min(lst)]) > 0 else None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    return list(set([x for x in l1 if x in l2 and x in l3]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12]]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(record_list, k):\n    return sorted(record_list, key=lambda x: x[1])[:k]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    result = {}\n    for item in lst:\n        item_tuple = tuple(item)\n        if item_tuple in result:\n            result[item_tuple] += 1\n        else:\n            result[item_tuple] = 1\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif month_number in [4, 6, 9, 11]:\n        return True\n    elif month_number == 2:\n        return False\n    else:\n        return \"Invalid month number\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def polite_numbers():\n        i = 0\n        a = 0\n        b = 1\n        while True:\n            a, b = b, a + b\n            if a > n:\n                return\n            yield a\n\n    return next((i for i, x in enumerate(polite_numbers()) if i == n - 1), None)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(lst, target_sum):\n    lst = set(lst)\n    count = 0\n    for num in lst:\n        complement = target_sum - num\n        if complement in lst:\n            if num == complement:\n                count += len([i for i in lst if i == num]) * (len([i for i in lst if i == num]) - 1) // 2\n            else:\n                count += len([i for i in lst if i == num]) * len([i for i in lst if i == complement])\n        elif num < complement:\n            count += len([i for i in lst if i == num]) * len([i for i in lst if i < complement and i != num])\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 1, 1], 2]], "plus_fail_tests": [[[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 8]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return sorted([x for x in list1 if x not in list2] + [x for y in list2 for x in list1 if x not in list2 and x not in y])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(i for i in set(lst) if lst.count(i) == 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 1, 1, 4, 5, 6]]], "plus_fail_tests": [[[-1, -2, -3, -1, -1, -4, -5, -6]]]}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    temp = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            temp.append(lst[i])\n        else:\n            result.append(temp)\n            temp = [lst[i]]\n    result.append(temp)\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    return ' '.join(word for word in s.split() if len(word) != k)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurance_substring(s, sub):\n    try:\n        return sub, s.index(sub), s.index(sub)+len(sub)-1\n    except ValueError:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python programming, python language", "python"]], "plus_fail_tests": [["", ""]]}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n            result.append((tuples[i][0] + tuples[j][1], tuples[i][1] + tuples[j][0]))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[100, 200], [300, 400], [500, 600], [700, 800]]]]}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    return all(i % 2 != 0 and isinstance(x, int) and x % 2 != 0 for i, x in enumerate(lst) if i % 2 != 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, str):\n    return tuple(lst + [str])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, val):\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < val:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[7, true, 3, 6], true]]}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i) % 2 != 0:\n                total_sum += sum(arr[i:j+1])\n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4]]], "plus_fail_tests": [[[4, 3, 2, 1, 9, 10, 7]]]}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    if not even or not odd:\n        return 0\n    return even[0] * odd[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    return text and text[0] == 'a' and len(text) > 1 and text[1:4] == 'bb'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abbbba"]], "plus_fail_tests": [[""]]}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(t):\n    return eval(t.replace(\"(\", \"\").replace(\")\", \"\"))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["(100)"]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == target:\n            return i\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    return len(lst)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    result = []\n    for x in t:\n        if not isinstance(x, tuple):\n            result.append(x)\n        elif not result or not isinstance(result[-1], tuple):\n            result.append(x)\n        else:\n            last = result[-1]\n            if not isinstance(last, tuple):\n                result[-1] = (last, x)\n            else:\n                last += (x,)\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, [4, 6], 10]]], "plus_fail_tests": [[[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3]], 4]]]}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(d):\n    return sum(d.values())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    return sum(1 for x in (a, b, c) for y in (a, b, c) if x == y) - 3 if a == b == c else 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 1, 1]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return (n << d % 32) if d % 32 != 0 else n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt = n ** 0.5\n    return int(sqrt + 0.5) ** 2 == n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return not all(x <= y for x, y in zip(t1, t2))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5, 10, 15, 20], [4, 8, 16, 25]]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}