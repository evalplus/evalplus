{"date": "2024-08-08 15:39", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    return [x for y in sorted([[sum(i), i] for i in matrix], key=lambda x: x[0]) for x in [y[1]]]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(lst):\n    return any(lst.count(i)>1 for i in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(s1, s2):\n    return ''.join([i for i in s1 if i not in s2])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    return [w for w in s.split() if len(w) >= 4]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(s):\n    return any(c.islower() for c in s) and not any(c.islower() and c not in 'abcdefghijklmnopqrstuvwxyz_' for c in s)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aab_Abbbc"]], "plus_fail_tests": [["_abc"]]}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1).intersection(set(list2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(s, c):\n    return s.replace(c, '', 1).replace(c, '', -1 if s[-1] == c else '')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hello", "l"]], "plus_fail_tests": [["aaa", "a"]]}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(num):\n    if num <= 1:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    return 1 if len(s) == len(set(s)) else (len(s) - len(set(s))) + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aaaa"]], "plus_fail_tests": [["aaaaaaaaaaaaaaaab"]]}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num**2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    return (base*height*length)/2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n    if len(bin1) > len(bin2):\n        bin2 = '0' * (len(bin1) - len(bin2)) + bin2\n    elif len(bin2) > len(bin1):\n        bin1 = '0' * (len(bin2) - len(bin1)) + bin1\n    for i in range(len(bin1)):\n        if bin1[i] != bin2[i]:\n            if i + 1 == len(bin1) or i + 1 == len(bin2) or bin1[i + 1] != bin2[i + 1]:\n                return True\n            else:\n                return False\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[13, 9]], "plus_fail_tests": [[-50, -100]]}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(lst, n):\n    return sorted(lst, reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side):\n    return side * 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    rev = int(str(num)[::-1])\n    return num == 2*rev-1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    return sum(int(c) for c in str(n)) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[383]], "plus_fail_tests": [[-71]]}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Returns the nth octagonal number.\n    \"\"\"\n    return 8 * n**2 - 4 * n + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    return len(tuples) and not any(len(t for t in tuples) != len(tuples[0]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[11, 22, 33], [44, 55, 66]]]], "plus_fail_tests": [[[[1, 2, 3], [], [4, 5]]]]}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a = [1, 1, 2]\n        for i in range(3, n + 1):\n            a.append(sum([int(x) for x in str(a[i - 1])]))\n        return a[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25)) if gap > 1 else 1\n        swapped = False\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    return (len(arr) == 1 or\n            (arr[0] <= arr[-1] and\n             all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))) or\n            (arr[0] >= arr[-1] and\n             all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    return len([x for x in lst if x > 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    return (a < 0 and b > 0) or (a > 0 and b < 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(nums):\n    nums = sorted(nums, reverse=True)\n    return int(''.join(map(str, nums)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    return len(patterns) == len(sequence) and all(patterns[i] == sequence[i] for i in range(len(patterns)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "green"], ["a", "b", "b"]]], "plus_fail_tests": [[["red", "green", "blue"], ["a", "b", "c"]]]}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    return min(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst1, lst2):\n    return any([all(x in lst1 for x in lst2) for _ in range(len(lst1) // len(lst2) + 1)])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 4, 3, 5, 7], [3, 7]]], "plus_fail_tests": [[[], []]]}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            diff = abs(tuples[i][1] - tuples[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    def _recursive_list_sum(lst, acc=0):\n        for item in lst:\n            if isinstance(item, list):\n                acc += sum(_recursive_list_sum(item, 0), 0)\n            else:\n                acc += item\n        return acc\n    return _recursive_list_sum(lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, [3, 4], [5, 6]]]], "plus_fail_tests": [[[1, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]]]]]}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(num):\n    for i in range(num):\n        for j in range(i, num):\n            if i * i + j * j == num * num:\n                return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[991]]}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(lst, k):\n    return [t for t in lst if all(i % k == 0 for i in t)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_Diff(num):\n    return sum(int(digit) for digit in str(num)) % 11 == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1212112]], "plus_fail_tests": [[-1212]]}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(lst):\n    return max([len(i) for i in lst])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    return max(i for i in range(n) if i < n)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "def volume_sphere(radius):\n    import math\n    return (4/3) * math.pi * radius**3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a**b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    return {k: lst.count(k) for k in set(lst)}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "def surfacearea_sphere(radius):\n    import math\n    return 4 * math.pi * radius ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return 4 * n**3 - 3 * n**2 + n // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(lst, sub):\n    for item in lst:\n        if sub in item:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return int((n * (n + 1) * (2 * n + 1)) / 6)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[10]]}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    return n > 0 and str(n)[0] == str(n)[-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1991]], "plus_fail_tests": [[2121212121212121]]}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count(lst):\n    return sum([1 for x in lst if x])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Returns the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the result\n    result = 1\n\n    # Iterate over the range [1, n]\n    for i in range(1, n + 1):\n        # Update the result\n        result *= (n - m + i)\n\n        # Divide the result by i\n        result //= i\n\n    # Return the result\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    count = 0\n    for i in s:\n        if i == '1':\n            count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["1100110011", 5]]}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    freq = {}\n    for l in [item for sublist in lst for item in sublist]:\n        if l in freq:\n            freq[l] += 1\n        else:\n            freq[l] = 1\n    return freq", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "def multiply_num(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result / len(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(l, t):\n    return t + tuple(l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    return min([len(i) for i in lst])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    n = str(n)\n    n = int(n + ('0' if len(n) % 2 else '1'))\n    while not n[0] == n[-1] or n[1:-1] and n[1] != n[-2]:\n        n += '1'\n    return int(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[99]], "plus_fail_tests": [[0]]}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(s):\n    return ''.join([w[0].upper() + w[1:] if i else w.upper() for i, w in enumerate(s.split('_'))]).lstrip(' ')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python_program"]], "plus_fail_tests": [["___python_program"]]}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(sublists):\n    return [sorted(sublist) for sublist in sublists]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(s):\n    return s.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    zeros = 1\n    ones = 0\n    max_diff = 0\n    for i in s:\n        if i == '0':\n            zeros += 1\n            ones = 0\n        else:\n            ones += 1\n            zeros = 0\n        if zeros > ones:\n            max_diff = zeros\n        elif ones > zeros:\n            max_diff = ones\n        elif zeros == ones:\n            max_diff = zeros\n        elif zeros > ones and zeros == ones + 1:\n            max_diff = zeros\n        elif ones > zeros and ones == zeros + 1:\n            max_diff = ones\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["11000010001"]], "plus_fail_tests": [["0000001110000001111111"]]}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n    sum_row = sum(matrix[0])\n    for i in range(1, n):\n        if sum(matrix[i]) != sum_row:\n            return False\n    for i in range(n):\n        sum_col = 0\n        for j in range(n):\n            sum_col += matrix[j][i]\n        if sum_col != sum_row:\n            return False\n    sum_diag1 = 0\n    sum_diag2 = 0\n    for i in range(n):\n        sum_diag1 += matrix[i][i]\n        sum_diag2 += matrix[i][n - 1 - i]\n    if sum_diag1 != sum_row or sum_diag2 != sum_row:\n        return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum(x, y):\n    divisors = []\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 15]], "plus_fail_tests": [[27, 81]]}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i].lower() not in vowels:\n            i += 1\n        elif s[j].lower() not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return \"\".join(s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n            product = abs(lst[i][1] * lst[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[2, 7], [2, 6], [1, 8], [4, 9]]]], "plus_fail_tests": [[[[-10, 20], [15, -2], [-5, 10]]]]}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    return set([x for x in nested_lists[0] if all(x in y for y in nested_lists)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    return [word for word in words if len(word) > n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, "python is a programming language"]], "plus_fail_tests": [[0, "abc  def  ghi  jklm  nopqrs   tuvwxyz"]]}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(arr):\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            return arr[i]\n        if arr[i] != arr[i+1]:\n            return arr[i]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 2, 3]]], "plus_fail_tests": [[[]]]}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "def angle_complex(real, imag):\n    import cmath\n    return cmath.phase(complex(real, imag))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "1j"]]}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if int(s[i:j]) > 0 and sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    return max(abs(x-y) for x in arr for y in arr if x != y)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1]]]}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    return True if n != 0 and bin(n).count('1') <= 1 else False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[-2147483648]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "def circle_circumference(radius):\n    import math\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(lst):\n    return sum([x for x in lst if x < 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(l1, l2, l3):\n    count = 0\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(nested_list):\n    flat_list = []\n    for sublist in nested_list:\n        for item in sublist:\n            if item not in flat_list:\n                flat_list.append(item)\n    return set(flat_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() in alphabet and string[i].lower() == alphabet[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["TheQuickBrownFoxJumpsOverTheLazyDog"]]}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    if n < 0:\n        return 0\n    else:\n        return n * (n + 1) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[6]], "plus_fail_tests": [[1000000]]}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "def zero_count(lst):\n    zero_count = 0\n    for i in lst:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    return sorted(lst, reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10]], "plus_fail_tests": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 3, 7]]}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n        if count > n // 2:\n            return True\n    return count > n // 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    return string.replace(\" \", char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return side_length * 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    return 2 ** (n.bit_length() + (n & (n - 1) == 0).int())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[1]]}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(s):\n    return ''.join([c for i, c in enumerate(s) if i % 2 == 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    return string.count('std')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    return all(type(x) is type(tup[0]) for x in tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "def lateralsuface_cylinder(radius, height):\n    return 2 * 3.14159 * radius * height", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 5]], "plus_fail_tests": [[5, 5]]}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    return m - 2 * (n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 2]], "plus_fail_tests": [[100, 10]]}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    i = n\n    while i < float('inf'):\n        i += 1\n        if i**0.5 % 1 == 0:\n            return i", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    d = {}\n    for t in lst:\n        if t in d:\n            d[t] += 1\n        else:\n            d[t] = 1\n    return {k: v for k, v in d.items()}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]]], "plus_fail_tests": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]]]}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(s):\n    return len(s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    return num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[20]], "plus_fail_tests": [[999999999]]}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    inc = [arr[0]]\n    dec = []\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            inc.append(arr[i])\n        else:\n            dec = [arr[i]] + dec\n        if len(inc) > len(dec):\n            if not dec:\n                return sum(inc)\n            else:\n                return sum(inc) + dec[0]\n    return sum(inc) + dec[0] if dec else sum(inc)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    return len(s) * (len(s) + 1) // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tuple, element):\n    return tuple.count(element)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(lst1, lst2):\n    lst1[-1:] = lst2\n    return lst1 + lst2[len(lst2) - len(lst1):]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12]]]}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    return [element] * len(lst) + lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Black"], "c"]], "plus_fail_tests": [[[-94.19039842971628, -3.4031380684866406, -22.045351968568852, -94.19039842971628], "a"]]}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length**3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "def convert(z):\n    if isinstance(z, complex):\n        r = abs(z)\n        phi = z.imag / z.real * 180 / 3.141592653589793 if z.real != 0 else 0\n        return r, phi\n    else:\n        return (z, 0) if isinstance(z, (int, float)) else (z, 0) if isinstance(z, str) else (z, 0) if isinstance(z, bool) else (z, 0)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["(1+2j)"]]}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    return len([x for x in lst if type(x) == int])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def is_amicable(a):\n        b = sum([d for d in range(1, a) if a % d == 0])\n        c = sum([d for d in range(1, b) if b % d == 0])\n        return a == c and a != b\n\n    return sum([x for x in range(1, n + 1) if is_amicable(x)])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9999]], "plus_fail_tests": [[10000]]}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    def find_max_index(lst):\n        max_index = 0\n        for i in range(1, len(lst)):\n            if lst[i] > lst[max_index]:\n                max_index = i\n        return max_index\n\n    def reverse(lst, index):\n        return lst[:index][::-1] + lst[index:]\n\n    sorted_lst = []\n    while lst:\n        max_index = find_max_index(lst)\n        sorted_lst += reverse(lst, max_index + 1)\n        sorted_lst += lst[max_index::-1][max_index + 1:]\n        lst = lst[len(lst) - max_index - 1:]\n    return sorted_lst[:len(lst)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 79, 25, 38, 69]]], "plus_fail_tests": [[[54, 28, 91, 12, 78, 37, 66, 42, 84, 59]]]}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return x, y\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char.upper()) if char.isalpha() else None", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["@"]]}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    return tuple(max(x, y) for x, y in zip(t1, t2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst), n)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3]], "plus_fail_tests": [[[], 1]]}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    return [item[2] for item in lst]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, ["Rash", 21]], [2, ["Varsha", 20]], [3, ["Kil", 19]]]]]}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(num):\n    primes = [2]\n    i = 3\n    while i <= num:\n        for j in primes:\n            if i % j == 0:\n                break\n            if j > i**0.5:\n                primes.append(i)\n                break\n        i += 2\n    return len(primes)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[true]]}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        for p in primes:\n            if i % p == 0:\n                break\n            if p * p > i:\n                primes.append(i)\n                break\n        i += 2\n    return primes[-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"Write a function to calculate a dog's age in dog's years.\"\"\"\n    return human_age * 7", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[100]]}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side):\n    return 4*side**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple([x/y for x, y in zip(tuple1, tuple2)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    return sum([i**2 for i in range(1, 2*n, 2)][:n])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000.0]]}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "def volume_cylinder(radius, height):\n    return (radius**2) * math.pi * height", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 5]], "plus_fail_tests": [[20000000000.0, 3000000000000.0]]}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients to 0\n    even_binomial_coeff_sum = 0\n\n    # Iterate from 0 to n-1\n    for i in range(0, n):\n\n        # Check if the current index is even\n        if i % 2 == 0:\n\n            # Calculate the current binomial coefficient\n            current_binomial_coeff = 1\n\n            # Iterate from 1 to i+1\n            for j in range(1, i+2):\n\n                # Check if the current index is even\n                if j % 2 == 0:\n\n                    # Multiply the current binomial coefficient by the current index\n                    current_binomial_coeff *= j\n\n            # Add the current binomial coefficient to the sum of even index binomial coefficients\n            even_binomial_coeff_sum += current_binomial_coeff\n\n    # Return the sum of even index binomial coefficients\n    return even_binomial_coeff_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[10]]}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if type(i) == tuple:\n            continue\n        count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, [4, 6], 10]]], "plus_fail_tests": [[[1, 2, 3, [4, 5], 6, 7]]]}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num = str(num)\n    for i in num:\n        if int(i) > int(num.count(i)):\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1234]], "plus_fail_tests": [[9]]}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(l1, l2):\n    return [x - y for x, y in zip(l1, l2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Returns the nth decagonal number.\n    \"\"\"\n    decagonal_numbers = [i * (5 * i - 3) // 2 for i in range(1, 1001)]\n    return decagonal_numbers[n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    return text.count('b') in (2, 3) and 'a' in text and text.count('b') > text.count('a') if 'b' in text else False", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["abbbba"]], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, m):\n    # Initialize variables\n    n = len(arr)\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate over the array\n    for i in range(n * k):\n        # If the current index is less than the length of the array\n        if i < n:\n            # Add the current element to the current sum\n            curr_sum += arr[i]\n        # If the current index is greater than or equal to the length of the array\n        else:\n            # If the current index is less than the length of the array multiplied by k\n            if i < n * k:\n                # Add the current element to the current sum\n                curr_sum += arr[i % n]\n            # If the current index is greater than or equal to the length of the array multiplied by k\n            else:\n                # Set the current sum to 0\n                curr_sum = 0\n\n        # If the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            # Update the maximum sum\n            max_sum = curr_sum\n\n    # Return the maximum sum\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 10, 20], 3, 2]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    max_len = 0\n    max_lst = []\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_lst = i\n        elif len(i) == max_len:\n            max_lst = [x for x in i if x not in max_lst]\n            max_lst.extend([x for x in i if x in max_lst])\n            max_lst = list(dict.fromkeys(max_lst))\n    return (max_len, max_lst)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 3, 5, 7, 9, 11], [2, 4, 6], [10, 12, 14, 16, 18, 20], [13, 15, 17, 19, 21]]]]}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    return 2**(n-1) + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[4]]}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    return max(map(lambda x: int(x) if type(x) == str and x.isdigit() else x, lst)) if type(lst) == list else print(\"Please provide a list as input\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[[1, "2", true, 3.14, ["a", "b"], [5, 6, 7], {"8": "eight", "9": "nine"}, "Python", 10, 11, 12]]]}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    d = {}\n    for name, score in lst:\n        if name in d:\n            d[name] += score\n        else:\n            d[name] = score\n    return max(d.items(), key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flattened_list.extend(element)\n        else:\n            flattened_list.append(element)\n    return flattened_list", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]]]}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "def otherside_rightangle(a, b):\n    return (a**2 + b**2)**0.5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    list1 = [int(x) for x in list1]\n    list2 = [int(x) for x in list2]\n    result = []\n    for i in range(n):\n        a = list1[i] * list2[-(i+1)]\n        result.append(a)\n    result.sort(reverse=True)\n    return result[:n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], "plus_fail_tests": [[[61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], true]]}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    return [word.split()[0] for word in words if word.split()[0].startswith('p')]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python PHP", "Java JavaScript", "c c++"]]], "plus_fail_tests": [[["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]]]}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    depth = 0\n    while any(type(i) == dict for i in list(d.values())): \n        d = {k: v for dk, dv in d.items() for k, v in dv.items() if type(v) == dict}\n        depth += 1\n    return depth + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"a": 1, "b": {"c": {"d": {}}}}]], "plus_fail_tests": [[{"a": 1, "b": {"c": {"d": {"e": {"f": {}}}}}}]]}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, i, k, n):\n    max_sum = 0\n    for j in range(i+1):\n        if arr[j] <= arr[i]:\n            max_sum = max(max_sum, arr[j])\n    for j in range(i+1, k):\n        max_sum = max(max_sum, arr[j])\n    return max_sum + arr[k-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], "plus_fail_tests": [[[5, 2, 4, 1, 3, 6], 6, 1, 3]]}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(s):\n    return tuple([char for char in s])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    return max(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    return n | (n - 1) ^ ~(-1 << n.bit_length())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[98765]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    return (1/3) * (math.pi * radius**2) * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    def f(n):\n        if n <= 5:\n            return n\n        if n <= 10:\n            return 10\n        if n <= 15:\n            return 15\n        if n <= 20:\n            return 20\n        if n <= 25:\n            return 25\n        if n <= 30:\n            return 30\n        if n <= 35:\n            return 35\n        if n <= 40:\n            return 40\n        if n <= 45:\n            return 45\n        if n <= 50:\n            return 50\n        if n <= 55:\n            return 55\n        if n <= 60:\n            return 60\n        if n <= 65:\n            return 65\n        if n <= 70:\n            return 70\n        if n <= 75:\n            return 75\n        if n <= 80:\n            return 80\n        if n <= 85:\n            return 85\n        if n <= 90:\n            return 90\n        if n <= 95:\n            return 95\n        if n <= 100:\n            return 100\n        if n <= 105:\n            return 105\n        if n <= 110:\n            return 110\n        if n <= 115:\n            return 115\n        if n <= 120:\n            return 120\n        if n <= 125:\n            return 125\n        if n <= 130:\n            return 130\n        if n <= 135:\n            return 135\n        if n <= 140:\n            return 140\n        if n <= 145:\n            return 145\n        if n <= 150:\n            return 150\n        if n <= 155:\n            return 155\n        if n <= 160:\n            return 160\n        if n <= 165:\n            return 165\n        if n <= 170:\n            return 170\n        if n <= 175:\n            return 175\n        if n <= 180:\n            return 180\n        if n <= 185:\n            return 185\n        if n <= 190:\n            return 190\n        if n <= 195:\n            return 195\n        if n <= 200:\n            return 200\n        if n <= 205:\n            return 205\n        if n <= 210:\n            return 210\n        if n <= 215:\n            return 215\n        if n <= 220:\n            return 220\n        if n <= 225:\n            return 225\n        if n <= 230:\n            return 230\n        if n <= 235:\n            return 235\n        if n <= 240:\n            return 240\n        if n <= 245:\n            return 245\n        if n <= 250:\n            return 250\n        if n <= 255:\n            return 255\n        if n <= 260:\n            return 260\n        if n <= 265:\n            return 265\n        if n <= 270:\n            return 270\n        if n <= 275:\n            return 275\n        if n <= 280:\n            return 280\n        if n <= 285:\n            return 285\n        if n <= 290:\n            return 290\n        if n <= 295:\n            return 295\n        if n <= 300:\n            return 300\n        if n <= 305:\n            return 305\n        if n <= 310:\n            return 310\n        if n <= 315:\n            return 315", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[60]], "plus_fail_tests": [[100]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[15]]}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    return [{key1: {key2: value2}} for key1, key2, value2 in zip(list1, list2, list3)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(i) for i in map(str, lst)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    numbers = sorted([a, b, c])\n    return numbers[1] if len(numbers) % 2 == 1 else (numbers[1] + numbers[2]) / 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(lst):\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    return min(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    return sum(int(digit) for num in lst for digit in str(num))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[-10, 15, 0, -5, 2]]]}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    return min([a*b for a, b in lst])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    return min([x for x in lst if type(x) == int])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    if num % 2 != 0:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    for i in seq1:\n        for j in seq2:\n            if i == j:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [x[0] for x in lst]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Greyson Fulton", 98, 99], ["Brady Kent", 97, 96], ["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98]], 2]], "plus_fail_tests": [[[["John Doe", 78, 90, 82], ["Jane Smith", 92, 87, 84], ["Mark Johnson", 79, 85, 91], ["Emily Brown", 88, 91, 89]], 1]]}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(lst):\n    return int(sum(map(round, lst))) * len(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max1, max2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 7, 0, 8, 4]]], "plus_fail_tests": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    def star_num(k):\n        return sum(range(1, k + 1))\n\n    def star_num_sum(n):\n        return sum([star_num(i) for i in range(1, n + 1)])\n\n    return star_num_sum(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    return sum([i**3 for i in range(2*n,0,-2)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup):\n    return '-'.join(map(str, tup))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(lst):\n    return [i[-1] for i in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    return date.split('-')[2] + '-' + date.split('-')[1] + '-' + date.split('-')[0]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [x for x in numbers if x % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    def gap_insertion_sort(arr, gap):\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n\n    gap = len(arr) // 2\n    while gap > 0:\n        gap_insertion_sort(arr, gap)\n        gap = gap // 2\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    return sum([i**2 for i in range(2, 2*n+2, 2)])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    return (a + b + c) / 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[15, 25, 35]], "plus_fail_tests": [[2.3, 4.7, 3.9]]}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    return num <= max(arr)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], 4]], "plus_fail_tests": [[[], 10]]}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    return -a / 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 8, 4]]}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_Digit(num):\n    return int(str(num)[len(str(num))-1])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [x for x in lst if x < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(nums):\n    return int(\"\".join([str(num) for num in nums]))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return ''.join([c for i, c in enumerate(s) if i % 2 == 0])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python"]], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6*size**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(tup1, tup2):\n    return tuple([tuple(i*j for i, j in zip(x, y)) for x, y in zip(tup1, tup2)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_list, list_to_count):\n    count = 0\n    for i in tuple_list:\n        if i in list_to_count:\n            count += tuple_list.count(i)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "a", "c", "b", "d"], ["a", "b"]]], "plus_fail_tests": [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 2, 2, 3, 3]]]}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num**3 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    perrin_numbers = [3, 0, 2]\n    for i in range(3, n * 3):\n        perrin_numbers.append((perrin_numbers[i - 2] + perrin_numbers[i - 3]) % 1000000007)\n    return sum(perrin_numbers[:n])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [i for i in lst if len(i) == size]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(s):\n    return ''.join(s.split())", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\t"]]}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return any(word.lower().startswith('z') for word in text.split())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["pythonz."]], "plus_fail_tests": [["*z@"]]}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number == 2:\n        return False\n    else:\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[6]], "plus_fail_tests": [[11]]}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [i[::-1] for i in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    return min(lst, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join([c for c in s if not c.isupper()])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [x[0] for x in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(nums):\n    max_product = 0\n    current_product = 1\n    for num in nums:\n        current_product *= num\n        if current_product == 0:\n            current_product = 1\n        if current_product > max_product:\n            max_product = current_product\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[-3, -100, -4, -5, -150, -6]]]}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        curr = arr[i]\n        if curr < 0:\n            max_so_far = max(curr, max_so_far * curr)\n            min_so_far = min(curr, min_so_far * curr)\n        else:\n            max_so_far = max(curr, max_so_far * curr)\n            min_so_far = min(curr, min_so_far * curr)\n\n        result = max(result, max_so_far)\n\n        if min_so_far > 0:\n            min_so_far = min(curr, min_so_far * curr)\n        else:\n            min_so_far = min(curr, min_so_far * curr)\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, -2, -3, 0, 7, -8, -2]]], "plus_fail_tests": [[[-2, 4, -6, 8, 10, -12, 14, -16]]]}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple(x + y for x, y in zip(tup[:-1], tup[1:])) + (tup[-1],)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, 8, 10]]], "plus_fail_tests": [[[1, 2, -3, 4, 5]]]}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1] + 1:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr,n):\n    prod = 1\n    for i in arr:\n        prod = (prod*i)%n\n    return prod", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuples_list: list) -> set:\n    \"\"\"\n    Function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuples_list (list): List of tuples.\n\n    Returns:\n        set: Set of tuples that are common in all the tuples in the list.\n    \"\"\"\n    # Create an empty set to store the common tuples\n    common_tuples = set()\n\n    # Get the first tuple from the list\n    first_tuple = tuples_list[0]\n\n    # Iterate through the list of tuples\n    for tuple_ in tuples_list:\n        # Check if the first tuple is a subset of the current tuple\n        if first_tuple.issubset(tuple_):\n            # Add the current tuple to the common tuples set\n            common_tuples.add(tuple_)\n\n        # Check if the current tuple is a subset of the first tuple\n        elif tuple_.issubset(first_tuple):\n            # Add the first tuple to the common tuples set\n            common_tuples.add(first_tuple)\n\n        # If the first tuple and the current tuple are not subsets of each other\n        else:\n            # Create an empty set to store the common elements\n            common_elements = set()\n\n            # Iterate through the first tuple\n            for element in first_tuple:\n                # Check if the element is present in the current tuple\n                if element in tuple_:\n                    # Add the element to the common elements set\n                    common_elements.add(element)\n\n            # Convert the common elements set to a tuple\n            common_tuple = tuple(common_elements)\n\n            # Add the common tuple to the common tuples set\n            common_tuples.add(common_tuple)\n\n    # Return the common tuples set\n    return common_tuples", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [7, 8, 9], [10, 11, 12]]]]}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(s, old, new):\n    return s.replace(old, new)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    return s.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join([i for i in s if not i.islower()])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_naturals = (n*(n+1))//2\n    return sum_of_cubes - (sum_of_naturals**2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_Digit(num):\n    return int(str(num)[0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, k):\n    max_sum = 0\n    window_start = 0\n    window_sum = 0\n    for window_end in range(len(arr)):\n        window_sum += arr[window_end]  # add the next element\n        # slide the window, we don't need to track the first element anymore\n        if window_end >= k - 1:\n            max_sum = max(max_sum, window_sum)\n            window_sum -= arr[window_start]\n            window_start += 1  # slide the window\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-2, -3, 4, -1, -2, 1, 5, -3], 8]], "plus_fail_tests": [[[-100, -50, -30, -20, -10, 5, -3, -2, -1], 9]]}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if((arr[i] | arr[j]) % 2 != 0):\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4, 7, 2, 1], 5]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    num1 = str(num1)\n    num2 = str(num2)\n    if len(num1) > len(num2):\n        num2 = '0' * (len(num1) - len(num2)) + num2\n    elif len(num2) > len(num1):\n        num1 = '0' * (len(num2) - len(num1)) + num1\n    return sum(int(a) - int(b) for a, b in zip(num1, num2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2]], "plus_fail_tests": [[123456789, 987654321]]}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.upper() if s.islower() else s.lower()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Python"]], "plus_fail_tests": [["uSB"]]}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    return sorted(list(set(tup1) | set(tup2)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4, 5, 6], [5, 7, 4, 10]]], "plus_fail_tests": [[[1, 1, 2, 3, 4], [2, 3, 3, 4, 5]]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    max_len = 0\n    for i in lst:\n        max_len = max(max_len, len(i))\n    return max_len", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "def extract_values(s):\n    return [x.strip('\\\"') for x in s.strip('\\\"').split(',')]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["\"Python\", \"PHP\", \"Java\""]], "plus_fail_tests": [["This is a test input."]]}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split(s):\n    return [char for char in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    return len(lst) * (n - 1) // 2 - sum([i * (n - i - 1) // 2 for i in set(lst)])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    return sum([int(i) for i in str(n) if i.isdigit()]) if n else 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def issort_list(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{},]*n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    unique = []\n    for i in lst:\n        if i not in unique:\n            unique.append(i)\n    return int(reduce(lambda x, y: x * y, unique))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 20, 30, 40, 20, 50, 60, 40]]], "plus_fail_tests": [[[1000000, 2000000, 3000000, 2000000, 4000000, 5000000]]]}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr1, arr2):\n    for i in arr1:\n        if i not in arr2:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n    for num in nums:\n        if nums.count(num) > 1 and num in unique_nums == False:\n            for i in range(nums.count(num)-1):\n                unique_nums.remove(num)\n    return unique_nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [*list1, *list2, *list3]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]]], "plus_fail_tests": [[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [100, 200, 300, 400, 500]]]}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact % 10", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2.5]]}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            result.append(tuple([x for x in element if x % 2 == 0]))\n        elif element % 2 == 0:\n            result.append(element)\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 5, [7, 6, [2, 4]], 6, 8]]], "plus_fail_tests": [[[1, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]]]}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    \"\"\"\n    This function calculates the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the slant height of the pyramid\n    slant_height = (base_edge**2 + height**2)**0.5\n\n    # Calculate the surface area of the pyramid\n    surface_area = (base_edge**2 + (base_edge * slant_height) * 2) + (base_edge * height * 2)\n\n    return int(surface_area)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[10, 20]]}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(t1, t2):\n    return tuple(x for x in t1 if x not in t2) + tuple(x for x in t2 if x not in t1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    return sorted(dataset, key=lambda x: x['price'], reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(Arr, n):\n    return Arr[n:] + Arr[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    def catalan(n):\n        def catalan_iter(n, k):\n            if k == 0 or k == n:\n                return 1\n            return catalan_iter(n-1, k-1) + catalan_iter(n-1, k) * k\n\n        return catalan_iter(2*n-2, n)\n\n    return catalan(n) // (n+1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1]]}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    def combinations(lst, n=0, res=[], res_list=[]):\n        if n == len(lst):\n            res_list.append(res[:])\n            return res_list\n        for i in range(n, len(lst)):\n            res.append(lst[i])\n            res_list = combinations(lst, n + 1, res, res_list)\n            res = res[:len(res) - 1]\n        return res_list\n    return combinations(lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    return [i**2 for i in range(int(start**0.5)+1, int(end**0.5)+1) for _ in range(2) if i**2 >= start and i**2 <= end]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 30]], "plus_fail_tests": [[-10, -1]]}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    sum = 0\n    for i in range(1, n+1):\n        prod = 1\n        for j in range(i):\n            prod *= (j+1)\n        sum += prod\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    return ip.replace('.','').split()\n    for i in range(len(ip.split('.'))):\n        if ip.split('.')[i][0]=='0':\n            ip=ip.replace(ip.split('.')[i],'')\n            ip='.'.join(ip.split('.')[:i])+'.'.join(ip.split('.')[i+1:])\n    return ip.replace('.','')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["216.08.094.196"]], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "def polar_rect(r, theta):\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return (x, y), (x, -1j * y)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    return [lst[-1]] + lst[1:-1] + [lst[0]]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even = next((x for x in lst if x % 2 == 0), None)\n    odd = next((x for x in lst if x % 2 != 0), None)\n    return even - odd if even and odd else None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    return n % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    seen = {}\n    for char in s:\n        if char in seen:\n            return char\n        else:\n            seen[char] = True\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "def tuple_size(tup):\n    return sys.getsizeof(tup)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["A", 1, "B", 2, "C", 3]]], "plus_fail_tests": [[[[1, "Raju"], [2, "Nikhil"], [3, "Deepanshu"]]]]}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if k == 1:\n            return min(arr1[i - 1 if i > 0 else None], arr2[j - 1 if j > 0 else None])\n        if k == len(arr1) + len(arr2):\n            return max(arr1[-1], arr2[-1])\n        if k <= len(arr1):\n            if arr1[i] < arr2[j]:\n                k -= 1\n                i += 1\n            else:\n                k -= 1\n                j += 1\n        else:\n            k -= len(arr1) + 1\n            j += 1\n    if k <= len(arr1):\n        return arr1[k - 1]\n    return arr2[k - len(arr1) - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5]], "plus_fail_tests": [[[1, 2, 3], [true, true, false], 3]]}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum = int(n * (n + 1) / 2)\n    average = sum / n\n    return sum, average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    num = str(num)\n    length = len(num)\n    sum = 0\n    for i in num:\n        sum += int(i) ** length\n    return int(num) == sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    return [t for t in (tuple(i) for i in ([colors]*n) for n in range(1, len(colors)+1) for i in itertools.product(colors, repeat=n))]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 1]], "plus_fail_tests": [[[], 0]]}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "def radian_degree(deg):\n    import math\n    return deg * (math.pi / 180)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a = [1, 1, 2]\n        for i in range(3, n + 1):\n            a.append(sum([a[j] for j in range(i)]))\n        return a[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k:] if k > 0 else lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 1]]}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "def find_literals(string, pattern):\n    import re\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return (None, None, None)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max([row[n-1] for row in matrix])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2]], "plus_fail_tests": [[[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2]]}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(map(lambda x: x[0], lst)) + [x[0] for x in lst], list(map(lambda x: x[1], lst)) + [x[1] for x in lst]]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["x", "y"], ["a", "b"], ["m", "n"]]]], "plus_fail_tests": [[[["x", 1], ["y", 2], [true, "z"]]]]}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tup_list):\n    result = 0\n    for tup in tup_list:\n        for item in tup:\n            result += item\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(i) / len(i) for i in map(lambda x: x, tuples)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]], "plus_fail_tests": [[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]]]}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    nums = ''\n    for c in s:\n        if c.isdigit():\n            nums += c\n        else:\n            if nums:\n                s += nums\n                nums = ''\n            s += c\n    return s", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["I1love143you55three3000thousand"]], "plus_fail_tests": [["Hello! My age is 28. I was born on the 1st of January, 1992."]]}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = list1 + list2\n    merged_list.sort()\n    if size % 2 == 0:\n        return (merged_list[int(size / 2) - 1] + merged_list[int(size / 2)]) / 2\n    else:\n        return merged_list[int(size / 2)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], "plus_fail_tests": [[[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10]]}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def lcms(nums):\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = lcm(res, nums[i])\n        return res\n\n    def factors(n):\n        factors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                factors.append(i)\n                if n // i != i:\n                    factors.append(n // i)\n        return sorted(factors)\n\n    def divisors(n):\n        divisors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if n // i != i:\n                    divisors.append(n // i)\n        return sorted(divisors)\n\n    def is_divisible(a, b):\n        return a % b == 0\n\n    def is_divisible_by_all(nums):\n        divisors = divisors(lcms(nums))\n        for num in nums:\n            if not all(is_divisible(num, divisor) for divisor in divisors):\n                return False\n        return True\n\n    def find_largest_subset(nums):\n        def find_largest_subset_helper(nums, start, end):\n            if end - start + 1 <= 1:\n                return [start]\n            if end - start + 1 == 2:\n                return [start, end]\n            largest_subset = []\n            for i in range(start, end + 1):\n                subset = [i]\n                for j in range(i + 1, end + 1):\n                    if is_divisible(nums[i], nums[j]) and is_divisible(nums[j], nums[i]):\n                        subset.append(j)\n                if len(subset) > len(largest_subset):\n                    largest_subset = subset\n            return largest_subset\n\n        def find_largest_subset_helper_recursive(nums, start, end):\n            if end - start + 1 <= 1:\n                return [start]\n            if end - start + 1 == 2:\n                return [start, end]\n            largest_subset = []\n            for i in range(start, end + 1):\n                subset = [i]\n                for j in range(i + 1, end + 1):\n                    if is_divisible(nums[i], nums[j]) and is_divisible(nums[j], nums[i]):\n                        subset.append(j)\n                if len(subset) > len(largest_subset):\n                    largest_subset = subset\n            return largest_subset\n\n        def find_largest_subset_helper_recursive_with_cache(nums, start, end, cache):\n            if end - start + 1 <= 1:\n                return [start]\n            if end - start + 1 == 2:\n                return [start, end]\n            if (start, end) in cache:\n                return cache[(start, end)]\n            largest_subset = []\n            for i in range(start, end + 1):\n                subset = [i]\n                for j in range(i + 1, end + 1):\n                    if is_divisible(nums[i], nums[j]) and is_divisible(nums[j], nums[i]):\n                        subset.append(j)\n                if len(subset) > len(largest_subset):\n                    largest_subset = subset\n            cache[(start, end)] = largest_subset\n            return largest_subset", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 6, 13, 17, 18]]], "plus_fail_tests": [[[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]]]}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(l1, l2):\n    return [x/y for x, y in zip(l1, l2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [i**n for i in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return 0.5 * radius**2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0.5]]}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def is_upper(s):\n    return s.upper()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    return s.replace(' ', '%20')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_')", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["The_Avengers"]], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(lst, k):\n    return sum([i ^ j for i in lst for j in lst if i != j]) if k == len(lst) else None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 9, 7, 6], 4]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    return [x for x in lst if x != 0] + [0]*lst.count(0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, cost):\n    return amount == cost", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    if velocity < 4:\n        return None\n    elif velocity >= 4 and velocity <= 120:\n        return int(35.74 + 0.6215 * temperature - 35.75 * (velocity ** 0.16) + 0.4275 * temperature * (velocity ** 0.16))\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[120, 35]], "plus_fail_tests": [[0, 0]]}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    def heapify(lst, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and lst[i] < lst[l]:\n            largest = l\n\n        if r < n and lst[largest] < lst[r]:\n            largest = r\n\n        if largest != i:\n            lst[i], lst[largest] = lst[largest], lst[i]\n\n            heapify(lst, n, largest)\n\n    n = len(lst)\n\n    for i in range(n, -1, -1):\n        heapify(lst, n, i)\n\n    for i in range(n - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    return text[1:-1].find('z') != -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    def nonagonal_number(i):\n        return int((i * (3 * i - 1)) / 2)\n\n    return nonagonal_number(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict_):\n    return tup + (dict_,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    def find_path(matrix, i, j, path, visited):\n        if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]) or (i, j) in visited or matrix[i][j] == -1:\n            return\n        path.append((i, j))\n        visited.add((i, j))\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return\n        if j + 1 < len(matrix[0]):\n            find_path(matrix, i, j + 1, path, visited)\n        if i + 1 < len(matrix):\n            find_path(matrix, i + 1, j, path, visited)\n\n    def find_max_avg(matrix):\n        max_avg = -1\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                path = []\n                visited = set()\n                find_path(matrix, i, j, path, visited)\n                if len(path) == 0:\n                    continue\n                total_cost = 0\n                for x, y in path:\n                    total_cost += matrix[x][y]\n                avg = total_cost / len(path)\n                if avg > max_avg:\n                    max_avg = avg\n        return max_avg\n\n    return find_max_avg(matrix)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, -1]]]]}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(students, height, weight):\n    return {k: v for k, v in students.items() if v[0] >= height and v[1] >= weight}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(tup):\n    return tuple(tup[i] * tup[i + 1] for i in range(len(tup) - 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    res = []\n    for i in lst:\n        if i not in res:\n            res.append(i)\n    return res", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]], "plus_fail_tests": [[["apple", "apple", "banana", "orange", "apple", "banana", "banana", "banana", "kiwi", "kiwi", "orange"]]]}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    return [i.strip('\"') for i in s.split('\"')[1::2] if i.strip('\"')]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Multiple nested quotation marks within single quotes: 'This is a \"nested \"and \"more nested\" quote\" within single quotes'"]]}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone(r,h):\n    import math\n    return math.pi*r*(r+h/ math.sqrt(r**2+h**2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 12]], "plus_fail_tests": [[2.5, 8.3]]}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    for i in range(len(arr)):\n        if arr[i] == num:\n            return i\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    def prod(x):\n        res = 1\n        for i in x:\n            res *= i\n        return res\n    return sum([prod(x) for x in [lst[i:j+1] for i in range(len(lst)) for j in range(i, len(lst))]])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    return ((n & 1) << 3) | ((n & 2) << 2) | ((n & 4) << 1) | ((n & 8) << 0) | ((n & 16) >> 1) | ((n & 32) >> 2) | ((n & 64) >> 3) | ((n & 128) >> 4)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[2147483647]]}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "def check_str(s):\n    return s[0].lower() in \"aeiou\"", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(lst, val):\n    for i in range(len(lst)):\n        if val <= lst[i]:\n            return i\n    return len(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "def area_tetrahedron(a):\n    return (a**3 * (3**0.5)) / (12)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    d = {}\n    for i in range(0, len(tup), 2):\n        if i + 1 < len(tup):\n            d[tup[i]] = tup[i + 1]\n    return d", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    return len(set(string)) <= 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for i in range(startnum, endnum + 1):\n        if all(int(digit) in range(1, i + 1) for digit in str(i)):\n            result.append(i)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any([True for x in tup if x is None])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    return s", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PythonProgrammingExamples"]], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i) for i in lst if not i.isdigit() and i.lstrip('-').isdigit()]\n    # return sorted([int(i) for i in lst if i.isdigit()]) + [int(i)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["4", "12", "45", "7", "0", "100", "200", "-12", "-500"]]], "plus_fail_tests": [[["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]]]}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[999999999989]]}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    return all(arr[i] >= arr[2 * i + 1] for i in range(len(arr) // 2)) and \\\n           all(arr[i] >= arr[2 * i + 2] for i in range(len(arr) // 2) if 2 * i + 2 < len(arr)) and \\\n           all(arr[i] >= arr[i * 2] for i in range(len(arr) // 2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(lst, k):\n    return sorted(lst, key=lambda x: x[1])[:k]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    return [x for x in l1 if x in l2 and x in l3]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12]]]}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    lst = sorted(lst)\n    return lst[1] if len(lst) > 1 else None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, -0.5, 0, 2, -2, -2]]], "plus_fail_tests": [[[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]]]}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n                break\n            elif lst[j] == lst[i][::-1]:\n                count += 1\n                break\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["ab", "ba", "cd", "dc", "ef", "fe", "gh", "hg", "ij", "ji", "fe"]]]}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    return {tuple(i) for i in lst}.copy()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]]], "plus_fail_tests": [[[]]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float(s)\n        return True if len(s.split('.')[1]) == 2 else False if '.' in s else True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 3, 19, 18, 25], 6]], "plus_fail_tests": [[[15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 25], 12]]}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    ctr = 0\n    for c in s:\n        if c.isdigit():\n            ctr += 1\n    return ctr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate_tuple):\n    x, y = coordinate_tuple\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2) if (i >= 0 and j >= 0) and (i <= x + 1 and j <= y + 1) and (i != x or j != y)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    if month_number in [4, 6, 9, 11]:\n        return True\n    elif month_number == 2:\n        return False\n    else:\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[1]]}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return list(zip(lst, lst[1:])) if len(lst) > 1 else []", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(lst, sum):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == sum:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return (list(list(set(li1) - set(li2)) + list(set(li2) - set(li1))))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    return sum([i**4 for i in range(1, 2*n+1, 2)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    # create a dictionary to store opening and closing brackets\n    brackets = {')': '(', ']': '[', '}': '{'}\n    # create a list to store opening brackets\n    open_brackets = []\n    # iterate through the expression\n    for char in expression:\n        # if the current character is an opening bracket, append it to the list\n        if char in brackets.values():\n            open_brackets.append(char)\n        # if the current character is a closing bracket, check if the list is empty or not\n        elif not open_brackets and char in brackets:\n            return False\n        # if the current character is a closing bracket, check if the corresponding opening bracket is present in the list\n        elif char in brackets and open_brackets[-1] == brackets[char]:\n            open_brackets.pop()\n        # if the current character is a closing bracket and the corresponding opening bracket is not present in the list, return False\n        elif char in brackets and open_brackets[-1] != brackets[char]:\n            return False\n    # if the list is empty after iterating through the entire expression, return True\n    return not open_brackets", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(s, k):\n    return ' '.join(word for word in s.split() if len(word) != k)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    if substring in string:\n        return substring, string.index(substring), string.index(substring)\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python programming, python language", "python"]], "plus_fail_tests": [["UPmVaKepPO", "UPmVaKepPO"]]}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(set(lst) - set([x for x in lst if lst.count(x) > 1]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 1, 1, 4, 5, 6]]], "plus_fail_tests": [[[-1, -2, -3, -1, -1, -4, -5, -6]]]}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    return all([i%2!=0 for i in lst[::2]])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 1, 4, 3, 6, 7, 6, 3]]], "plus_fail_tests": [[[2, 5, 4, 3, 6, 7, 8, 9]]]}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    return tuple(int(x) for x in tuple_str[1:-1].split(', '))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((7, 8, 9)"]]}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    res = []\n    curr = []\n    for i in lst:\n        if not curr or i != curr[-1]:\n            if curr:\n                res.append(curr)\n            curr = [i]\n        else:\n            curr.append(i)\n    res.append(curr)\n    return [list(x) for x in res]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            result.append((tuples_list[i][0] + tuples_list[j][0], tuples_list[i][1] + tuples_list[j][1]))\n            result.append((tuples_list[i][0] + tuples_list[j][1], tuples_list[i][1] + tuples_list[j][0]))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[100, 200], [300, 400], [500, 600], [700, 800]]]]}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)+1):\n            if j-i%2 == 1:\n                sum += sum(arr[i:j])\n    return sum\ndef sum(arr):\n    return sum(arr) if type(arr) == list else arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4]]], "plus_fail_tests": [[[4, 3, 2, 1, 9, 10, 7]]]}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2 != 0]\n    if len(even) == 0:\n        return 0\n    elif len(odd) == 0:\n        return even[0]\n    else:\n        return even[0] * odd[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def polite_number(i):\n        return sum(range(1, i + 1))\n\n    def nth_polite_number(n):\n        i = 1\n        while n > polite_number(i):\n            i += 1\n        return i\n\n    return nth_polite_number(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(str_list, str):\n    return tuple(str_list + [str])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(lst, val):\n    for i in range(len(lst)):\n        if val <= lst[i]:\n            return i\n    return len(lst)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7]]}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, [4, 6], 10]]], "plus_fail_tests": [[[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3]], 4]]]}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    return all([i%2==0 for i in lst[::2]])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = 0\n    for i in range(power):\n        result += sum([int(x) for x in str(base * (10 ** i) // (10 ** (i % (i + 1))))])\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 100]], "plus_fail_tests": [[1, 1000000]]}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "def text_starta_endb(s):\n    return s.startswith(\"a\") and s.endswith(\"b\")", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return (n << d) & 0xffffffff if n < 0 else (n << d)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(d):\n    return sum(d.values())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if a == c:\n        count += 1\n    if b == c:\n        count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Returns True if the given number is a perfect square, otherwise False.\n    \"\"\"\n    # Check if the number is a perfect square\n    root = num ** 0.5\n    if root % 1 == 0:\n        return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-9]]}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    return max(lst, key=sum)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for c in s:\n        if c.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(s):\n    return ''.join(s.split())", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["python\nprogram"]]}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(lst):\n    for num in lst:\n        if num % 2 != 0:\n            return num\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    return all(x < y for x, y in zip(t1, t2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3], [2, 3, 4]]], "plus_fail_tests": [[[3, 7, 11, 15, 19], [2, 6, 10, 14, 18]]]}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    def triangular_number(k):\n        return int(k*(k+1)/2)\n\n    i = 1\n    while len(str(triangular_number(i))) < n:\n        i += 1\n    return i", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    return sum([x for x in range(l, r+1) if x % 2 != 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors) % 2 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}]}}