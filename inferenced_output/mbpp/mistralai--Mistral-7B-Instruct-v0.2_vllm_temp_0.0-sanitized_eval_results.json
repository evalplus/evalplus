{"date": "2024-08-09 20:34", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_prime(n):\n    \"\"\"\n    Function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_not_prime(n):\n    \"\"\"\n    Function to check if a number is not prime.\n    \"\"\"\n    return not is_prime(n)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Returns a set of elements that are common in both given lists.\n    \"\"\"\n    return set(list1) & set(list2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Returns the n largest integers from a given list of numbers, in descending order.\n    \"\"\"\n    return heapq.nlargest(n, numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(input_str):\n    \"\"\"\n    Find all words which are at least 4 characters long in a given string.\n    \"\"\"\n    words = input_str.split()\n    return set(word for word in words if len(word) >= 4)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    This function checks if two numbers differ at one bit position only.\n    \"\"\"\n    # XOR operation to find the bit difference between two numbers\n    bit_diff = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    count_bits = __builtin__.popcount(bit_diff)\n\n    # If the count of set bits is equal to 1, then the numbers differ at one bit position only\n    return count_bits == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[13, 9]], "plus_fail_tests": [[0, 0]]}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(str1):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    if len(str1) <= 1:\n        return 0\n\n    return len(str1) if str1 == str1[1:] + str1[0] else find_Rotations(str1[1:]) + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aaaa"]], "plus_fail_tests": [["aaaaaaaaaaaaaaaab"]]}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    Function to find squares of individual elements in a list.\n    \"\"\"\n    return [num ** 2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in matrix]\n\n    # Find the indices of the rows with the corresponding sums in the original matrix\n    indices = [i for i, _ in enumerate(matrix)]\n\n    # Sort the indices based on the sums and reorder the matrix accordingly\n    indices = sorted(indices, key=lambda x: row_sums[x])\n    sorted_matrix = [matrix[i] for i in indices]\n\n    return sorted_matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    return any(char.isalpha() and (char_next.isalpha() or char_next is None) for char, char_next in zip(text, text[1:]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aab_Abbbc"]], "plus_fail_tests": [["a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z"]]}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(length, base, height):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n\n    :param length: The length of the prism.\n    :param base: The width of the base of the triangular prism.\n    :param height: The height of the triangular prism.\n    :return: The volume of the triangular prism.\n    \"\"\"\n    # Calculate the volume of the triangular base\n    base_area = 0.5 * base * height\n\n    # Calculate the volume of the rectangular part\n    rectangular_volume = length * base_area\n\n    # Return the total volume\n    return rectangular_volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(clean_string, dirty_chars):\n    \"\"\"\n    Function to remove characters from the first string which are present in the second string.\n    :param clean_string: The string to be cleaned.\n    :param dirty_chars: A string containing the characters to be removed.\n    :return: A new string with removed characters.\n    \"\"\"\n    return ''.join(char for char in clean_string if char not in dirty_chars)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def reverse(num):\n    \"\"\"\n    Reverse the given number.\n    \"\"\"\n    return int(str(num)[::-1])\ndef check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num < 2 * reverse(num)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[23]], "plus_fail_tests": [[9]]}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Function to check if a given array of integers contains any duplicate elements.\n    \"\"\"\n    return len(arr) != len(set(arr))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Checks if the given two integers have opposite signs.\n\n    :param num1: The first integer.\n    :param num2: The second integer.\n    :return: A boolean value indicating if the integers have opposite signs.\n    \"\"\"\n    return num1 * num2 < 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a given list.\n\n    :param numbers: List of numbers\n    :return: The smallest number in the list\n    \"\"\"\n    return min(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(input_list):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n    \"\"\"\n    total = 0\n    for element in input_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Alias for is_difference_of_squares function.\n    \"\"\"\n    return is_difference_of_squares(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[991]]}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "from math import comb\ndef bell_number(n):\n    \"\"\"\n    Calculate the number of ways to partition a set of Bell numbers with n elements.\n    \"\"\"\n    return sum(comb(2 * i - 1, i) for i in range(min(n, 11)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0]]}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Function to count the number of positive numbers in a list.\n    \"\"\"\n    return len(list(filter(lambda x: x > 0, numbers)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns1, patterns2):\n    \"\"\"\n    Check if two given lists follow the same sequence pattern.\n    \"\"\"\n    if len(patterns1) != len(patterns2):\n        return False\n\n    return all(patterns1[i] == patterns2[i] or patterns1[i] is None and patterns2[i] is not None\n                 or patterns1[i] is not None and patterns2[i] is None\n                 for i in range(len(patterns1)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "green"], ["a", "b", "b"]]], "plus_fail_tests": [[["red", "green", "blue"], ["a", "b", "c"]]]}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    \"\"\"\n    Checks if sublist is a contiguous subsequence of main_list.\n    \"\"\"\n    if len(sublist) > len(main_list):\n        return False\n\n    for i in range(len(main_list) - len(sublist) + 1):\n        if all(sublist[j] == main_list[i+j] for j in range(len(sublist))):\n            return True\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    \"\"\"\n    Finds the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    return max(abs(x[0] - x[1]) for x in tuples)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Function to check if all given tuples have equal length.\n\n    :param tuples: A list of tuples\n    :return: A boolean value indicating if all tuples have equal length\n    \"\"\"\n    if not tuples:\n        return True\n\n    return all(map(len, tuples))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [4, 5, 6, 7]]]], "plus_fail_tests": [[[[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]]]}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check if the length of the given word is odd.\n\n    :param word: str - The word to check the length of.\n    :return: bool - True if the length is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Finds tuples from the given list that have all elements divisible by k.\n\n    :param tuples_list: List of tuples\n    :param k: Divisor\n    :return: List of tuples that have all elements divisible by k\n    \"\"\"\n    return [tuple(i for i in tpl if i % k == 0) for tpl in tuples_list if all(i % k == 0 for i in tpl)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula: T(n) = n * (n + 1) * (n + 2) / 4\n    \"\"\"\n    return int(n * (n + 1) * (n + 2) / 4)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[10]]}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere with the given radius.\n    \"\"\"\n    return (4.0/3.0) * math.pi * (radius**3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(string_list, substring):\n    \"\"\"\n    Check if a given substring is present in a list of strings.\n\n    :param list string_list: List of strings to search in.\n    :param str substring: Substring to find.\n    :return: True if substring is present in any string in the list, False otherwise.\n    \"\"\"\n    return any(substring in string for string in string_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in the given list of words.\n    \"\"\"\n    return max(len(word) for word in words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "import math\ndef centered_hexagonal_number(n):\n    side_length = 2 * (3 * math.sqrt(2) + 1) * (n - 1)\n    return int(side_length * (3 + math.sqrt(1 + 12 * math.sqrt(2))) / 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check if a number is undulating, i.e., each digit is the same as the preceding digit or the preceding digit is twice the current digit.\n    \"\"\"\n    if abs(int(str(num)[0]) - int(str(num)[1])) <= 1:\n        return True\n    for i in range(1, len(str(num))):\n        if abs(int(str(num)[i]) - int(str(num)[i-1])) > 2:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2121212121212122]]}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    current_num = n\n    closest = None\n    \n    # Iterate through numbers from n to 1\n    while current_num > 0:\n        if current_num < n:\n            closest = current_num\n            break\n        current_num -= 1\n    \n    # If no smaller number is found, return None\n    return closest", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(*args):\n    \"\"\"\n    Merges three dictionaries into a single one.\n    \"\"\"\n    result = {}\n    for dictionary in args:\n        result.update(dictionary)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(numbers):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the given list.\n    \"\"\"\n    return {num: numbers.count(num) for num in set(numbers)}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    \"\"\"\n    Given a list of tuples, returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return next((x[0] for x in tuples if x[1] == min(x[1] for x in tuples)), None)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    \"\"\"\n    Find the length of the smallest list in a given list of lists.\n    \"\"\"\n    return min(len(sublist) for sublist in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(base, exponent):\n    \"\"\"\n    Calculate the value of base raised to the power of exponent.\n    \"\"\"\n    return base ** exponent", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide the result by the length of the list.\n\n    :param numbers: A list of numbers\n    :return: The result of multiplying all the numbers in the list and dividing by the length\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def flatten_list(nested_list):\n    \"\"\"Flattens a nested list\"\"\"\n    return [item for sublist in nested_list for item in sublist]\ndef frequency_lists(nested_lists):\n    \"\"\"Returns a dictionary with frequency of each element in a flattened list of lists\"\"\"\n    flattened_list = flatten_list(nested_lists)\n    frequency = {}\n    for element in flattened_list:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def quickselect(arr, k):\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    if len(arr) < k:\n        raise ValueError(\"Array size is less than k\")\n\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        pivot_index = partition(arr, low, high)\n        if pivot_index == k - 1:\n            return arr[k - 1]\n        elif pivot_index < k - 1:\n            low = pivot_index + 1\n        else:\n            high = pivot_index - 1\ndef kth_element(arr, k):\n    return quickselect(arr, k)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12, 3, 5, 7, 19], 2]], "plus_fail_tests": [[[100, 99, 98, 97, 96], 5]]}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a given integer.\n    \"\"\"\n    if not is_palindrome(n):\n        return int(str(n)[::-1][::-1] + str(int(str(n)[::-1]) + 1))\n    else:\n        while True:\n            n += 1\n            if is_palindrome(n):\n                continue\n            else:\n                return n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[99]], "plus_fail_tests": [[0]]}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    return bin(n)[2:] if n else '0'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuple as a new tuple.\n    \"\"\"\n    return tuple(tpl + lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 6, 7], [9, 10]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n    \"\"\"\n    if n % 2 == 0 or m % 2 == 1:\n        return -1\n\n    if n < 2 or m < 0:\n        return 0\n\n    a = [0] * (n + 1)\n    a[0] = 1\n\n    for i in range(1, (n + 1) // 2):\n        a[i] = a[i - 1] * (n - i) // (i + 1)\n\n    if m > n // 2:\n        return a[-m - 1] if m % 2 == 0 else 0\n\n    return a[m]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count(boolean_list):\n    \"\"\"\n    Function to count the number of True booleans in the given list.\n    \"\"\"\n    return sum(boolean_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(n):\n    \"\"\"\n    Function to check if a given string represents an integer or not.\n    \"\"\"\n    try:\n        int(n)\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def count_odd_equivalents(binary_string, rotation_count):\n    \"\"\"\n    This function calculates the number of odd-equivalent binary strings obtained by rotating the given binary string 'binary_string' by 'rotation_count' times.\n    \"\"\"\n    binary_string = binary_string.zfill(len(binary_string) + rotation_count)\n    count = 0\n\n    for i in range(len(binary_string)):\n        if int(binary_string[i] + binary_string[i+1:], 2) % 2 != 0:\n            count += 1\n\n    return count\ndef odd_Equivalent(binary_string, rotation_count):\n    \"\"\"\n    This is the function to be tested in the assert statement.\n    \"\"\"\n    return count_odd_equivalents(binary_string, rotation_count)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["011001", 6]], "plus_fail_tests": [["1100110011", 5]]}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Find the first list and convert it to a set\n    set_first_list = set(nested_lists[0]) if nested_lists else set()\n    \n    # Iterate through the remaining lists and find their intersection with the first list\n    for list_ in nested_lists[1:]:\n        set_intersection = set_intersection(set_first_list, set(list_))\n        set_first_list = set_intersection\n\n    # Return the final set of common elements\n    return set_first_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]]], "plus_fail_tests": [[[[], [], []]]]}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    \"\"\"\n    Convert a given string into a list of strings split on space character.\n    \"\"\"\n    return input_string.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(num_tuple):\n    \"\"\"\n    Converts a given tuple of positive integers into a single integer.\n    \"\"\"\n    return int(''.join(map(str, num_tuple)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    return max(abs(x[0] * x[1]) for x in tuples)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    prefix_sum_zeros = 0\n    prefix_sum_ones = 0\n    start = 0\n\n    while True:\n        length = len(binary_string)\n        if start + length > len(binary_string):\n            break\n\n        current_string = binary_string[start:start + length]\n        count_zeros = sum(int(bit) for bit in current_string if bit == '0')\n        count_ones = sum(int(bit) for bit in current_string if bit == '1')\n        diff = abs(count_zeros - count_ones)\n        max_diff = max(max_diff, diff)\n\n        prefix_sum_zeros += count_zeros\n        prefix_sum_ones += count_ones\n        start += length + 1\n\n    # Handle the case of empty or all-zeros string\n    if prefix_sum_zeros == 0 or prefix_sum_ones == 0:\n        return max_diff\n\n    return max(max_diff, abs(prefix_sum_zeros - prefix_sum_ones))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["11000010001"]], "plus_fail_tests": [["0000001110000001111111"]]}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def is_amicable(n):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    divisors_sum = sum(x for x in range(1, int(1 + (1 / 0.5)**0.5) + 1) if n % x == 0)\n    return n == sum(1 for x in range(1, int(divisors_sum ** 0.5) + 1) if divisors_sum % x == 0)\ndef amicable_numbers_sum(up_to):\n    \"\"\"\n    Sum all amicable numbers up to a specified number.\n    \"\"\"\n    amicable_numbers = [x for x in range(1, up_to + 1) if is_amicable(x)]\n    return sum(amicable_numbers)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[999]], "plus_fail_tests": [[10000]]}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import cmath\nimport math\ndef angle_complex(z):\n    \"\"\"\n    Calculates the angle (in radians) of a complex number.\n    \"\"\"\n    angle = cmath.phase(z)\n    return angle", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Function to find words longer than n characters from a given list of words.\n\n    :param int n: Minimum length of words to be returned.\n    :param str words: A string containing a list of words separated by spaces.\n    :return: List of words longer than n characters.\n    \"\"\"\n    words_list = words.split()\n    return [word for word in words_list if len(word) > n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(x, y):\n    \"\"\"\n    Function to multiply two integers.\n    \"\"\"\n    return x * y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \"\"\"\n    return (3 * (2 * n) ** 2) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "from collections import Counter\ndef max_occurrences(numbers):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n    \"\"\"\n    counter = Counter(numbers)\n    max_frequency = max(counter.values())\n    return counter.most_common(1)[0][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    :param numbers: List of numbers\n    :return: Sum of negative numbers in the list\n    \"\"\"\n    return sum([num for num in numbers if num < 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    i, j = 0, len(s) - 1\n\n    while i < j:\n        if s[i] in vowels:\n            s = s[:i] + s[j] + s[i+1:j] + s[i] + s[i+1:j+1]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n\n    return s", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Python"]], "plus_fail_tests": [["pzpAwF"]]}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tuple_input):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    return ''.join(tuple_input)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import numpy as np\ndef zero_count(arr):\n    \"\"\"\n    Function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = len(np.where(arr == 0)[0])\n    non_zero_count = len(arr) - zero_count\n    ratio = zero_count / non_zero_count\n    return ratio", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if the given number can be represented as a sum of non-zero powers of 2.\n    \"\"\"\n    # Bit manipulation approach\n    # We can represent a number as a sum of powers of 2 if its binary representation has no 1's in the odd positions\n    return all(not bin(i)[1] for i in (1 << i for i in range(32) if n >= (1 << i)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[-14]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle with the given radius.\n    \"\"\"\n    circumference = 2 * math.pi * radius\n    return circumference", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Function to count number of identical items in the same position in three given lists.\n    \"\"\"\n    return sum(1 for i in range(len(list1)) if list1[i] == list2[i] and list1[i] == list3[i])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    \"\"\"\n    Function to sort a list using the pancake sorting algorithm.\n    \"\"\"\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        pos = arr.index(max(arr[0:i+1]) + 1)\n        arr[pos], arr[i] = arr[i], arr[pos]\n        arr[0:i+1] = reversed(arr[0:i+1])\n    return arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 79, 25, 38, 69]]], "plus_fail_tests": [[[54, 28, 91, 12, 78, 37, 66, 42, 84, 59]]]}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Finds the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array should have at least two elements.\")\n\n    return max(abs(x - y) for x in arr for y in arr if x != y)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1]]]}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of a and b using Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\ndef find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple of integers x and y that satisfy the equation ax + by = n,\n    or returns None if no solution exists.\n    \"\"\"\n    gcd = find_gcd(abs(a), abs(b))\n    if gcd > 1:\n        x, y = (abs(a) // gcd, abs(b) // gcd) if a > 0 else (-abs(a) // gcd, -abs(b) // gcd)\n        return x, y, n // (a * x + b * y)\n    if n % a:\n        return None\n    x = n // a\n    return x, n % b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 3, 7]], "plus_fail_tests": [[100, 50, 4000]]}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(nested_list):\n    \"\"\"\n    Extracts all elements from nested lists and returns a set of unique numbers.\n    \"\"\"\n    return set(sum(sublist, []) for sublist in nested_list)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 4, 5], [4, 5, 7], [1, 4]]]], "plus_fail_tests": [[[[]]]]}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(list_to_filter, elements_to_remove):\n    \"\"\"\n    Function to remove all elements from a given list present in another list.\n    \"\"\"\n    return list(set(list_to_filter) - set(elements_to_remove))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], [2, 4, 6, 8]]]}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(numbers):\n    \"\"\"\n    Finds the number of pairs of integers in a list that xor to an even number.\n\n    :param numbers: A list of integers\n    :return: An integer representing the number of pairs of integers in the list that xor to an even number\n    \"\"\"\n    count = 0\n    for num1 in numbers:\n        for num2 in numbers:\n            if num1 != num2 and (num1 ^ num2) % 2 == 0:\n                count += 1\n                break\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4, 7, 2, 1]]], "plus_fail_tests": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]]]}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(numbers, start_index, end_index):\n    \"\"\"\n    Function to find the sum of numbers in a list within a range specified by two indices.\n\n    :param numbers: List of numbers\n    :param start_index: Index of the first number to include in the sum\n    :param end_index: Index of the last number to include in the sum\n    :return: Sum of numbers within the specified range\n    \"\"\"\n    if start_index < 0 or end_index > len(numbers) or start_index >= end_index:\n        raise IndexError(\"Invalid indices\")\n\n    return sum(numbers[start_index:end_index+1])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 5, 5]]}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "import itertools\ndef next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n > 0:\n        power = int(n & (n - 1)) ^ -1\n        return 2 ** (next(i for i in itertools.count(0) if 2 ** i >= n))\n    else:\n        return 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    string_list = list(string)\n    count = 0\n    for i in range(len(string)):\n        if i < len(alphabet):\n            count += string_list.count(alphabet[i])\n        elif string_list.count(string_list[i]) > 1:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["xbcefg"]], "plus_fail_tests": [["TheQuickBrownFoxJumpsOverTheLazyDog"]]}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2 * i)\n\n    return sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    return len(list(filter(lambda x: x == num, lst)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    return bin(n).count('1')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Returns True if the given element is the majority element in the given sorted array, False otherwise.\n    \"\"\"\n    left, right = 0, n - 1\n\n    # Binary search to find the index of the middle element\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If middle element is the majority element, return True\n        if arr[mid] == element and (mid < n // 2 or arr[mid] == arr[n - 1]):\n            return True\n\n        # If middle element is less than the majority element, update left\n        elif arr[mid] < element:\n            left = mid + 1\n\n        # If middle element is greater than the majority element, update right\n        else:\n            right = mid - 1\n\n    # If we reach here, the majority element is not in the array\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 4, 4, 4, 6, 6], 8, 4]], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(tuple_input):\n    \"\"\"\n    Function to check if all the elements in a given tuple have the same data type.\n\n    :param tuple_input: A tuple as input\n    :return: A boolean value indicating if all elements have the same data type or not\n    \"\"\"\n    if len(tuple_input) > 0:\n        first_element_type = type(tuple_input[0])\n        for element in tuple_input[1:]:\n            if type(element) != first_element_type:\n                return False\n        return True\n    else:\n        return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "import math\ndef perimeter_pentagon(sides_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of one side.\n    \"\"\"\n    side_length = float(sides_length)\n    perimeter = 5 * side_length + (5 * math.sqrt(5) / 2) * side_length\n    return perimeter", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[-10]]}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string: str) -> str:\n    \"\"\"\n    Function to remove characters with odd index values from a given string.\n\n    :param input_string: The input string.\n    :return: A new string with characters at odd index values removed.\n    \"\"\"\n    return ''.join(input_string[2 * i] for i in range(len(input_string) // 2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["lambs"]], "plus_fail_tests": [["ZZD"]]}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(x, y, z):\n    \"\"\"\n    Finds the minimum of three numbers.\n    \"\"\"\n    return min(x, y, z)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(input_str, char):\n    \"\"\"\n    Replaces all blank spaces in a given string with a specified character.\n\n    :param input_str: The input string.\n    :param char: The character to replace blank spaces with.\n    :return: The modified string.\n    \"\"\"\n    return input_str.replace(\" \", char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(numbers, n):\n    \"\"\"\n    Function that returns a list containing the n largest items from a given list.\n\n    :param numbers: List of numbers\n    :param n: Integer representing the number of largest items to return\n    :return: List of n largest items from the given list\n    \"\"\"\n    if len(numbers) < n:\n        return numbers\n\n    numbers.sort(reverse=True)\n    return numbers[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    :param side_length: The length of a side of the cube.\n    :type side_length: float or int\n    :return: The volume of the cube.\n    :rtype: float\n    \"\"\"\n    volume = side_length ** 3\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(number):\n    \"\"\"\n    Set all even-numbered bits of a given number to 1.\n    \"\"\"\n    return number | (number >> 1) & 0xAAAAAAAA", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[999999999]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    \"\"\"\n    Function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    result = {}\n    for tuple_ in tuples_list:\n        if tuple_ in result:\n            result[tuple_] += 1\n        else:\n            result[tuple_] = 1\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]]], "plus_fail_tests": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]]]}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings in a given string.\n    \"\"\"\n    if len(string) == 0:\n        return 0\n    power = 1\n    count = 1\n    length = len(string)\n    while power * 2 <= length:\n        count += length // power\n        power *= 2\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abc"]], "plus_fail_tests": [["aaaaaa"]]}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Function that finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n <= 0 or m < 3:\n        return 0\n\n    sequences = [0] * (n + 1)\n    sequences[0] = 1\n    sequences[1] = 1\n\n    for i in range(2, n + 1):\n        sequences[i] = 0\n        for j in range(i):\n            if sequences[j] > 0 and m >= 2 * sequences[j] <= m:\n                sequences[i] += sequences[j]\n\n    return sequences[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[100, 10]]}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(input_list, element):\n    \"\"\"\n    Function that takes a list and an element, and inserts the element before each element in the list.\n    \"\"\"\n    return [element] + input_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Black"], "c"]], "plus_fail_tests": [[[], "hello"]]}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    Function to count the total number of characters in a given string.\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(lst1, lst2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(lst1) < len(lst2):\n        raise ValueError(\"The first list should be longer or equal to the second list.\")\n    lst1[-1] = lst2\n    return lst1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], "plus_fail_tests": [[[1, 2, 3, 4], []]]}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    return sum(1 for i in lst if isinstance(i, int))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import cmath\ndef convert(complex_number):\n    \"\"\"\n    Converts a complex number to polar coordinates (magnitude and angle).\n    \"\"\"\n    magnitude, angle = cmath.polar(complex_number)\n    return (magnitude, angle)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tuple_input, element_x):\n    \"\"\"\n    Function that takes a tuple and an element as input and returns the count of occurrences of the element in the tuple.\n\n    :param tuple_input: A tuple of integers\n    :param element_x: An integer to be counted in the tuple\n    :return: An integer representing the count of occurrences of the element in the tuple\n    \"\"\"\n    count = tuple_input.count(element_x)\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Base case: empty strings are palindromes of length 0\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values are unnecessary and are filled in the process.\n    for cl in range(1, n):\n        for i in range(n - cl):\n            j = i + cl\n            if s[i] == s[j] and cl == 1:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is an octagonal number.\n    An octagonal number is a figure that can be inscribed in a regular octagon.\n    An octagonal number can be represented as the sum of the first n positive integers that can be expressed as the difference of two cubes in n distinct ways.\n    \"\"\"\n    def is_cube_difference(n):\n        i = 1\n        while True:\n            cube = i ** 3\n            next_cube = (i + 1) ** 3\n            if abs(next_cube - cube) == n:\n                return True\n            i += 1\n\n    def sum_cubes_difference(n):\n        count = 0\n        i = 1\n        while True:\n            if is_cube_difference(n):\n                count += 1\n                if count == 2:\n                    return sum(range(1, i))\n            i += 1\n\n    return sum_cubes_difference(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    \"\"\"\n    Combsort is a simple sorting algorithm that works by repeatedly shrinking the elements that are far from their correct position.\n    \"\"\"\n    n = len(arr)\n    gap = int(0.80 * n + 0.10 * n // 3)\n    while gap > 0:\n        for i in range(n):\n            j = i + gap\n            while j < n and arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n            gap = int(gap * 0.87 if gap > 1 else 1)\n    return arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 15, 37, 25, 79]]], "plus_fail_tests": [[[500, 1000, 1500, 2000, 3000]]]}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Performs mathematical division element-wise across given tuples.\n\n    :param tuple1: A tuple of numbers.\n    :param tuple2: A tuple of numbers.\n    :return: A tuple of results of division of corresponding elements.\n    \"\"\"\n    return tuple(map(lambda x, y: x / y if y != 0 else None, tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    Swaps the order of two input numbers and returns a tuple with the swapped numbers.\n    \"\"\"\n    return (num2, num1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Returns the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    def is_wilson(n):\n        \"\"\"\n        Checks if a number is a Wilson prime.\n        \"\"\"\n        if n <= 3:\n            return n > 1\n        sqrt_n = int(n ** 0.5) + 1\n        for i in range(2, sqrt_n):\n            if n % i == 0 and (n // i) % (i - 1) == 0:\n                return False\n        return n > 2 and all(n % i != 0 for i in range(5, int(n ** 0.5) + 1, 6))\n\n    def newman_loop(n):\n        \"\"\"\n        Generates Newman-Shanks-Williams prime numbers using the loop method.\n        \"\"\"\n        i = 0\n        while True:\n            i += 2\n            if is_wilson(i):\n                return i\n\n    return newman_loop(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuples1, tuples2):\n    # Merge tuples and sort them based on the first element in each tuple\n    merged = sorted(tuples1 + tuples2, key=lambda x: x[0], reverse=True)\n    \n    # Create an empty list to store the maximum elements from each tuple\n    max_elements = []\n    \n    # Iterate through merged tuples and add the first tuple element if it's greater than the last element in max_elements\n    for tuple in merged:\n        if not max_elements or tuple[0] > max_elements[-1][0]:\n            max_elements.append(tuple)\n    \n    # Return the list of maximum elements\n    return [i[1] for i in max_elements]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8]], [[8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    \"\"\"\n    Calculate a dog's age in dog years based on the given human years.\n    \"\"\"\n    return human_years * 7 + 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[100]]}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a given character.\n    \"\"\"\n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(input_list, length):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is 'length'.\n    Returns a tuple of the two resulting lists.\n    \"\"\"\n    if len(input_list) < length:\n        raise ValueError(\"Input list is too short to split into two parts of given length.\")\n\n    return (input_list[:length], input_list[length:])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(input_list, n):\n    \"\"\"\n    Splits a given list into sublists of length n.\n\n    :param input_list: List to be split\n    :param n: Integer representing the length of each sublist\n    :return: List of sublists\n    \"\"\"\n    return [input_list[i:i + n] for i in range(0, len(input_list), n)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3]], "plus_fail_tests": [[[], 1]]}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [last_element for tuple in tuples_list]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, "Rash", 21], [2, "Varsha", 20], [3, "Kil", 19]]]], "plus_fail_tests": [[[[1, ["Rash", 21]], [2, ["Varsha", 20]], [3, ["Kil", 19]]]]]}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(numbers):\n    \"\"\"\n    Function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    index = 0\n    sum = 0\n    while index < len(numbers):\n        if index % 2 == 0 and numbers[index] % 2 == 0:\n            sum += numbers[index]\n        index += 1\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(tuple_input):\n    \"\"\"\n    Function to find the number of elements that occur before the first tuple in the given tuple.\n\n    :param tuple_input: A tuple with one or more tuples or elements.\n    :return: An integer representing the number of elements before the first tuple.\n    \"\"\"\n    count = 0\n    for i in tuple_input:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    :param radius: The radius of the base of the cylinder.\n    :param height: The height of the cylinder.\n    :return: The volume of the cylinder.\n    \"\"\"\n    return math.pi * (radius ** 2) * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "from math import comb\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even indexed binomial coefficients for a given positive integer n.\n    \"\"\"\n    result = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            result += comb(n, i)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    :param dictionary: A dictionary.\n    :param n: An integer.\n    :return: A new dictionary with filtered entries.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value >= n}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts each element in list1 with the corresponding element in list2.\n    \"\"\"\n    return [i - j for i, j in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Checks if all items in the given list are equal to the given element.\n\n    :param lst: List to check\n    :param element: Element to compare with\n    :return: True if all items are equal to the given element, False otherwise\n    \"\"\"\n    return all(item == element for item in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, target):\n    \"\"\"\n    Function that takes an array and an element as arguments and returns a tuple containing a boolean and the index position of the element in the array.\n    :param arr: List or array to be searched\n    :param target: Element to be searched\n    :return: A tuple containing a boolean and the index position of the element in the array or (-1, False) if the element is not found\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return (True, i)\n    return (-1, False)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 10]]}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    :param arr: List of integers representing the array.\n    :param k: Integer representing the number of repetitions.\n    :param n: Integer representing the length of the array after repetition.\n    :return: Integer representing the largest sum of a contiguous array.\n    \"\"\"\n\n    total_sum = sum(arr) * k\n    best_sum = total_sum\n    current_sum = 0\n\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n\n        if i >= k - 1 and current_sum > total_sum - best_sum:\n            total_sum += sum(arr)\n            current_sum = 0\n\n    return best_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 10, 20], 3, 2]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(num):\n    # Create a dictionary to store digit frequencies\n    digit_freq = {digit: num.count(digit) for digit in str(num)}\n\n    # Check if all digit frequencies are less than or equal to the digit itself\n    return all(freq <= digit for digit, freq in digit_freq.items())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1234]], "plus_fail_tests": [[9]]}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(input_list):\n    \"\"\"\n    Check if all elements in the given list are unique.\n\n    :param input_list: List to check for unique elements\n    :return: True if all elements are unique, False otherwise\n    \"\"\"\n    if len(input_list) == len(set(input_list)):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    \"\"\"\n    Checks if a given string contains the 'a' character followed by exactly two or three 'b' characters.\n    \"\"\"\n    if not text or len(text) < 3:\n        return False\n\n    index_a = text.find('a')\n    if index_a == -1:\n        return False\n\n    index_b_start = index_a + 1\n    index_b_end = index_b_start + 2 if text[index_a+1] == 'b' else index_a + 1\n\n    return len(text[index_b_start:index_b_end+1]) in [2, 3]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the maximum length and the list of maximum length in a list of lists.\n\n    :param lst: A list of lists.\n    :return: A tuple containing the maximum length and the list of maximum length.\n    \"\"\"\n    max_len, max_list = 0, []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = [sublist]\n        elif len(sublist) == max_len:\n            max_list.append(sublist)\n    return max_len, max_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]]], "plus_fail_tests": [[[[1, 3, 5, 7, 9, 11], [2, 4, 6], [10, 12, 14, 16, 18, 20], [13, 15, 17, 19, 21]]]]}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return 0\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    inv_count_left = merge_sort(left)\n    inv_count_right = merge_sort(right)\n\n    merge_index = 0\n    merge_index_left = 0\n    merge_index_right = 0\n\n    inv_count = 0\n    while merge_index < len(arr) and merge_index_left < len(left) and merge_index_right < len(right):\n        if left[merge_index_left] < right[merge_index_right]:\n            arr[merge_index] = left[merge_index_left]\n            merge_index += 1\n            merge_index_left += 1\n        else:\n            inv_count += len(left) - merge_index_left\n            arr[merge_index] = right[merge_index_right]\n            merge_index += 1\n            merge_index_right += 1\n\n    while merge_index_left < len(left):\n        arr[merge_index] = left[merge_index_left]\n        merge_index += 1\n        merge_index_left += 1\n\n    while merge_index_right < len(right):\n        arr[merge_index] = right[merge_index_right]\n        merge_index += 1\n        merge_index_right += 1\n\n    return inv_count + inv_count_left + inv_count_right\ndef get_Inv_Count(arr):\n    return merge_sort(arr)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 1]]], "plus_fail_tests": [[[73, 33, 77, 63, 91, 28, 4, 10, 50, 73, 2, 48, 19, 96]]]}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\ndef hypotenuse(base, height):\n    \"\"\"\n    Calculates the hypotenuse of a right angled triangle given the base and height.\n    \"\"\"\n    return math.sqrt(base**2 + height**2)\ndef otherside_rightangle(base, height):\n    \"\"\"\n    Finds the length of the third side of a right angled triangle.\n    \"\"\"\n    hypotenuse_length = hypotenuse(base, height)\n    return hypotenuse_length * 2 - base", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7, 8]], "plus_fail_tests": [[2.5, 3.5]]}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(num1, num2):\n    \"\"\"\n    This function returns the quotient of two numbers rounded down to the nearest integer.\n    \"\"\"\n    return int(num1 / num2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-1, 2]]}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flattens a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    # Calculate the number of binary digits in 2n\n    num_bits = 2 * n\n    \n    # Create a binary number with leading zeros filled up to 2n bits\n    binary_num = format(int(\"1\" * (num_bits // 2) + \"0\" * (num_bits - num_bits // 2), 2), f\"0{num_bits}b\")\n    \n    # Initialize a counter to store the count of binary sequences\n    count = 0\n    \n    # Iterate through all possible binary sequences of length 2n\n    for i in range(1 << num_bits):\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(int(bit) for bit in binary_num[:n]) == sum(int(bit) for bit in binary_num[num_bits - n:]):\n            count += 1\n    \n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[4]]}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    \"\"\"\n    Function to find the depth of a given dictionary.\n    \"\"\"\n    return 1 + max(map(dict_depth, d.values() if type(d) is dict else [d]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"a": 1, "b": {"c": {"d": {}}}}]], "plus_fail_tests": [[{}]]}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    \"\"\"\n    Calculate the maximum aggregate (sum of the second element of tuples) from the given list of tuples.\n    \"\"\"\n    return max(tuples, key=lambda x: x[1])[0], sum(x[1] for x in tuples)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Juan Whelan", 90], ["Sabah Colley", 88], ["Peter Nichols", 7], ["Juan Whelan", 122], ["Sabah Colley", 84]]]], "plus_fail_tests": [[[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40]]]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(num1, num2):\n    \"\"\"\n    This function takes two numbers as arguments and returns the maximum of them.\n    \"\"\"\n    if num1 > num2:\n        return num1\n    else:\n        return num2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words_list):\n    \"\"\"\n    Returns a tuple of two words from the given list that start with the letter 'p'.\n    \"\"\"\n    words = [word for word in words_list if word.lower().startswith('p')]\n    if len(words) < 2:\n        raise ValueError(\"Not exactly two words starting with 'p' in the list.\")\n    return words[0], words[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python PHP", "Java JavaScript", "c c++"]]], "plus_fail_tests": [[["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]]]}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(input_string):\n    \"\"\"\n    Converts a given string to a tuple of characters.\n    \"\"\"\n    return tuple(input_string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num_pairs):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    :param list1: List of numbers\n    :param list2: List of numbers\n    :param num_pairs: Number of pairs to find\n    :return: List of largest product pairs\n    \"\"\"\n\n    # Sort both lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n\n    # Initialize an empty list to store the largest product pairs\n    largest_pairs = []\n\n    # Iterate through the smaller list (list1) for the specified number of times\n    for _ in range(num_pairs):\n        # Get the product of the first element from list1 and the first element from list2\n        product = list1.pop(0) * list2.pop(0)\n        # Append the product to the list of largest product pairs\n        largest_pairs.append(product)\n\n    return largest_pairs", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], "plus_fail_tests": [[[-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], [-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], 1]]}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    Set the left most unset bit in a given number.\n    \"\"\"\n    # Find the position of the left most unset bit using bitwise AND with (num - 1)\n    # and XOR with the number to set the found bit\n    return (num | (num - 1)) & ~(num - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[125]]}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone with the given radius and height.\n    :param radius: The radius of the base of the cone.\n    :param height: The height of the cone.\n    :return: The volume of the cone.\n    \"\"\"\n    volume = (1.0 / 3.0) * math.pi * radius ** 2 * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(lists):\n  if len(lists) != len(lists[0]): raise ValueError(\"All lists must have the same length\")\n  result = []\n  for i in range(len(lists)):\n    dictionary = {lists[0][i]: {lists[1][i]: lists[2][i]}}\n    result.append(dictionary)\n  return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [85, 98, 89, 92]]], "plus_fail_tests": [[["abc", "def", "ghi", "jkl"], ["python", "program", "language", "programs"], [{"1": "a", "2": "b"}, {"3": "c"}, 4, ["x", "y", "z"]]]]}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n\n    :param lst: List of elements to be formatted.\n    :param format_str: Format string to be applied to each element.\n    :return: List of formatted strings.\n    \"\"\"\n    return [format_str.format(i=i) for i in lst]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4], "temp{0}"]], "plus_fail_tests": [[[1, "two", 3, "four"], "item_{0}"]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    This function calculates the n'th Lucas number using the recursive formula:\n    L(n) = L(n-1) + L(n-2)\n    where L(0) = 2 and L(1) = 1\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer\")\n\n    if n <= 1:\n        return 1 if n == 0 else 2\n\n    return find_lucas(n - 1) + find_lucas(n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[15]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while (2 ** (power + 1) <= n):\n        power += 1\n    return 2 ** power", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 0:\n        return 0\n    elif n <= 3:\n        return n\n    else:\n        return max(n, *[get_max_sum(n // i) for i in (2, 3, 4, 5)])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[60]], "plus_fail_tests": [[100]]}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(num1, num2, num3):\n    \"\"\"\n    Calculate the median of three numbers.\n    \"\"\"\n    numbers = [num1, num2, num3]\n    numbers.sort()\n    middle_index = len(numbers) // 2\n\n    if len(numbers) % 2 == 0:\n        median = (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    else:\n        median = numbers[middle_index]\n\n    return median", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(tuple_input):\n    \"\"\"\n    Function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(tuple_input) == len(set(tuple_input)):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Returns the first non-repeating character in the given string, or None if all characters are repeated.\n    \"\"\"\n    count = {}\n    for char in string:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    for char in string:\n        if count[char] == 1:\n            return char\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(x, y):\n    \"\"\"\n    This function takes two numbers as arguments and returns the minimum of them.\n    \"\"\"\n    return min(x, y)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "import itertools\ndef min_product_tuple(tuples):\n    \"\"\"\n    Find the minimum product from pairs of tuples within a given list.\n    \"\"\"\n    return min(a[0] * b[0] for a, b in itertools.combinations(tuples, 2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[2, 7], [2, 6], [1, 8], [4, 9]]]], "plus_fail_tests": [[[[1000000, 2000000], [5000000, 3000000], [4000000, 6000000]]]]}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    return min(lst, key=lambda x: type(x) in {int, float} and x or (type(x) is str and len(x) or x))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 15, 20, 25]]], "plus_fail_tests": [[["Python", 10, 5, 2.5, 2.5, "version"]]]}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    :param lst: List of tuples\n    :param n: Index of the element to extract\n    :return: The nth element as a list\n    \"\"\"\n    if not lst or not isinstance(lst[0], tuple):\n        raise TypeError(\"Input must be a non-empty list of tuples\")\n\n    try:\n        return [elem[0] for elem in lst[n:]]\n    except IndexError:\n        raise IndexError(\"Index out of range\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Greyson Fulton", 98, 99], ["Brady Kent", 97, 96], ["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98]], 2]], "plus_fail_tests": [[[], 0]]}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_Product(numbers):\n    \"\"\"\n    Find a pair with the highest product from a given array of integers.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Array should have at least two elements\")\n\n    numbers.sort()\n    return numbers[-1] * numbers[-2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 7, 0, 8, 4]]], "plus_fail_tests": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if there is any common element between two sequences.\n\n    Args:\n    seq1 (list): The first sequence.\n    seq2 (list): The second sequence.\n\n    Returns:\n    bool: True if there is any common element, False otherwise.\n    \"\"\"\n    return bool(set(seq1) & set(seq2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    \"\"\"\n    Round every number in the given list to the nearest integer and return the total sum multiplied by the length of the list.\n    \"\"\"\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Find the list with maximum length in the given list of lists.\n    \"\"\"\n    return max(lst, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tuple_input):\n    \"\"\"\n    Concatenates each element in a tuple with a delimiter '-' and returns the result as a string.\n\n    :param tuple_input: A tuple of elements to be concatenated\n    :return: A string with concatenated tuple elements\n    \"\"\"\n    delimiter = '-'\n    return '-'.join(map(str, tuple_input))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(tupl):\n    \"\"\"\n    Extracts the last character of each string in the given tuple.\n    \"\"\"\n    return tuple(s[-1] for s in tupl)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Mers", "for", "Vers"]]], "plus_fail_tests": [[["Lorem", "ipsum", "dolor", "sit", "amet"]]]}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filter odd numbers from the given list.\n    \"\"\"\n    return list(filter(lambda x: x % 2 != 0, numbers))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def star_number(n):\n    \"\"\"\n    Calculate the n-th star number using the formula: n! = n * (n-1) * (n-2) * ... * 1\n    \"\"\"\n    total = 0\n    num = 1\n    for i in range(1, n+1):\n        num *= i\n        total += num\n    return total\ndef find_star_num(n):\n    \"\"\"\n    Find the n-th star number.\n    \"\"\"\n    return star_number(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = int(0.5 * (n ** 0.5))\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Returns a new tuple with the element-wise product and the number of matching elements between two tuples.\n    \"\"\"\n    product = tuple(map(lambda x, y: x * y if type(x) is int else (x, y), tuple1, tuple2))\n    matching_elements = sum(1 for i, (x, y) in enumerate(zip(tuple1, tuple2)) if x == y)\n    return product, matching_elements", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 4, 6, 9], [5, 2, 3, 3]]], "plus_fail_tests": [[[0, 0, 0, 0], [0, 0, 0, 0]]]}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "from datetime import datetime\ndef change_date_format(date_str):\n    \"\"\"\n    Converts a date string in yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    date_object = datetime.strptime(date_str, \"%Y-%m-%d\")\n    return date_object.strftime(\"%d-%m-%Y\")", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "import math\ndef parabola_focus(h, k, h_):\n    p = h_ ** 2 / 4\n    focus_x = h - h_\n    focus_y = k\n    return focus_x, focus_y\ndef parabola_directrix(h, k, h_):\n    p = h_ ** 2 / 4\n    focus = parabola_focus(h, k, h_)\n    directrix_x = focus[0] + p / abs(p)\n    return directrix_x", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 0, 0]]}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the given number is greater than all elements in the array.\n\n    :param arr: List of numbers\n    :param num: Number to check\n    :return: Boolean value\n    \"\"\"\n    return all(num > i for i in arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(numbers):\n    \"\"\"\n    Returns a new list containing only the negative numbers from the given list.\n    \"\"\"\n    return [num for num in numbers if num < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculates the median length of a trapezium with sides a, b, and c.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = ((a + b) / 2) * (c / 2)\n    \n    # Find the median length by calculating the semi-perimeter and then solving the equation for the median\n    s = (a + b + c) / 2\n    median = (2 * area) / s\n    \n    return median", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[15, 25, 35]], "plus_fail_tests": [[2.3, 4.7, 3.9]]}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Function to remove odd indexed characters from a given string.\n    \"\"\"\n    return ''.join(char for i, char in enumerate(string) if i % 2 == 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python"]], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return int(''.join(map(str, numbers)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "import re", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Performs index-wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    return tuple(map(lambda x, y: x[i] * y[i] for i in range(len(tuple1)) if len(x) > i >= 0 and len(y) > i))(tuple1, tuple2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 1], [2, 2], [3, 3], [4, 4]], [[5, 5], [6, 6], [7, 7], [8, 8]]]]}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def is_perrin(n):\n    \"\"\"\n    Check if a number is a Perrin number.\n    \"\"\"\n    a, b, c = 0, 1, 1\n    while c < n:\n        a, b, c = b, c, a + b\n    return c == n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to n.\n    \"\"\"\n    total = 0\n    i = 0\n    while True:\n        if is_perrin(i):\n            total += i\n            if total > n:\n                break\n        i += 1\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts strings of given size from a list of strings.\n\n    :param string_list: List of strings\n    :param size: Desired string length\n    :return: List of extracted strings\n    \"\"\"\n    return [s[::] for s in string_list if len(s) == size]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(input_string):\n    \"\"\"\n    Function to remove all whitespaces from the given string.\n    \"\"\"\n    return input_string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverses each string in the given list.\n\n    :param string_list: List of strings to reverse\n    :return: List of reversed strings\n    \"\"\"\n    return [i[::-1] for i in string_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Find the sublist with minimum length in the given list of lists.\n    \"\"\"\n    return [min(sublist) for sublist in lst]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1], [1, 2], [1, 2, 3]]]], "plus_fail_tests": [[[[], [], []]]]}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    \"\"\"\n    Returns True if the text contains a word with 'z' character.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if 'z' in word:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product of a contiguous subarray within the given array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    # Initialize current product and maximum product with the first element of the array\n    current_product, max_product = arr[0], arr[0]\n\n    # Iterate through the array to find the maximum product subarray\n    for num in arr[1:]:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, -2, -3, 0, 7, -8, -2]]], "plus_fail_tests": [[[-2, 4, -6, 8, 10, -12, 14, -16]]]}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "import itertools\ndef combinations_list(input_list):\n    \"\"\"\n    Returns all possible combinations of elements in the given list.\n    \"\"\"\n    return list(itertools.combinations(input_list, range(len(input_list) + 1)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    :param length: The length of the rectangle.\n    :param width: The width of the rectangle.\n    :return: The area of the rectangle.\n    \"\"\"\n    return length * width", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove all uppercase substrings from a given string.\n    \"\"\"\n    return ''.join(filter(lambda char: char.islower(), string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    \"\"\"\n    Function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in d.items() if value is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    if len(arr) < 2:\n        return arr[0] if arr else 0\n\n    dp_prev = arr[0]\n    dp_next = max(arr[0], arr[1])\n    max_product = dp_next\n\n    for num in arr[2:]:\n        dp_prev, dp_next = dp_next, max(dp_next * num, num)\n        max_product = max(max_product, dp_next)\n\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[-3, -100, -4, -5, -150, -6]]]}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "from collections import defaultdict\ndef tuple_intersection(*args):\n    \"\"\"\n    Find the intersection of tuples in given tuple list irrespective of their order.\n    \"\"\"\n    if not args:\n        return set()\n\n    intersect = defaultdict(int)\n    for tpl in args:\n        for elem in tpl:\n            intersect[elem] += 1\n\n    return {k: v for k, v in intersect.items() if v > 0}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [7, 8, 9], [10, 11, 12]]]]}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(numbers_tuple):\n    \"\"\"\n    Function to find the pairwise addition of neighboring elements in a given tuple.\n    \"\"\"\n    return tuple(map(lambda x, y: x + y, numbers_tuple[::2], numbers_tuple[1::2]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, 8, 10]]], "plus_fail_tests": [[[1, 2, -3, 4, 5]]]}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Function to find the product of array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(arr) == 0:\n        raise ValueError(\"Array cannot be empty\")\n\n    smallest = min(arr)\n    largest = max(arr)\n    return smallest + largest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(string, char_to_replace, new_char):\n    \"\"\"\n    Replace all occurrences of char_to_replace with new_char in the given string.\n\n    :param string: The input string.\n    :param char_to_replace: The character to be replaced.\n    :param new_char: The character to replace char_to_replace with.\n    :return: The modified string.\n    \"\"\"\n    return string.replace(char_to_replace, new_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    \"\"\"\n    Sort a dictionary by value in descending order.\n    \"\"\"\n    return dict(sorted(d.items(), key=lambda item: item[1], reverse=True))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Math": 81, "Physics": 83, "Chemistry": 87}]], "plus_fail_tests": [[{"A": 1000, "B": 1000, "C": 1000, "D": 1000, "E": 1000}]]}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(numbers, target_sum):\n    \"\"\"\n    Finds the number of pairs in the given list whose XOR value is odd and sum equals the target_sum.\n\n    :param numbers: List of integers\n    :param target_sum: Target sum of the XOR value of pairs\n    :return: Number of pairs\n    \"\"\"\n    xor_map = {}\n    count = 0\n\n    for num in numbers:\n        complement = target_sum ^ num\n        if complement in xor_map:\n            count += 1\n        else:\n            xor_map[num] = num\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4, 7, 2, 1], 5]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggles the case of all characters in a given string.\n    \"\"\"\n    return string.swapcase()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Function to remove lowercase substrings from a given string.\n    \"\"\"\n    return ''.join(filter(lambda char: char.isupper(), string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def sum_of_cubes(n):\n    \"\"\"\n    Calculate the sum of cubes of the first n natural numbers.\n    \"\"\"\n    return sum(i**3 for i in range(1, n+1))\ndef sum_of_numbers(n):\n    \"\"\"\n    Calculate the sum of the first n natural numbers.\n    \"\"\"\n    return sum(range(1, n+1))\ndef difference(n):\n    \"\"\"\n    Find the difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    return sum_of_cubes(n) - sum_of_numbers(n)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert integers to strings for easier digit-wise comparison\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Calculate the difference between corresponding digits and sum them up\n    result = sum(abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(str_num1, str_num2))\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "import re\ndef extract_values(input_str):\n    \"\"\"\n    Extracts values between quotation marks from a given string.\n    \"\"\"\n    pattern = r'(\\\"[^\\\"]+\\\")'\n    return re.findall(pattern, input_str)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["\"Python\", \"PHP\", \"Java\""]], "plus_fail_tests": [["\"red\" \"blue\" \"green\" \"yellow\" \"red\" \"blue\" \"green\" \"yellow\""]]}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements in two given tuples and output them in sorted order.\n    \"\"\"\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    result = list(set(set1.union(set2)))\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[11, 12, 13, 14], [13, 15, 16, 17]]], "plus_fail_tests": [[[10, 20, 30, 40], [40, 50, 60, 70]]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    \"\"\"\n    Find the length of the longest sublist in the given list of sublists.\n\n    :param sublists: List of sublists\n    :return: Int, the length of the longest sublist\n    \"\"\"\n    return max(len(sublist) for sublist in sublists)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "import unittest\ndef issort_list(arr):\n    \"\"\"\n    Function to check if a list is sorted in ascending order.\n    \"\"\"\n    return len(arr) < 2 or all(arr[i] <= arr[i+1] for i in range(len(arr)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split(string):\n    \"\"\"\n    Splits a given string into a list of characters.\n    \"\"\"\n    return list(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return sum(int(digit) for digit in str(abs(n)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(numbers))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(n)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(num_lists):\n    # Flatten all lists and remove duplicates using a set\n    unique_nums = set()\n    for num_list in num_lists:\n        unique_nums.update(num_list)\n\n    # Convert set back to list\n    return list(unique_nums)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 3, 4, 5]]], "plus_fail_tests": [[[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]]]}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave three lists of the same length into a single flat list.\n    \"\"\"\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]]], "plus_fail_tests": [[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [100, 200, 300, 400, 500]]]}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in given two tuples.\n    \"\"\"\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    return list(set1.difference(set2) | set2.difference(set1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    def is_even(num):\n        \"\"\"\n        Helper function to check if a number is even.\n        \"\"\"\n        return num % 2 == 0\n\n    def process_element(element):\n        \"\"\"\n        Helper function to process an element, which could be an integer or a tuple.\n        \"\"\"\n        if isinstance(element, int):\n            if is_even(element):\n                yield element\n        else:\n            for sub_element in element:\n                yield from process_element(sub_element)\n\n    return tuple(process_element(element) for element in nested_tuple if all(is_even(num) for num in element))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 5, [7, 6, [2, 4]], 6, 8]]], "plus_fail_tests": [[[1, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]]]}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    \"\"\"\n    Returns a list of n most expensive items in the given dataset.\n    \"\"\"\n    items.sort(key=lambda x: x['price'], reverse=True)\n    return items[:n]\nitems = [{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "import math\ndef catalan_number(n):\n    if n < 0:\n        raise ValueError(\"Input should be non-negative integer\")\n\n    if n == 0 or n == 1:\n        return 1\n\n    return int((1/math.sqrt(5) * (math.gamma(1 + 2*n) / math.gamma(n + 1) / math.gamma(n + 1 + n/2))) % int(1e6 + 3))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[2]]}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    \"\"\"\n    Converts a given list to a tuple.\n    \"\"\"\n    return tuple(input_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(numbers):\n    \"\"\"\n    Find the difference between the largest and smallest value in a given list.\n    \"\"\"\n    if len(numbers) == 0:\n        raise ValueError(\"List cannot be empty\")\n\n    return max(numbers) - min(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "from math import comb", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Returns a list of perfect squares between two given numbers.\n    \"\"\"\n    return list(x * x for x in range(start, (end // 2) + 1) if x * x <= end)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[50, 100]], "plus_fail_tests": [[1, 0]]}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (r, theta) to rectangular coordinates (x, y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x.real, y.imag", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Function to remove leading zeroes from an IP address.\n    \"\"\"\n    # Split the IP address string into a list of octets\n    octets = ip_address.split('.')\n\n    # Iterate through each octet and remove leading zeroes\n    for i in range(len(octets)):\n        if octets[i].startswith('0'):\n            if len(octets[i]) > 1:\n                octets[i] = octets[i][1:]\n            elif i > 0:\n                del octets[i-1:i]\n                octets.insert(i-1, '')\n                octets[i] = '1' + octets[i][1:]\n                break\n\n    # Join the list of octets back into a single IP address string\n    return '.'.join(octets)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Find the difference of the first even and first odd number in a given list.\n    \"\"\"\n    even, odd = None, None\n    for num in numbers:\n        if not (even is not None and odd is not None):\n            if num % 2 == 0:\n                even = num\n            else:\n                odd = num\n                break\n    assert even is not None and odd is not None, \"List must contain at least one even and one odd number.\"\n    return even - odd", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 4, 1, 6, 8]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]]]}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    \"\"\"\n    Returns the size in bytes of the given tuple.\n    \"\"\"\n    return sys.getsizeof(t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    \"\"\"\n    Check if a given number is an Armstrong number.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    number_str = str(n)\n    power = len(number_str)\n    sum = 0\n    for digit in number_str:\n        sum += int(digit) ** power\n    return sum == n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(number):\n    \"\"\"\n    Checks if the given number is even.\n\n    :param number: An integer number.\n    :return: True if the number is even, False otherwise.\n    \"\"\"\n    return number % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in s:\n        if char in char_freq:\n            return char\n        char_freq[char] = True\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverses the order of words in a given string.\n    \"\"\"\n    words = string.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python program"]], "plus_fail_tests": [["word"]]}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return (math.pi * degrees) / 180", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    :param string: The input string to search.\n    :param pattern: The regex pattern to search for.\n    :return: A tuple containing the matching substring, start index, and end index.\n    \"\"\"\n    match = re.search(pattern, string)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return (None, -1, -1)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(input_list, k):\n    \"\"\"\n    Function that takes a list and returns a new list with the k'th element removed.\n    \"\"\"\n    if len(input_list) <= k or k < 0:\n        raise IndexError(\"Invalid index\")\n\n    return input_list[:k] + input_list[k+1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 1]]}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value of the n-th column.\n    \"\"\"\n    if len(matrix) == 0 or len(matrix[0]) == 0:\n        raise ValueError(\"Matrix cannot be empty\")\n    if len(matrix[0]) < n:\n        raise IndexError(\"Column index out of range\")\n\n    max_values = [row[n] for row in matrix]\n    return max(max_values)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lists):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists.\n    The first list has the first element of each sublist, and the second list has the second element of each sublist.\n    \"\"\"\n    return [list(map(lambda x: x[0], sublist)) for sublist in lists], \\\n           [list(map(lambda x: x[1], sublist)) for sublist in lists]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["x", "y"], ["a", "b"], ["m", "n"]]]], "plus_fail_tests": [[[["x", 1], ["y", 2], [true, "z"]]]]}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Takes two tuples of the same length and performs element-wise modulo.\n    \"\"\"\n    return tuple(elem1 % elem2 for elem1, elem2 in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(lst1, lst2):\n    \"\"\"\n    Divide corresponding elements of two lists.\n    :param lst1: List of numerators.\n    :param lst2: List of denominators.\n    :return: List of quotients.\n    \"\"\"\n    return [num / den for num, den in zip(lst1, lst2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\ndef get_merged_list(lists):\n    merged_list = []\n    for lst in lists:\n        merged_list += merge_sort(lst)\n\n    return merged_list\ndef get_median(lists):\n    merged_list = get_merged_list(lists)\n    size = len(merged_list)\n\n    if size % 2 == 0:\n        median = (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2\n    else:\n        median = merged_list[size // 2]\n\n    return median", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], "plus_fail_tests": [[[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10]]}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two numbers using Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\ndef largest_subset(numbers):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Find the greatest common divisor of all numbers in the list\n    gcd_numbers = functools.reduce(lambda a, b: gcd(a, b), numbers)\n\n    # Iterate through possible subset sizes and check if every pair is divisible\n    for size in range(len(numbers) + 1):\n        if all(gcd(numbers[i], numbers[j]) == gcd_numbers for i in range(size) for j in range(i+1, len(numbers))):\n            return size", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 6, 13, 17, 18]]], "plus_fail_tests": [[[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]]]}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "import re\ndef move_num(s):\n    \"\"\"\n    Move all numbers to the end of the given string.\n    \"\"\"\n    numbers = re.findall(r'\\d+', s)  # Find all numbers in the string\n    non_numbers = re.sub(r'\\d+', '', s)  # Remove all numbers from the string\n    return non_numbers + ''.join(numbers)  # Concatenate non-numbers and numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    \"\"\"\n    Function to check if a given string is in uppercase.\n    \"\"\"\n    return string.isupper()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["person"]], "plus_fail_tests": [[""]]}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(semi_circle_radius):\n    # Calculate the inradius of the triangle inscribed in a semicircle\n    inradius = semi_circle_radius / 3\n\n    # Calculate the side length of the triangle using the inradius\n    side_length = 2 * inradius * math.sqrt(3)\n\n    # Calculate the area of the triangle using Heron's formula\n    s = side_length / 2\n    area = (s * (s - side_length / 2) * (s + side_length / 2)) ** 0.5\n\n    return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[-1]], "plus_fail_tests": [[-0.5]]}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "import urllib.parse\ndef replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return urllib.parse.quote(string)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["I love\tCoding\n "]]}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "import unittest", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replace whitespaces with underscores and vice versa in a given string.\n    \"\"\"\n    return string.replace(\" \", \"_\").replace(\"_\", \" \")[::-1].replace(\"_\", \" \", 1).replace(\" \", \"_\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Jumanji The Jungle"]], "plus_fail_tests": [["abcdefg"]]}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    \"\"\"\n    Move all zeros to the end of the given list.\n    \"\"\"\n    # Find the index of the first non-zero number\n    index = nums.index(0) if 0 in nums else -1\n\n    # Iterate through the list and swap non-zero numbers with zeros\n    for i in reversed(range(len(nums))):\n        if nums[i] != 0:\n            nums[index], nums[i] = nums[i], nums[index]\n            index += 1\n\n    return nums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 0, 2, 0, 3, 4]]], "plus_fail_tests": [[[2, 3, 4, 0, 0, 7, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]]]}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(price1, price2):\n    \"\"\"\n    Function to check if there is no profit or loss between two prices.\n\n    :param price1: The first price\n    :param price2: The second price\n    :return: True if there is no profit or loss, False otherwise\n    \"\"\"\n    return abs(price1 - price2) < 0.01", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n\n    :param wind_velocity: Wind velocity in km/h\n    :param temperature: Temperature in Celsius\n    :return: Wind chill index rounded to the next integer\n    \"\"\"\n\n    # Wind chill index formula: W = 35.74 + 0.6215T - 35.75(V^0.16) + 0.4275T(V^0.16)\n    W = 35.74 + 0.6215 * temperature - 35.75 * ((wind_velocity / 3.6)**0.16) + 0.4275 * temperature * ((wind_velocity / 3.6)**0.16)\n    return int(round(W))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[120, 35]], "plus_fail_tests": [[0, 0]]}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains the letter 'z' in the middle of a word, excluding the start and end of the string.\n\n    :param text: A string to check\n    :return: A boolean value indicating if the condition is met\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if 'z' in word and word[0] != 'z' and word[-1] != 'z':\n            return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["zzzxyabczzz"]]}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "import numpy as np\ndef is_nonagonal(n):\n    \"\"\"\n    Check if a number is a nonagonal number.\n    A nonagonal number is a number that can be represented as a triangle with 9 equilateral triangles.\n    \"\"\"\n    return (3 * (3 * n ** 2 + n ** 2) == (3 * (3 * (n // 3) ** 2 + (n // 3) ** 2)) or\n            (3 * (3 * n ** 2 + n ** 2) == (3 * (3 * (n // 3) + 1) ** 2 + 3 * (3 * (n // 3) + 1) + 2 * (3 * (n // 3) + 1) + 2 * n ** 2)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tuple_input, dict_input):\n    \"\"\"\n    Function to add a dictionary to a tuple.\n\n    :param tuple_input: A tuple as input.\n    :param dict_input: A dictionary as input.\n    :return: A tuple as output with the dictionary appended.\n    \"\"\"\n    return tuple(tuple_input + [dict_input])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 5, 6], {"MSAM": 1, "is": 2, "best": 3}]], "plus_fail_tests": [[[], {}]]}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "import itertools\ndef combinations_colors(input_list, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the given list elements and returns a list with a tuple for each combination.\n\n    :param input_list: List of elements\n    :param n: Desired length of combinations\n    :return: List of tuples representing combinations\n    \"\"\"\n    return list(itertools.combinations(input_list, n))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(students_data, min_height, min_weight):\n    \"\"\"\n    Filter students from the given dictionary based on height and weight minimums.\n\n    :param students_data: A dictionary with student names as keys and tuples of height and weight as values.\n    :param min_height: The minimum height.\n    :param min_weight: The minimum weight.\n    :return: A new dictionary with filtered students.\n    \"\"\"\n    return {name: value for name, value in students_data.items() if value[0] > min_height and value[1] > min_weight}\nstudents_data = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 6.0, 70]], "plus_fail_tests": [[{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 5.8, 65]]}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Function to count indices where the lists have the same values.\n    \"\"\"\n    return sum(1 for i, value in enumerate(list1) if value in list2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1]]]}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "import re\ndef extract_quotation(input_str):\n    \"\"\"\n    Extracts values between quotation marks from the given string.\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', input_str)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    # Calculate the sum of all digits of a base raised to the power\n    sum = 0\n    base_digits_sum = 0\n    base_digits = [int(digit) for digit in str(base)]\n\n    # Calculate the sum of all digits of base raised to power of 1\n    base_digits_sum = sum(digit ** power for digit in base_digits)\n\n    # Calculate the sum of all digits of base raised to higher powers\n    for _ in range(power - 1):\n        sum += base_digits_sum\n        base_digits_sum = sum(digit ** (power + 1) for digit in base_digits)\n\n    return sum + base_digits_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 100]], "plus_fail_tests": [[1, 1000000]]}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(tuple_input):\n    \"\"\"\n    Function that takes a tuple of numbers as input and returns a new tuple of length N, where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    if len(tuple_input) < 2:\n        raise ValueError(\"Input tuple must have at least two elements.\")\n\n    result = [tuple_input[i] * tuple_input[i+1] for i in range(len(tuple_input)-1)]\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12]]], "plus_fail_tests": [[[]]]}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(list_a, list_b):\n    \"\"\"\n    Function takes as input two lists and returns a new list with the sum of corresponding elements.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Both input lists must have the same length.\")\n\n    result = [0] * len(list_a)\n    for i in range(len(list_a)):\n        result[i] = list_a[i] + list_b[i]\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(input_list):\n    \"\"\"\n    Function to remove consecutive duplicates from a given list.\n    \"\"\"\n    if not input_list:\n        return []\n\n    output_list = [input_list[0]]\n    for element in input_list[1:]:\n        if element != output_list[-1]:\n            output_list.append(element)\n\n    return output_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            return mid\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5, 5, 5, 5, 5], 5]]}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, and dots with a colon in the given text.\n    \"\"\"\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggles all bits except the first and the last one in the given number.\n    \"\"\"\n    # Calculate the mask for the middle bits\n    middle_bits_mask = (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5)\n\n    # Shift the number to the right by one bit and invert the bits\n    toggled_bits = ~((num >> 1) & middle_bits_mask)\n\n    # Combine the first bit, the last bit, and the toggled bits\n    return (num & 3) | toggled_bits", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[2147483647]]}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regex.\n    \"\"\"\n    pattern = re.compile(r'^[aeiouAEIOU]')\n    return bool(pattern.match(string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    if not arr:\n        return 0\n\n    left = 0\n    right = len(arr)\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(input_tuple):\n    \"\"\"\n    Converts a given tuple to a dictionary using adjacent elements as keys and values.\n    \"\"\"\n    if len(input_tuple) % 2 != 0:\n        raise ValueError(\"Input tuple must have even length\")\n\n    output_dict = {}\n    for i in range(0, len(input_tuple), 2):\n        output_dict[input_tuple[i]] = input_tuple[i+1]\n\n    return output_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(tuple_input):\n    \"\"\"\n    Function to check if the given tuple has any None value or not.\n    \"\"\"\n    return any(type(i) is None for i in tuple_input)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 4, 5, 6, null]]], "plus_fail_tests": [[[null, [null, [null, [null, [null, [null]]]]]]]]}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\ndef side_length(edge_length):\n    \"\"\"Calculate the side length of a regular tetrahedron.\"\"\"\n    return (3 * edge_length * math.sqrt(2) / 2)\ndef area_tetrahedron(edge_length):\n    \"\"\"Calculate the area of a regular tetrahedron.\"\"\"\n    side_length = side_length(edge_length)\n    return (math.sqrt(3) / 4) * side_length ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_rotations):\n    \"\"\"\n    Rotates given list by specified number of items to the right.\n\n    :param lst: List to be rotated\n    :param num_rotations: Number of items to rotate the list\n    :return: Rotated list\n    \"\"\"\n    return lst[-num_rotations:] + lst[:-num_rotations]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    words = string.split()\n    result = [word.capitalize() if word.isalpha() else word for word in words]\n    return ' '.join(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PythonProgrammingExamples"]], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sort a given list of strings numerically.\n    \"\"\"\n    return sorted(lst, key=lambda x: int(x) if x.isdigit() else int(x)*-1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["4", "12", "45", "7", "0", "100", "200", "-12", "-500"]]], "plus_fail_tests": [[["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]]]}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def is_divisible_by_digits(num):\n    \"\"\"\n    Check if a number is divisible by every digit it contains.\n    \"\"\"\n    num_str = str(num)\n    for digit in set(num_str):\n        if num % int(digit) != 0:\n            return False\n    return True\ndef divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range that are divisible by every digit they contain.\n    \"\"\"\n    return list(filter(lambda x: is_divisible_by_digits(x), range(startnum, endnum+1)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(my_list, my_tuple):\n    \"\"\"\n    Adds the given tuple to the given list.\n    \"\"\"\n    my_list.extend(my_tuple)\n    return my_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number.\n\n    :param int n: The position of the number in the sequence.\n    :return: The nth Jacobsthal number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Calculate the square of 2n+1\n    square = (2 * (2 * n + 1) ** 2)\n\n    # Check if the last digit of the square is 0, 1, 4, or 5\n    last_digit = square % 10\n\n    # Return the nth Jacobsthal number based on the last digit\n    if last_digit in (0, 1):\n        return int(square ** 0.5)\n    elif last_digit == 4:\n        return int(square ** 0.5 * 2) + 1\n    else:\n        raise ValueError(\"Invalid last digit.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def is_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        parent = i\n        left_child = 2 * parent + 1\n        right_child = 2 * parent + 2\n\n        if left_child < n and arr[parent] > arr[left_child]:\n            return False\n\n        if right_child < n and arr[parent] > arr[right_child]:\n            return False\ncheck_min_heap = lambda arr: is_min_heap(arr)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Find common elements from three lists at the same index.\n\n    :param l1: list of length n\n    :param l2: list of length n\n    :param l3: list of length n\n    :return: list of common elements at the same index\n    \"\"\"\n    common = [None] * len(l1)\n    indices = set()\n\n    for i in range(len(l1)):\n        if l1[i] in (l2[i], l3[i]) and i not in indices:\n            common[i] = l1[i]\n            indices.add(i)\n\n    return list(filter(lambda x: x is not None, common))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12]]]}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    # Check if the list has less than 2 elements\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least 2 elements\")\n\n    # Find the smallest number\n    smallest = min(numbers)\n\n    # Filter out the smallest number and find the second smallest\n    second_smallest = min(filter(lambda x: x != smallest, numbers))\n\n    return second_smallest", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[]]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(tuples, k):\n    # Sort tuples based on the second element in ascending order\n    tuples.sort(key=lambda x: x[1])\n    \n    # Return the first k tuples\n    return tuples[:k]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "import re\ndef is_decimal(n):\n    \"\"\"\n    Checks if a given string is a decimal number with a precision of 2.\n    \"\"\"\n    pattern = re.compile(r'^[+-]?\\d+(\\.\\d{1,2})?$')\n    return bool(pattern.match(n))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "import itertools\ndef count_reverse_pairs(string_list):\n    \"\"\"\n    Count the number of pairs of reverse strings in the given list.\n    \"\"\"\n    return len([(i, j) for i, j in itertools.combinations(string_list, 2) if i == j[::-1]])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(input_list):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    \"\"\"\n    sublists = set()\n    result = {}\n    for sublist in input_list:\n        sublists.add(tuple(sublist))\n\n    for sublist in sublists:\n        result[sublist] = input_list.count(tuple(sublist))\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]]], "plus_fail_tests": [[[[]]]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    :param numbers: List of numbers\n    :return: True if the list contains only one distinct element, False otherwise\n    \"\"\"\n    if len(numbers) == 1:\n        return True\n\n    return len(numbers) == len(set(numbers))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 1]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, diff):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array,\n    such that the difference equals to the provided value.\n\n    :param arr: List of numbers\n    :param diff: Desired difference\n    :return: A tuple of two numbers that have the difference\n    \"\"\"\n\n    # Use a dictionary to store numbers as keys and their indices as values\n    num_indices = {num: i for i, num in enumerate(arr)}\n\n    # Iterate through the array to find the pair of numbers with the desired difference\n    for num1 in arr:\n        num2 = num1 + diff\n        if num2 in num_indices and num_indices[num2] != num_indices[num1]:\n            return (num1, num2)\n\n    # If no pair is found, raise an AssertionError\n    raise AssertionError(f\"No pair of numbers in the array with a difference of {diff} found.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 3, 19, 18, 25], 6]], "plus_fail_tests": [[[15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 25], 12]]}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    Function to count the number of digits in a given string.\n    \"\"\"\n    return len(list(filter(str.isdigit, string)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Checks if a number is polite. A polite number is a positive integer n such that:\n    1. Its digits are in non-decreasing order.\n    2. The difference between any two adjacent digits is less than or equal to n.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be a positive integer\")\n\n    digits = list(str(n).replace(\"-\", \"\"))\n    digits.sort()\n\n    if len(digits) > len(str(n)):\n        raise ValueError(\"Input should be a single digit number\")\n\n    for i in range(len(digits) - 1):\n        if int(digits[i + 1]) - int(digits[i]) > n:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(input_list):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    if not input_list:\n        return []\n    return list(zip(input_list, input_list[1:])) + [(input_list[-1], None)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 3, 4, 4, 5]]], "plus_fail_tests": [[[1]]]}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    \"\"\"\n    Function to count the number of pairs in a list whose sum equals the given sum.\n\n    :param numbers: List of numbers\n    :param sum: Desired sum of pairs\n    :return: Number of pairs whose sum equals the given sum\n    \"\"\"\n    return len([pair for pair in zip(numbers, numbers[1:]) if sum == (pair[0] + pair[1])]) + \\\n           len([num for num in numbers if sum - num in numbers])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 1, 1], 2]], "plus_fail_tests": [[[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 8]]}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def is_expression_balanced(expression):\n    stack = []\n    opening_symbols = \"([{\"\n    closing_symbols = \")]}\"\n\n    for symbol in expression:\n        if symbol in opening_symbols:\n            stack.append(symbol)\n        elif symbol in closing_symbols:\n            if not stack or stack.pop() != opening_symbols[closing_symbols.index(symbol)]:\n                return False\n\n    return not stack\ndef check_expression(expression):\n    assert type(expression) == str, \"Expression should be a string\"\n    return is_expression_balanced(expression)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    \"\"\"\n    Returns the difference between two lists.\n    \"\"\"\n    return list(set(list1) - set(list2)) + list(set(list2) - set(list1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [(x - 1, y), (x, y - 1), (x - 1, y - 1), (x + 1, y), (x, y + 1), (x + 1, y + 1), (x - 1, y + 1), (x + 1, y - 1), (x - 1, y - 1)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return \" \".join(filtered_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(numbers):\n    \"\"\"\n    Checks if every odd index of the given list contains an odd number.\n\n    :param numbers: A list of numbers\n    :return: A boolean value indicating if every odd index contains an odd number\n    \"\"\"\n    for i in range(len(numbers)):\n        if i % 2 != 0 and numbers[i] % 2 == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(input_list):\n    \"\"\"\n    Function to pack consecutive duplicates of given list elements into sublists.\n    \"\"\"\n    output_list = []\n    current_element = input_list[0]\n    current_sublist = [current_element]\n\n    for element in input_list[1:]:\n        if element == current_element:\n            current_sublist.append(element)\n        else:\n            output_list.append(current_sublist)\n            current_sublist = [element]\n\n    output_list.append(current_sublist)\n\n    return output_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]], "plus_fail_tests": [[[2, 5, 3, 1, 1, 0, 4, 4, 2, 3, 3]]]}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(numbers):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_numbers = set(numbers)  # Convert list to a set to remove duplicates\n    sum_of_unique_numbers = sum(unique_numbers)  # Calculate sum of unique numbers\n    return sum_of_unique_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "import math\ndef count_divisors(n):\n    \"\"\"\n    Function to calculate the count of divisors of a given number.\n    \"\"\"\n    count = 1\n    i = 1\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            count += 1\n            if i != int(n / i):\n                count += 1\n        i += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1]]}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Function to find the sum of all odd length subarrays in a given list.\n\n    :param arr: List of integers\n    :return: Sum of all odd length subarrays\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if (j - i) % 2 != 0:\n                subarray = arr[i:j]\n                total += sum(subarray)\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    \"\"\"\n    Function to find the product of the first even and odd number in a given list.\n    \"\"\"\n    even, odd = None, None\n    for num in numbers:\n        if even is None and num % 2 == 0:\n            even = num\n        elif odd is None and num % 2 != 0:\n            odd = num\n            break\n\n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n    return even * odd", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 4, 1, 6, 8]]], "plus_fail_tests": [[[1, 2, -2, 3, -3, -3]]]}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    \"\"\"\n    Returns True if the text matches the pattern \"a followed by three b's\", False otherwise.\n    \"\"\"\n    if len(text) < 3 or text[0] != 'a':\n        return False\n    if text[1:4] != 'bbb':\n        return False\n    return True", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["caacabbbba"]], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[7, true, 3, 6], true]]}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str: str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n    \"\"\"\n    tuple_elements = tuple(map(int, tuple_str[1:-1].split(', ')))\n    return tuple(tuple_elements)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((7, 8, 9)"]]}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(string: str, list_: List[str]) -> Tuple[str, ...]:\n    \"\"\"\n    Create a new tuple from a given string and list.\n\n    :param string: A string to be the first element of the tuple.\n    :param list_: A list to be the remaining elements of the tuple.\n    :return: A tuple with the given string as the first element and list elements as the rest.\n    \"\"\"\n    return (string, *list_)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, target_sum):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list with the given sum.\n\n    :param arr: List of integers\n    :param target_sum: Target sum of the sublist\n    :return: The sum of the largest contiguous sublist\n    \"\"\"\n    current_sum = 0\n    start = 0\n    max_sum = 0\n\n    while current_sum < target_sum:\n        current_sum += arr[start % len(arr)]\n        start += 1\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # If the sum of the last sublist is greater than the target sum, we need to adjust the end of the sublist\n    if max_sum >= target_sum:\n        end = start\n        while end < len(arr) and arr[end] + current_sum >= target_sum:\n            current_sum += arr[end]\n            end += 1\n\n        return sum(arr[start:end])\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-2, -3, 4, -1, -2, 1, 5, -3], 8]], "plus_fail_tests": [[[-10, -5, -3, -2, -1], 5]]}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(input_tuple):\n    output_tuple = ()\n    for element in input_tuple:\n        if isinstance(element, tuple):\n            output_tuple += tuple(filter(lambda x: x not in output_tuple, element))\n            output_tuple += (tuple(filter(lambda x: x != element, input_tuple))[input_tuple.index(element):]) if element in input_tuple else ()\n        else:\n            output_tuple += (element,)\n    return output_tuple", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, [4, 6], 10]]], "plus_fail_tests": [[[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3]], 4]]]}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(numbers):\n    \"\"\"\n    Checks if every even index of a given list contains an even number.\n\n    :param numbers: A list of integers.\n    :return: A boolean value.\n    \"\"\"\n    for i in range(0, len(numbers), 2):\n        if numbers[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(input_list):\n    \"\"\"\n    Function to count the number of lists in a given list.\n    \"\"\"\n    return len(input_list)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of a target element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "def text_starta_endb(text):\n    \"\"\"\n    Function that checks if a given string starts with 'a' and ends with 'b'.\n\n    :param text: str\n    :return: bool\n    \"\"\"\n    return text.startswith('a') and text.endswith('b')", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Function to rotate left bits of a given number by d bits.\n    Assumes the number is 32-bit.\n    \"\"\"\n    # Calculate the number of bits to shift\n    shift = d % 32\n\n    # Mask off the rightmost bits to be rotated\n    mask = (1 << shift) - 1\n\n    # Perform the rotation using bitwise operators\n    rotated = (num << shift) | (num & mask)\n\n    # Remove the unwanted bits by masking with all 1s\n    return rotated & ((1 << 32) - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 2]], "plus_fail_tests": [[1, 1]]}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_string):\n    \"\"\"\n    Function to remove all whitespaces from a given string.\n    \"\"\"\n    return input_string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(x, y, z):\n    \"\"\"\n    Function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and (x == z or y == z):\n        count += 1\n    if count < 2 and (x == z or y == z):\n        count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 1, 1]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt = int(n ** 0.5)\n    return sqrt * sqrt == n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Checks if the product of numbers in a list is even.\n\n    :param numbers: List of numbers\n    :return: True if the product is even, False otherwise\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Find the maximum run of uppercase characters in the given string.\n    \"\"\"\n    current_run_length, max_run_length = 0, 0\n    for char in string:\n        if char.isupper():\n            current_run_length += 1\n            max_run_length = max(max_run_length, current_run_length)\n        else:\n            current_run_length = 0\n    return max_run_length", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum, max_list = lst[0], lst[0]\n    for sublist in lst:\n        s = sum(sublist)\n        if s > sum(max_list):\n            max_sum, max_list = s, sublist\n    return max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Function to find the sum of all odd natural numbers within the given range.\n    \"\"\"\n    return sum(range(l, r+1, 2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 5]], "plus_fail_tests": [[100, 100000]]}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "from itertools import combinations\ndef find_combinations(tuples):\n    \"\"\"\n    Find combinations of sums from given tuple list.\n\n    :param tuples: list of tuples\n    :return: list of tuples representing combinations of sums\n    \"\"\"\n    total_sum = sum(sum(tup) for tup in tuples)\n    return list(combinations(range(total_sum + 1), 2))\n\n    # Filter out invalid combinations and keep only those that can be formed by summing tuples\n    valid_combinations = [(x, y) for x, y in combinations(range(total_sum + 1), 2) if sum(tupl[0] for tupl in tuples) >= x and sum(tupl[1] for tupl in tuples) >= y]\n    return valid_combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[100, 200], [300, 400], [500, 600], [700, 800]]]]}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    return all(elem1 <= elem2 for elem1, elem2 in zip(tuple1, tuple2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3], [2, 3, 4]]], "plus_fail_tests": [[[3, 7, 11, 15, 19], [2, 6, 10, 14, 18]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    num = 1\n    while num <= n:\n        if num % 2 != 0:\n            total += num ** 4\n            num += 1\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[2]]}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    total_sum = sum(range(1, n + 1))\n    average = total_sum / n\n    return total_sum, average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}