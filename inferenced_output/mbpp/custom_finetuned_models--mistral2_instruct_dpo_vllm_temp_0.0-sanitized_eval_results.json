{"date": "2024-08-09 20:34", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/16": [{"task_id": "Mbpp/16", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrices(matrices):\n    matrices = [list(map(sum, zip(*matrix))) for matrix in matrices]  # Transpose and sum the rows of each matrix\n    matrices = sorted(matrices)\n    result = [list(map(list, zip(*matrices[i]))) for i in range(len(matrices))]  # Transpose the sorted rows back to columns\n    return [result[i] for i in range(len(matrices))]\ndef sort_matrix(matrix):\n    return sort_matrices([matrix])[0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]], "plus_fail_tests": [[[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4]]]]}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Returns the n largest integers from a given list of numbers, in descending order.\n    \"\"\"\n    return heapq.nlargest(n, numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(length, width, height):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n\n    :param length: The length of the base of the triangular part of the prism (in meters).\n    :param width: The width of the base of the triangular part of the prism (in meters).\n    :param height: The height of the prism (in meters).\n    :return: The volume of the triangular prism (in cubic meters).\n    \"\"\"\n    # Calculate the area of the base of the triangular part of the prism\n    base_area = 0.5 * length * width\n\n    # Calculate the volume of the triangular part of the prism\n    volume_triangle = base_area\n\n    # Calculate the volume of the rectangular part of the prism\n    volume_rectangle = length * width * height\n\n    # Calculate the total volume of the triangular prism\n    total_volume = volume_triangle + volume_rectangle\n\n    return total_volume", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 8, 6]], "plus_fail_tests": [[100, 50, 10]]}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = int(str(num)[::-1])\n    return num < 2 * reversed_num - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[23]], "plus_fail_tests": [[1]]}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(str1):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    if len(str1) <= 1:\n        return 1\n\n    return len(str1) if len(str1) == len(set(str1)) else gcd(len(str1), len(str1.find(str1[0], len(str1) - len(str1[0:1])).__code__.__co_size))\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of two numbers using Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aaaa"]], "plus_fail_tests": [["aaaaaaaaaaaaaaaab"]]}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Returns a set of elements that are common in both given lists.\n    \"\"\"\n    return set(list1) & set(list2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    return filter(lambda x: x not in string2, string1).decode('ascii')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["probasscurve", "pros"]], "plus_fail_tests": [["The quick brown fox jumps over the lazy dog", "fox"]]}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Returns True if the given array contains any duplicate elements, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    A simple sorting algorithm based on the comb method.\n    \"\"\"\n    n = len(lst)\n    gap = int(0.80 * n ** 0.5)\n    while gap > 1:\n        for i in range(n):\n            temp = lst[i]\n            j = i\n            while j >= 0 and lst[j] > temp:\n                lst[j + gap] = lst[j]\n                j -= gap\n            lst[j] = temp\n        gap //= 1.3\n    return lst", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[5, 15, 37, 25, 79]]], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Function to count the number of positive numbers in a given list.\n\n    :param numbers: List of numbers\n    :return: An integer representing the count of positive numbers in the list\n    \"\"\"\n    return sum(1 for num in numbers if num > 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(pairs):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    pairs.sort(key=lambda x: x[0])  # Sort the list based on the first element of each pair\n    first, _ = pairs[-1]  # The last pair in the sorted list has the smallest first element\n    return (min(p[0] for p in pairs) - first) if pairs else None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    This function checks if the given two integers have opposite signs.\n\n    :param num1: An integer.\n    :param num2: An integer.\n    :return: A boolean value.\n    \"\"\"\n    return num1 * num2 < 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(tuples):\n    \"\"\"\n    Sort a list of tuples based on the second value of each tuple.\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(main_list, sublist):\n    \"\"\"\n    Checks if sublist is a contiguous subsequence of main_list.\n    \"\"\"\n    return all(x in main_list for x in sublist)", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[2, 4, 3, 5, 7], [3, 7]]], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "from math import comb\ndef bell_number(n):\n    \"\"\"\n    Calculate the number of ways to partition a set of Bell numbers with n elements.\n    \"\"\"\n    return sum(comb(2*i-1, i) for i in range(min(n, 11)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0]]}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a given list.\n\n    :param numbers: List of numbers\n    :return: The smallest number in the list\n    \"\"\"\n    return min(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(input_list):\n    \"\"\"\n    Function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten_and_sum(input_list):\n        total = 0\n        for item in input_list:\n            if isinstance(item, list):\n                total += recursive_list_sum(item)\n            else:\n                total += int(item)\n        return total\n\n    if isinstance(input_list[0], int):\n        return flatten_and_sum(input_list)\n    else:\n        return flatten_and_sum(input_list)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word: str) -> bool:\n    \"\"\"\n    Check if the length of the given word is odd.\n\n    :param word: The input string\n    :return: A boolean value indicating if the length of the word is odd or not\n    \"\"\"\n    return len(word) % 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(numbers):\n    \"\"\"\n    Returns a dictionary with the frequency of each element in the given list.\n    \"\"\"\n    return {num: numbers.count(num) for num in set(numbers)}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check if the given number is undulating (1s and 2s digits alternate).\n    \"\"\"\n    prev_digit = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 != (prev_digit % 2):\n            if prev_digit != 0:\n                return False\n            prev_digit = int(digit)\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1212121]], "plus_fail_tests": [[2121212121212121]]}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \"\"\"\n    return (0.25 * (3 * n * (n + 1)) )", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[10]]}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in given list of words.\n\n    :param words: list of strings\n    :return: int, the length of the longest word\n    \"\"\"\n    return max(map(len, words))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere with the given radius.\n    \"\"\"\n    return (4.0/3.0) * math.pi * (radius**3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    \"\"\"\n    Given a list of tuples, returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return (x[0] for x in tuples)[min(map(lambda x: x[1], tuples), key=min)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Rash", 143], ["Manjeet", 200], ["Varsha", 100]]]], "plus_fail_tests": [[[["John", 100]]]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(base, exponent):\n    \"\"\"\n    Calculate the value of base raised to the power of exponent.\n    \"\"\"\n    return base ** exponent", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent as a string with no leading zeros.\n    \"\"\"\n    return bin(abs(n))[2:] if n else '0'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def quickselect(arr, k):\n    \"\"\"\n    Find the k-th smallest element in a given array using the QuickSelect algorithm.\n    \"\"\"\n    def partition(arr, low, high):\n        \"\"\"\n        Partition function for QuickSelect algorithm.\n        \"\"\"\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    def find_kth(arr, low, high, k):\n        \"\"\"\n        Recursive helper function for QuickSelect algorithm.\n        \"\"\"\n        while True:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k - 1:\n                return arr[k - 1]\n            elif pivot_index < k - 1:\n                low = pivot_index + 1\n            else:\n                high = pivot_index - 1\n\n    return find_kth(arr, 0, len(arr) - 1, k)\ndef kth_element(arr, k):\n    \"\"\"\n    Find the k-th element in a given array using 1-based indexing.\n    \"\"\"\n    return quickselect(arr, k)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12, 3, 5, 7, 19], 2]], "plus_fail_tests": [[[100, 99, 98, 97, 96], 5]]}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Function to append the given list to the given tuples.\n    \"\"\"\n    return tpl + lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 6, 7], [9, 10]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    # Find common elements in all lists at the flat level\n    flat_lists = [item for sublist in nested_lists for item in sublist]\n    common = set()\n    for element in (set(flat_lists) & set(nested_lists[0])):\n        if all(element in sublist for sublist in nested_lists):\n            common.add(element)\n    return common", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def count_odd_equivalents(binary_string, rotations):\n    \"\"\"\n    This function calculates the number of odd binary numbers obtained by rotating the given binary string the given number of times.\n\n    :param binary_string: A binary string\n    :param rotations: An integer representing the number of rotations\n    :return: An integer representing the number of odd binary numbers obtained by rotating the binary string the given number of times\n    \"\"\"\n\n    def get_binary_num(binary_string):\n        \"\"\"\n        This inner function converts a binary string to an integer\n        :param binary_string: A binary string\n        :return: An integer representing the binary number\n        \"\"\"\n        return int(binary_string, 2)\n\n    binary_num = get_binary_num(binary_string)\n    odd_count = 0\n\n    for _ in range(rotations):\n        binary_num, carry = divmod(binary_num << 1, 2 ** 5)  # Rotate left and check for carry\n        if binary_num & 1:  # Check if the least significant bit is odd\n            odd_count += 1\n\n    return odd_count\ndef odd_Equivalent(binary_string, rotations):\n    \"\"\"\n    This function is the public interface for the problem statement\n    :param binary_string: A binary string\n    :param rotations: An integer representing the number of rotations\n    :return: An integer representing the number of odd binary numbers obtained by rotating the binary string the given number of times\n    \"\"\"\n    return count_odd_equivalents(binary_string, rotations)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["011001", 6]], "plus_fail_tests": [["1100110011", 5]]}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    This function checks if two numbers differ at one bit position only.\n    \"\"\"\n    # XOR operation to find the bit difference between two numbers\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the XOR result using the population count algorithm\n    count_bits = 0\n    while xor_result:\n        xor_result &= (xor_result - 1)\n        count_bits += 1\n\n    # If the count of set bits is equal to 1, then the numbers differ at one bit position only\n    return count_bits == 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10, 10]]}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(input_string):\n    \"\"\"\n    This function takes a string as an argument and returns a list of strings,\n    where the list elements are the words in the input string, split by space character.\n    \"\"\"\n    return input_string.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(num_tuple):\n    \"\"\"\n    Converts a given tuple of positive integers into a single integer.\n    \"\"\"\n    return int(''.join(map(str, num_tuple)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples):\n    max_product = float('-inf')\n    for pair in tuples:\n        product = float(1) * (pair[0] * pair[1])\n        max_product = max(max_product, abs(product))\n    return max_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def is_amicable(n):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    sum_of_divisors = sum(x for x in divisors(n) if x < n)\n    return n == sum(divisors(sum_of_divisors)[0])\ndef divisors(n):\n    \"\"\"\n    Generate all divisors of a given number.\n    \"\"\"\n    sqrt_n = int(n ** 0.5) + 1\n    low = 1\n    high = sqrt_n\n    divisors = [1, n]\n\n    while low <= high:\n        if n % low == 0:\n            divisors.append(low)\n            if low != n // low:\n                divisors += [n // low]\n            return divisors\n        low += 1\ndef amicable_numbers_sum(up_to):\n    \"\"\"\n    Sum all amicable numbers up to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for n in range(1, up_to + 1):\n        if is_amicable(n):\n            amicable_numbers.append(n)\n    return sum(amicable_numbers)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[999]], "plus_fail_tests": [[10000]]}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import cmath\ndef angle_complex(z):\n    \"\"\"\n    Calculates the angle (in radians) of a complex number.\n    \"\"\"\n    return cmath.phase(z)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(x, y):\n    \"\"\"\n    Function to multiply two integers.\n    \"\"\"\n    return x * y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, text_string):\n    \"\"\"\n    :param n: int, minimum length of words to be returned\n    :param text_string: str, a string containing multiple words separated by spaces\n    :return: list, a list of words from the given string that have length greater than n\n    \"\"\"\n    words = text_string.split()\n    return [word for word in words if len(word) > n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(arr):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n    \"\"\"\n    from collections import Counter\n\n    counter = Counter(arr)\n    max_freq = max(counter.values())\n    return counter.most_common(-1 if len(counter) == 1 else 0)[0][0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]]}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    i = 0\n    j = len(s) - 1\n\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n\n    return s", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["USA"]], "plus_fail_tests": [["FIswIZeBBCBDCBDFCBCDFCCGBCDCBDFGCBCDFCFDBFCCDCBDFCD"]]}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n    \"\"\"\n    return (3 * (2 * n) ** 2) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import math\nimport unittest\ndef zero_count(nums):\n    \"\"\"\n    Function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = sum(1 for num in nums if num == 0)\n    non_zero_count = len(nums) - zero_count\n    ratio = zero_count / len(nums) if len(nums) > 0 else 0\n    return ratio", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if a given number can be represented as a sum of non-zero powers of 2.\n    \"\"\"\n    def dp(n, power=0, sum_so_far=0):\n        \"\"\"\n        Memoized helper function to check if n can be represented as sum of non-zero powers of 2.\n        \"\"\"\n        if n == 0:\n            return True\n        if (power < 0 or (1 << power) > n) and sum_so_far != n:\n            return False\n        if sum_so_far == n:\n            return True\n        if dp:  # Memoization\n            return dp[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[123456789]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle with the given radius.\n    \"\"\"\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    def flip(arr, i):\n        return arr[:i] + [x if x in (arr[i], -x) else -x for x in arr[i:][::-1]] + arr[i+1:]\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] != i:\n            arr = flip(arr, i)\n            arr = flip(arr, i - arr[i].__index__(i))\n            break\n    return arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 79, 25, 38, 69]]], "plus_fail_tests": [[[54, 28, 91, 12, 78, 37, 66, 42, 84, 59]]]}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n    \"\"\"\n    return max(abs(x - y) for x in arr for y in arr if x != y)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1]]]}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of a and b using Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\ndef find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple of integers x and y that satisfy the equation ax + by = n,\n    or returns None if no solution exists.\n    \"\"\"\n    gcd = find_gcd(abs(a), abs(b))\n    if gcd > 1:\n        x = abs(n) // gcd * (a // gcd if a >= 0 else -(b // gcd))\n        y = abs(n) // gcd * (b // gcd if b >= 0 else -(a // gcd))\n        return x if a >= 0 and b >= 0 else (-x, y)\n\n    if abs(a) * n % abs(b) == 0:\n        if a >= 0 and b >= 0:\n            x = n // b\n            return x, n // a if a != 0 else (x, 0)\n\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 3, 7]], "plus_fail_tests": [[100, 50, 4000]]}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(s):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in s:\n        index = ord(char.lower()) - ord('a')\n        if s.index(char) != index:\n            continue\n        count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["TheQuickBrownFoxJumpsOverTheLazyDog"]]}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(list_to_filter, elements_to_remove):\n    \"\"\"\n    Function to remove all elements from list_to_filter that are present in elements_to_remove.\n\n    :param list_to_filter: The list from which elements need to be removed.\n    :param elements_to_remove: List of elements to be removed from list_to_filter.\n    :return: List with all elements from list_to_filter that are not present in elements_to_remove.\n    \"\"\"\n\n    # Use list comprehension to create a new list with elements that are not in elements_to_remove\n    return [num for num in list_to_filter if num not in elements_to_remove]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    \"\"\"\n    Finds the number of pairs of integers in a list that xor to an even number.\n\n    :param nums: A list of integers\n    :return: An integer representing the number of pairs of integers in the list that xor to an even number\n    \"\"\"\n    count = 0\n    target = 0\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Iterate through the list, using two pointers to check pairs of numbers\n    for i in range(len(nums)):\n        # Find the complement of the target number (the number that xors to an even number to produce the current number)\n        complement = target ^ nums[i]\n\n        # Use binary search to find a number in the list that xors with the current number to produce an even number\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if (nums[mid] ^ nums[i]) & 1:  # Check if the xor result is odd\n                left += 1\n            else:\n                count += 1\n                break\n\n        # Update the target to the next even number\n        target += 2\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4, 7, 2, 1]]], "plus_fail_tests": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]]]}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "import math, numpy as np\ndef next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = int(np.log2(n) + 1) if np is not None else (1 << int(bin(int(math.ceil(math.log(n, 2)))[2:])))[0]\n    return int(power) ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[2]]}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "import math\ndef perimeter_pentagon(sides_length):\n    \"\"\"\n    Calculates the perimeter of a regular pentagon given the length of one of its sides.\n    \"\"\"\n    sides = 5\n    side = sides_length\n    perimeter = sides * side * (1 + 2 * math.tan(math.pi / 5) ** 2 / 5)\n    return round(perimeter, 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[-10]]}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(nums, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    :param nums: List of numbers\n    :param start: Index of the start of the range\n    :param end: Index of the end of the range (exclusive)\n    :return: The sum of numbers in the range\n    \"\"\"\n    return sum(nums[i:] if i >= start else nums[:start+end-i] for i in range(start, end))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10]], "plus_fail_tests": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 3, 7]]}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series: (n - 2*i) for i from 0 to n // 2\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer\")\n\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Returns the number of occurrences of a given number in a list.\n\n    Args:\n        lst (List[Any]): The input list.\n        num (Any): The number to search for in the list.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n    \"\"\"\n    return sum(1 for i in lst if i == num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_str):\n    \"\"\"\n    This function takes a string as an argument and returns a new string with characters at odd index values.\n    \"\"\"\n    output_str = ''\n    for index, char in enumerate(input_str):\n        if index % 2 != 0:\n            output_str += char\n    return output_str", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abcdef"]], "plus_fail_tests": [["abcdefghijklmnopqrstuvwxyz"]]}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, x):\n    \"\"\"\n    Function to check if an element is the majority element in a sorted array.\n\n    :param arr: Sorted array\n    :param n: Array length\n    :param x: Element to check\n    :return: True if x is the majority element, False otherwise\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    # Check if the count of the given element is more than n/2\n    return count > n // 2\narr = [1, 2, 3, 3, 3, 3, 10]\nn = len(arr)\nx = 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    return bin(abs(num))[2:].count('1')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(x, y, z):\n    \"\"\"\n    Finds the minimum of three numbers.\n    \"\"\"\n    return min(x, y, z)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Set all even-indexed bits of given number to 1.\n    \"\"\"\n    return num | (num << 1 & 0xAAAAAAAA) | (num & 0x55555555)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[20]], "plus_fail_tests": [[999999999]]}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(input_str, char):\n    \"\"\"\n    Replaces blank spaces in the input string with the given character and returns the new string.\n\n    :param input_str: The input string\n    :param char: The character to replace blank spaces with\n    :return: The new string with blank spaces replaced by the given character\n    \"\"\"\n    return input_str.replace(\" \", char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n    \"\"\"\n    return side_length ** 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(lst1, lst2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n\n    :param lst1: List to be modified.\n    :param lst2: List of elements to replace the last element with.\n    :return: Modified list with the last elements replaced.\n    \"\"\"\n    if len(lst1) < 1 or len(lst2) > len(lst1):\n        raise ValueError(\"First list should have at least one element, and the second list should have fewer elements than the first.\")\n\n    lst1[-1:] = lst2\n    return lst1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5], [1, 2, 3, 4, 5]]]}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(nums, n):\n    \"\"\"\n    Function that takes in a list and an integer n, and returns a list containing the n largest items from the list.\n    \"\"\"\n    return sorted(nums, reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate Eulerian number a(n, m) using the formula: a(n, m) = (2^(n-1) * (n-1)! * (prod of powers of primes p^(sum of (n/p - 1) for p|n and p > 1)) / (2^(m-1) * m! * (prod of powers of primes p^(sum of (n/p - 1) for p|m and p > 1)))\n    \"\"\"\n\n    def prime_powers_sum(n, primes):\n        \"\"\"\n        Calculate the sum of powers of primes dividing n.\n        \"\"\"\n        result = 0\n        for prime in primes:\n            while n % prime == 0:\n                result += (n // prime)\n                n //= prime\n            if n == 1:\n                break\n        return result\n\n    def factorial(n):\n        \"\"\"\n        Calculate factorial of a number.\n        \"\"\"\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\n    def is_prime(n):\n        \"\"\"\n        Check if a number is prime.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [2]\n    prime = 3\n    while len(primes) * 2 < n:\n        if is_prime(prime):\n            primes.append(prime)\n        prime += 2\n\n    eulerian = 0\n    eulerian += pow(2, n - 1) * factorial(n - 1)\n    prime_powers_n = prime_powers_sum(n, primes)\n    eulerian /= pow(2, m - 1) * factorial(m)\n    prime_powers_m = prime_powers_sum(m, primes)\n    eulerian *= pow(2, prime_powers_sum(n, primes) - prime_powers_m)\n\n    return int(eulerian)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tuple_input, element_X: any) -> int:\n    \"\"\"\n    A Python function that takes in a tuple and an element, and returns the count of occurrences of the element in the tuple.\n\n    :param tuple_input: A tuple of any type of elements\n    :param element_X: The element to be counted in the tuple\n    :return: The count of occurrences of the element in the tuple\n    \"\"\"\n    return tuple_input.count(element_X)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    m = len(s)\n    dp = [[0 for _ in range(m)] for _ in range(m)]\n\n    # Base case: single character palindromic subsequence\n    for i in range(m):\n        dp[i][i] = 1\n\n    # Length 2 palindromic subsequence\n    for i in range(m - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n\n    # Length > 2 palindromic subsequence\n    for sub_seq_len in range(3, m + 1):\n        for i in range(m):\n            j = i + sub_seq_len - 1\n            if s[i] == s[j] and sub_seq_len <= (m // 2 + 1):\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            elif s[i] == s[j]:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["TENS FOR TENS"]], "plus_fail_tests": [["NDZWBHEJKTPQGAOSLYCRMYEX"]]}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import numpy as np\ndef convert(complex_num):\n    \"\"\"\n    Converts a complex number to polar coordinates (r, theta).\n    \"\"\"\n    if not isinstance(complex_num, complex):\n        raise TypeError(\"Input must be a complex number\")\n\n    r = abs(complex_num)\n    theta = np.angle(complex_num, deg=True)\n\n    return r, theta", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["(1+2j)"]]}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, elem):\n    \"\"\"\n    Function that takes in a list and an element, and inserts the element before each element in the list.\n    \"\"\"\n    return [elem] + lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Black"], "c"]], "plus_fail_tests": [[[], "hello"]]}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    current = n\n    smaller = n - 1\n    \n    # Decrement current number until a smaller number is found\n    while current > smaller:\n        current = smaller\n        smaller -= 1\n        \n    return smaller", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[11]], "plus_fail_tests": [[-5]]}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function calculates the number of possible sequences of length n,\n    where each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return 1\n    count = 0\n    current = 1\n    while count < m ** (n - 1):\n        if current * 2 <= m and current * 2 ** (n - 1) <= m:\n            count += 1\n        current += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[100, 10]]}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Calculate the n-th star number using the formula: n! = n!*1! = n*(n-1)*(n-2)*...*1\n    The sum of digits in the n-th star number is the sum of digits in the product of digits from 1 to n.\n    \"\"\"\n\n    def factorial(n):\n        \"\"\"\n        Calculate the factorial of a given number.\n        \"\"\"\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    return sum(int(digit) for digit in str(factorial(int(n))) if digit.isdigit())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    def is_wieferich(a, b):\n        if (a ** 2 + a + 1) % b == 0:\n            return True\n        if (b ** 2 + b + 1) % a == 0:\n            return True\n        return False\n\n    def newman_wiel_candidate(n):\n        for a in range(1, int(3 * n / 4) + 1):\n            if a % 4 != 0 and is_wieferich(a, a + 2):\n                return a + 2\n        return -1\n\n    return newman_wiel_candidate(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, l):\n    \"\"\"\n    Takes in a list and an integer L, and returns a tuple of two lists where the first list has length L, and the second list contains the remaining elements of the input list.\n\n    :param lst: List to be split\n    :param l: Desired length of the first part of the list\n    :return: A tuple of two lists\n    \"\"\"\n    return (lst[:l], lst[l:])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(nums):\n    \"\"\"\n    Function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    index = 0\n    sum = 0\n    while index < len(nums):\n        if nums[index] % 2 == 0 and index % 2 == 0:\n            sum += nums[index]\n        index += 1 if index % 2 != 0 else 2\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_years):\n    \"\"\"\n    Calculate a dog's age in dog years based on the given human years.\n    \"\"\"\n    return human_years * 7 + 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[100]]}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \"\"\"\n    lateral_surface_area = 6 * (side_length ** 2)\n    return lateral_surface_area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    Returns a tuple with the second number first and the first number second.\n    \"\"\"\n    return (num2, num1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a given character.\n    \"\"\"\n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k) = n! / (k! * (n-k)!)\n    \"\"\"\n    if n < 0 or k < 0 or k > n:\n        return None\n    numerator = 1\n    for i in range(min(n, k), n+1):\n        numerator *= i\n    denominator = 1\n    for i in range(1, min(k+1, n-k+1)):\n        denominator *= i\n    return numerator // denominator\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Find the sum of even index binomial coefficients for nCi, where i is non-negative integer.\n    \"\"\"\n    if n < 0:\n        return None\n    sum = 0\n    for i in range(0, n, 2):\n        if i > n:\n            break\n        if i == 0 or i == n:\n            sum += 1\n        else:\n            sum += binomial_coefficient(n, i)\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[10]]}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    :param arr: List of integers representing the array.\n    :param k: Integer representing the number of times the array is repeated.\n    :param n: Integer representing the size of the original array.\n    :return: Integer representing the largest sum of a contiguous array in the modified array.\n    \"\"\"\n\n    # Calculate the size of the modified array\n    size_of_modified_array = len(arr) * k * n\n\n    # Initialize the table to store the sum of subarrays ending at that position\n    dp = [0] * (size_of_modified_array + 1)\n\n    # Initialize the current sum and maximum sum\n    current_sum = 0\n    max_sum = float('-inf')\n\n    # Fill the dp table in a bottom-up manner\n    for i in range(size_of_modified_array + 1):\n        dp[i] = current_sum\n        current_sum = max(current_sum + arr[i % len(arr)], 0)\n        max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 10, 20], 3, 2]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    :param radius: The radius of the base of the cylinder.\n    :param height: The height of the cylinder.\n    :return: The volume of the cylinder.\n    \"\"\"\n    return math.pi * (radius ** 2) * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n: int):\n    \"\"\"\n    Filters the given dictionary to only include entries with values greater than or equal to n.\n\n    :param dictionary: A dictionary.\n    :param n: An integer.\n    :return: A new dictionary with filtered entries.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value >= n}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in the given list are unique.\n\n    :param lst: List to check for unique elements\n    :return: True if all elements are unique, False otherwise\n    \"\"\"\n    if len(lst) < 2:\n        return True\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    max_len, max_lst = 0, []\n    for l in lst:\n        len_l = len(l)\n        if len_l > max_len:\n            max_len = len_l\n            max_lst = [l]\n        elif len_l == max_len:\n            max_lst.append(l)\n    return max_len, max_lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]]], "plus_fail_tests": [[[[1, 3, 5, 7, 9, 11], [2, 4, 6], [10, 12, 14, 16, 18, 20], [13, 15, 17, 19, 21]]]]}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def count_digits(num):\n    \"\"\"\n    Helper function to count the occurrences of each digit in a number.\n    \"\"\"\n    count = {i: num.count(i) for i in to_string(num)}\n    return dict(sorted(count.items()))\ndef to_string(num):\n    \"\"\"\n    Helper function to convert an integer to a string.\n    \"\"\"\n    return str(abs(num))\ndef validate(num):\n    \"\"\"\n    Function to check if the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = count_digits(num)\n    for digit, freq in digits.items():\n        if int(digit) > digit and freq > int(digit):\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1234]], "plus_fail_tests": [[9]]}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    \"\"\"\n    Checks whether a given string contains the 'a' character followed by exactly two or three 'b' characters.\n    \"\"\"\n    return 'ab' in text or text.startswith('aba') or text.startswith('abbb')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(num1, num2):\n    \"\"\"\n    This function returns the quotient of two numbers rounded down to the nearest integer.\n    \"\"\"\n    return int(num1 / num2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-1, 2]]}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n\n    def merge_sort(arr, low, high):\n        nonlocal count\n        if low < high:\n            mid = (low + high) // 2\n            merge_sort(arr, low, mid)\n            merge_sort(arr, mid + 1, high)\n            merge(arr, low, mid, high)\n\n    def merge(arr, low, mid, high):\n        nonlocal count\n        n1 = mid - low + 1\n        n2 = high - mid\n\n        left = [0] * n1\n        right = [0] * n2\n\n        for i in range(0, n1):\n            left[i] = arr[low + i]\n        for j in range(0, n2):\n            right[j] = arr[mid + 1 + j]\n\n        i = 0\n        j = 0\n        k = low\n\n        while i < n1 and j < n2:\n            if left[i] <= right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                count += n1 - i\n                j += 1\n                i = n1\n            k += 1\n\n        while i < n1:\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < n2:\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n    merge_sort(arr, 0, len(arr) - 1)\n    return int(count)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 20, 6, 4, 5]]], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(hypotenuse, side_length):\n    \"\"\"\n    Calculates the length of the third side of a right angled triangle, given the lengths of two sides.\n    \"\"\"\n    if side_length ** 2 + (hypotenuse ** 2) > 0:\n        return math.sqrt(hypotenuse ** 2 - side_length ** 2)\n    else:\n        raise ValueError(\"Input should be two sides of a right angled triangle.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7, 8]], "plus_fail_tests": [[2.5, 3.5]]}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    \"\"\"\n    Calculate the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    def bin_seq_sum(seq):\n        \"\"\"\n        Calculate the sum of binary sequence.\n        \"\"\"\n        return sum(int(bit) for bit in seq)\n\n    def generate_binary_seqs(n):\n        \"\"\"\n        Generate all binary sequences of length 2n.\n        \"\"\"\n        return ['{0:0{}b}'.format(i, 2 * n) for i in range(2 ** (2 * n))]\n\n    binary_seqs = generate_binary_seqs(n)\n    count = 0\n    for seq in binary_seqs:\n        if bin_seq_sum(seq[:n]) == bin_seq_sum(seq[n:]):\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[4]]}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    \"\"\"\n    Finds the specified number 'n' of largest products from two given lists, selecting one factor from each list.\n\n    :param list1: List of numbers for the first factor\n    :param list2: List of numbers for the second factor\n    :param n: Number of largest products to find\n    :return: List of 'n' largest products\n    \"\"\"\n\n    # Combine the two lists into a list of tuples, each containing one element from list1 and list2\n    product_list = list(map(lambda x, y: (x, y), list1, list2))\n\n    # Sort the list of tuples in descending order based on their product\n    product_list.sort(key=lambda x: x[0]*x[1], reverse=True)\n\n    # Return the first 'n' tuples (i.e., the first 'n' largest products)\n    return [list(i) for i in product_list[:n]]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], "plus_fail_tests": [[[61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], true]]}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words_list):\n    \"\"\"\n    Returns a tuple containing the first two words from the given list that start with the letter 'p'.\n\n    :param words_list: A list of strings\n    :return: A tuple of two strings\n    \"\"\"\n    words = [word for word in words_list if word.split() [0].isalpha() and word.split()[0][0] == 'p']\n    return tuple(words[:2]) if words else (words[0] if words else None, None)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python PHP", "Java JavaScript", "c c++"]]], "plus_fail_tests": [[["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]]]}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    \"\"\"\n    Calculate the maximum aggregate (sum of second elements) from the list of tuples.\n    \"\"\"\n    return max(tuples, key=lambda x: x[1])[0], sum(x[1] for x in tuples)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Juan Whelan", 90], ["Sabah Colley", 88], ["Peter Nichols", 7], ["Juan Whelan", 122], ["Sabah Colley", 84]]]], "plus_fail_tests": [[[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40]]]]}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    return max(lst, key=lambda x: type(x) == type(3) and x or x[0] if isinstance(x, list) else x)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[[1, "2", true, 3.14, ["a", "b"], [5, 6, 7], {"8": "eight", "9": "nine"}, "Python", 10, 11, 12]]]}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function sets the left most unset bit in the given number.\n    \"\"\"\n    # Calculate the position of the left most unset bit using right shift and bitwise AND with -1\n    left_most_unset_bit_position = (num & ~(num - 1)) | 1\n    \n    # Return the number with the left most unset bit set\n    return int(bin(left_most_unset_bit_position)[2:] + '0'*(6-len(bin(num)[2:]))) # Pad the left with zeros to match the length of the original number", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[125]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(x, y):\n    \"\"\"\n    This function takes two numbers as arguments and returns the maximum of them.\n    \"\"\"\n    return max(x, y)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculates the volume of a cone with given radius and height.\n    :param radius: The radius of the base of the cone.\n    :param height: The height of the cone.\n    :return: The volume of the cone.\n    \"\"\"\n    # Calculate the volume using the formula: V = (1/3) * \u03c0 * r^2 * h\n    volume = (1.0 / 3.0) * math.pi * (radius ** 2) * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, i, k, j):\n    \"\"\"\n    Find the maximum sum of an increasing subsequence from prefix index i until ith index and also including the given kth element which is after i (k > i).\n\n    Args:\n        arr (List[int]): A list of integers.\n        i (int): The index of the prefix in the list.\n        k (int): The index of the given element in the list, which is after i.\n        j (int): The index of the kth element in the list.\n\n    Returns:\n        int: The maximum sum of an increasing subsequence from index i to index j in the list.\n    \"\"\"\n\n    # Initialize the dp array with the first element of the subsequence being the given element k\n    dp = [k]\n    curr_sum = k\n\n    # Iterate through the list from the prefix index i to the index j - 1\n    for index in range(i, j):\n        if arr[index] > dp[-1]:\n            dp.append(arr[index])\n            curr_sum += arr[index]\n        else:\n            dp[-1] = arr[index]\n            curr_sum = dp[-1]\n\n    # The maximum sum of the increasing subsequence is the sum of the last element in dp and the current sum\n    return sum(dp)\narr = [1, 101, 2, 3, 100, 4, 5]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], "plus_fail_tests": [[[5, 2, 4, 1, 3, 6], 6, 2, 3]]}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flattens a given nested list structure.\n    \"\"\"\n    flat_list = []\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n                # Yield items from the nested list one by one\n                for i in item:\n                    yield i\n            else:\n                yield item\n    for i in flatten(nested_list):\n        flat_list.append(i)\n    return flat_list", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while (2 ** (power + 1) <= n):\n        power += 1\n    return 2 ** power", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n  if n < 0:\n    raise ValueError(\"Input should be non-negative integer\")\n\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    a, b = 0, 1\n    for _ in range(2, n+1):\n      a, b = b, a + b\n    return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[15]]}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(ids, names, scores):\n    \"\"\"\n    Converts three input lists into a list of nested dictionaries.\n\n    :param ids: list of unique identifiers\n    :param names: list of corresponding names\n    :param scores: list of corresponding scores\n    :return: list of nested dictionaries\n    \"\"\"\n\n    result = []\n    for id, name, score in zip(ids, names, scores):\n        nested_dict = {}\n        nested_dict[id] = {name: score}\n        result.append(nested_dict)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    def memoize(func):\n        cache = {}\n\n        def wrapper(*args):\n            if tuple(args) in cache:\n                return cache[tuple(args)]\n            result = func(*args)\n            cache[tuple(args)] = result\n            return result\n\n        return wrapper\n\n    @memoize\n    def f(x):\n        return max(int(x) if x <= 2 else f(x // 2) + f(x // 3) + f(x // 4) + f(x // 5), int(x))\n\n    return f(n)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(x, y, z):\n    \"\"\"\n    Calculate the median of three numbers.\n    \"\"\"\n    numbers = [x, y, z]\n    numbers.sort()\n    middle_index = len(numbers) // 2\n\n    if len(numbers) % 2 == 0:\n        median = (numbers[middle_index - 1] + numbers[middle_index]) / 2\n    else:\n        median = numbers[middle_index]\n\n    return median", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(s):\n    count = {char: s.count(char) for char in set(s)}\n    for char in s:\n        if count[char] == 1:\n            return char\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Computes the sum of digits for each number in the given list.\n\n    :param numbers: List of integers\n    :return: List of sums of digits for each number\n    \"\"\"\n    return [sum(map(int, str(num).zfill(len(str(max(numbers))))) ) for num in numbers]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 2, 56]]], "plus_fail_tests": [[[]]]}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "import itertools\ndef min_product_tuple(tuples):\n    \"\"\"\n    Find the minimum product from pairs of tuples within a given list.\n    \"\"\"\n    return min(a[0] * b[0] for a, b in itertools.combinations(tuples, 2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[2, 7], [2, 6], [1, 8], [4, 9]]]], "plus_fail_tests": [[[[1000000, 2000000], [5000000, 3000000], [4000000, 6000000]]]]}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(tuple_input):\n    \"\"\"\n    Function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(tuple_input) == len(set(tuple_input)):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Function to remove odd numbers from a given list.\n\n    :param numbers: List of numbers\n    :return: List containing even numbers\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(x, y):\n    \"\"\"\n    Returns the smaller of two numbers.\n    \"\"\"\n    return min(x, y)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst_tuples, n):\n    \"\"\"\n    Extracts the n-th element from each tuple in the given list and returns a new list with the extracted elements.\n\n    Args:\n        lst_tuples (List[Tuple[Any, Any]]): A list of tuples.\n        n (int): The index of the element to extract from each tuple.\n\n    Returns:\n        List[Any]: A new list containing the n-th elements of each tuple in the input list.\n    \"\"\"\n    return [element[n] for element in lst_tuples]\nlst_tuples = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Find the list with maximum length in the given list of lists.\n    \"\"\"\n    return max(lst, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    This function checks if there is any common element between two sequences.\n\n    Args:\n    seq1 (list): The first sequence.\n    seq2 (list): The second sequence.\n\n    Returns:\n    bool: True if there is any common element in both sequences, False otherwise.\n    \"\"\"\n    return bool(set(seq1) & set(seq2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_Product(nums):\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            current_product = nums[i] * nums[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (nums[i], nums[j])\n\n    return max_pair\nnums = [1, 2, 3, 4, 7, 0, 8, 4]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1000000, 2000000, 3000000, 4000000, 4000000]]]}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(tupl):\n    \"\"\"\n    Extracts the last character of each string in the given tuple.\n    \"\"\"\n    return [char for string in tupl for char in reversed(list(string))][0:len(tupl)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Mers", "for", "Vers"]]], "plus_fail_tests": [[["Lorem", "ipsum", "dolor", "sit", "amet"]]]}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "from functools import itemgetter\ndef and_tuples(tuple1, tuple2):\n    \"\"\"\n    Returns a new tuple with the element-wise product and the count of matching elements.\n    \"\"\"\n    result = list(map(lambda x, y: (x * y, int(x == y)), tuple1, tuple2))\n    return tuple(map(itemgetter(0), result)) + tuple(map(itemgetter(1), result)[::-1]) # pylint: disable=unpacked-delection", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    \"\"\"\n    Convert a date string from yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    return date_str.split('-')[1], date_str.split('-')[0], date_str.split('-')[2][2:] #[1]: month, [0]: year, [2]: day, slice [2:] to get only last two digits of year", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["2026-01-02"]], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Shell sort function that sorts an input array using the Shell sort algorithm.\n    \"\"\"\n    n = len(arr)\n    gap = int(0.5 * len(arr))\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Calculates the average of cubes of first n natural numbers.\n    \"\"\"\n    total_cubes = 0\n    for i in range(1, n+1):\n        total_cubes += i ** 3\n    average = total_cubes / n\n    return average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tuple_input):\n    \"\"\"\n    Concatenates each element in a tuple with a hyphen delimiter.\n\n    :param tuple_input: A tuple of strings and/or numbers\n    :return: A string that is the concatenation of tuple elements with hyphens as delimiters\n    \"\"\"\n    return '-'.join(map(str, tuple_input))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(p, h, k):\n    \"\"\"\n    Finds the equation of the directrix of a parabola given its focus parameters p, h, and k.\n    \"\"\"\n    if p == 0:\n        return \"Undefined. Parabola is a line or a point.\"\n\n    # Determine parabola's orientation\n    if p > 0:\n        orientation = \"right\"\n    elif p < 0:\n        orientation = \"left\"\n    else:\n        orientation = \"vertical\"\n\n    # Calculate the constant term for the directrix equation\n    directrix_constant = h + (abs(p) * (2.0 / 3.0)) if orientation == \"right\" else h - (abs(p) * (2.0 / 3.0))\n\n    # Calculate the y-intercept of the directrix\n    if k > 0:\n        y_intercept = \"Inf\"\n    elif k < 0:\n        y_intercept = \"-Inf\"\n    else:\n        y_intercept = \"0\"\n\n    # Return the equation of the directrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 0, 0]]}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculates the median length of a trapezium given the lengths of its parallel sides a and b, and the length of the parallel segment between them, c.\n    \"\"\"\n    # Calculate the area of the trapezium using the formula: area = (a + b) * c / 2\n    area = ((a + b) * c) / 2\n    \n    # Find the height of the trapezium using the formula: area = (h * (a + b)) / 2\n    # Solve for h: h = 2 * area / (a + b)\n    height = 2 * area / (a + b)\n    \n    # Calculate the median length as the arithmetic mean of the parallel sides\n    median = (a + b) / 2\n    \n    return median", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 0, 0]]}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the given number is greater than all elements in the array.\n\n    :param arr: List of numbers\n    :param num: Number to check\n    :return: Boolean value\n    \"\"\"\n    return all(num > x for x in arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    return int(''.join(map(str, numbers)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "import re", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    \"\"\"\n    Remove odd indexed characters from a string.\n    \"\"\"\n    return ''.join(filter(lambda x: s.index(x) % 2 == 0, s))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python"]], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts strings of given size from a list of string values.\n\n    :param string_list: List of strings\n    :param size: Desired size of extracted strings\n    :return: List of extracted strings\n    \"\"\"\n    return [s[::size] for s in string_list if len(s) >= size]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", "list", "exercises", "practice", "solution"], 8]], "plus_fail_tests": [[["abcdef", "xyz", "pqr", "lmnop", "abcde"], 5]]}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    Find the sum of even factors of a given number.\n    \"\"\"\n    i = 2\n    sum = 0\n    while i * i <= n:\n        if n % i == 0:\n            sum += i if i % 2 == 0 else i * 2\n            sum += n // i if i != n // i else n // i\n        i += 1\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[18]], "plus_fail_tests": [[102]]}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def perrin_number(n):\n    \"\"\"\n    Calculate the nth Perrin number.\n    \"\"\"\n    a, b, c = 0, 1, 1\n    for _ in range(n - 1):\n        next_number = a + b * 2\n        a, b = b, next_number\n    return a\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    \"\"\"\n    return sum([perrin_number(i) for i in range(1, n + 1)])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_input):\n    \"\"\"\n    Function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    count = 0\n    for item in list_input:\n        count += tuple_input.count(item)\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    \"\"\"\n    Returns True if the text contains a word with the letter 'z' in it.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if 'z' in word:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month: int) -> bool:\n    \"\"\"\n    Check if the given month number contains 31 days or not.\n    \"\"\"\n    valid_months = [4, 6, 9, 11]\n    return month in valid_months or (month in range(1, 13) and month != 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[6]], "plus_fail_tests": [[11]]}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Find the sublist with minimum length in the given list of lists.\n    \"\"\"\n    return [min(sublist) for sublist in lst]  # Find minimum element in each sublist", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1], [1, 2], [1, 2, 3]]]], "plus_fail_tests": [[[[], [], []]]]}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    :param length: The length of the rectangle.\n    :param width: The width of the rectangle.\n    :return: The area of the rectangle.\n    \"\"\"\n    return length * width", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "import itertools\ndef combinations_list(input_list):\n    \"\"\"\n    Returns all possible combinations of elements in the given list.\n    \"\"\"\n    return list(itertools.chain.from_iterable(itertools.combinations(input_list, r) for r in range(len(input_list) + 1)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(input_str):\n    \"\"\"\n    This function removes all uppercase substrings from the given string.\n\n    :param input_str: The input string\n    :return: The output string with all uppercase substrings removed\n    \"\"\"\n    output_str = ''\n    for char in input_str:\n        if char.islower() or char.isdigit():\n            output_str += char\n    return output_str", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    \"\"\"\n    Find the maximum product of a contiguous subarray within the given array.\n    \"\"\"\n    if not nums:\n        return 0\n\n    max_current = nums[0]\n    max_product = nums[0]\n    curr_product = nums[0]\n\n    for num in nums[1:]:\n        curr_product = max(num * curr_product, num)\n        max_product = max(max_product, curr_product)\n        max_current = max(max_current, num)\n\n        if curr_product < 0:\n            curr_product = num\n\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, -2, -3, 0, 7, -8, -2]]], "plus_fail_tests": [[[-2, 4, -6, 8, 10, -12, 14, -16]]]}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(*tuples):\n    \"\"\"\n    Find the intersection of tuples in given tuple list irrespective of their order.\n    \"\"\"\n    return {i[0] for i in set(tuple(x) for x in tuples) & set(tuple(y) for y in tuples[0:1])}\n    # or use this line for Python >= 3.9\n    # return {i for i in set.intersection(*(set(tuple(x)) for x in tuples))}", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [7, 8, 9], [10, 11, 12]]]]}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    if len(arr) < 2:\n        return max(arr) if arr else 0\n\n    dp_prev = arr[0]\n    dp_next = arr[0] if arr[0] > 0 else arr[0]\n    max_product = dp_prev * dp_next\n\n    for num in arr[1:]:\n        dp_current = max(num * dp_next, num)\n        dp_next = max(dp_next * num, dp_prev)\n        max_product = max(max_product, dp_current * dp_next)\n        dp_prev = dp_current\n\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[-3, -100, -4, -5, -150, -6]]]}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    \"\"\"\n    Function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in d.items() if value is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    This function computes the product of all array elements multiplied together modulo n.\n\n    :param arr: List of integers\n    :param n: Integer\n    :return: Integer, the product of the array elements modulo n\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replace all occurrences of old_char in string with new_char.\n    \"\"\"\n    return string.replace(old_char, new_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    \"\"\"\n    Returns a list of tuples where the first element is the key and the second element is the value,\n    sorted in descending order by value.\n    \"\"\"\n    return list(reversed(sorted(d.items(), key=lambda item: item[1], cmp=None)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Math": 81, "Physics": 83, "Chemistry": 87}]], "plus_fail_tests": [[{"A": 1000, "B": 1000, "C": 1000, "D": 1000, "E": 1000}]]}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def is_lower(s):\n    \"\"\"\n    Convert given string to lower case.\n    \"\"\"\n    return s.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    \"\"\"\n    Function to remove lowercase substrings from a given string.\n    \"\"\"\n    return ''.join(x for x in s if x.isupper())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def sum_of_cubes(n):\n    \"\"\"\n    Calculate the sum of cubes of the first n natural numbers.\n    \"\"\"\n    return sum(i**3 for i in range(1, n+1))\ndef sum_of_numbers(n):\n    \"\"\"\n    Calculate the sum of the first n natural numbers.\n    \"\"\"\n    return sum(range(1, n+1))\ndef difference(n):\n    \"\"\"\n    Find the difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    return sum_of_cubes(n) - sum_of_numbers(n)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, k):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list with length not more than k.\n    \"\"\"\n    start = 0\n    max_sum = float('-inf')\n    current_sum = 0\n\n    while True:\n        if current_sum < 0 and (not arr or index(arr[-1]) - index(arr[0]) > len(arr) - k):\n            # If the sum of the current sublist is negative and the sublist length is more than required,\n            # then we need to move the start index to find a new sublist\n            arr = arr[1:]\n            if not arr:\n                return max_sum\n            current_sum = 0\n            start = index(arr[0])\n\n        current_sum += arr[0]\n        max_sum = max(max_sum, current_sum)\n        arr.pop(0)\n\n    return max_sum\ndef index(x):\n    \"\"\"\n    Helper function to get the index of the given element in the list.\n    \"\"\"\n    return [i for i, el in enumerate(arr) if el == x][0]\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\nk = 8", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-2, -3, 4, -1, -2, 1, 5, -3], 8]], "plus_fail_tests": [[[], 0]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublist in the given list of sublists.\n    \"\"\"\n    return max(map(len, lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(nums, target_sum):\n    \"\"\"\n    Finds the number of pairs in the given list whose xor value is odd and whose sum equals the target_sum.\n\n    :param nums: List of integers\n    :param target_sum: Target sum of the pair\n    :return: Number of pairs whose xor value is odd and sum equals target_sum\n    \"\"\"\n\n    def xor_with_target(num):\n        \"\"\"\n        Returns True if xor of a number with target_sum results in an odd number.\n        :param num: An integer\n        :return: A boolean value\n        \"\"\"\n        return (num ^ target_sum) & 1\n\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (xor_with_target(nums[i]) and xor_with_target(nums[j]) and nums[i] + nums[j] == target_sum):\n                count += 1\n                break\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4, 7, 2, 1], 5]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n\n    :param num1: The first integer\n    :param num2: The second integer\n    :return: The sum of the per-digit differences\n    \"\"\"\n    # Convert both integers to strings\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n\n    # Calculate the per-digit differences and sum them up\n    result = 0\n    len_diff = abs(len(str_num1) - len(str_num2))\n\n    # Pad smaller number with zeros if needed\n    if len(str_num1) > len(str_num2):\n        str_num2 = str_num2.zfill(len(str_num1))\n    elif len(str_num2) > len(str_num1):\n        str_num1 = str_num1.zfill(len(str_num2))\n\n    for i in range(max(len(str_num1), len(str_num2))):\n        if i >= len(str_num1):\n            digit1 = 0\n        else:\n            digit1 = int(str_num1[i])\n\n        if i >= len(str_num2):\n            digit2 = 0\n        else:\n            digit2 = int(str_num2[i])\n\n        result += abs(digit1 - digit2)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements in two given tuples and output them in sorted order.\n    \"\"\"\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    result = list(set1.union(set2))\n    result.sort()\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(n)) if digit.isdigit())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "import sys\nimport math\ndef issort_list(lst):\n    \"\"\"\n    Function to check if a list is sorted in ascending order.\n    \"\"\"\n    return (len(lst) > 1 and all(x <= y for x, y in zip(lst, lst[1:])) and lst[0] is not None)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(n)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(numbers)) # Find unique numbers using set and convert back to list\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(num_lists):\n    # Flatten all lists and remove duplicates using a set\n    unique_nums = set()\n    for num_list in num_lists:\n        unique_nums.update(num_list)\n\n    # Convert set back to list and return the list\n    return list(unique_nums)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 3, 4, 5]]], "plus_fail_tests": [[[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]]]}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    def extract_even_helper(value):\n        if isinstance(value, tuple):\n            return tuple(filter(lambda x: isinstance(x, (int, float)) and x % 2 == 0, value)) if value else ()\n        elif isinstance(value, (int, float)) and value % 2 == 0:\n            return value\n        else:\n            return value\n\n    return tuple(filter(lambda x: isinstance(x, (tuple, int, float)), nested_tuple)) if nested_tuple else () \\\n           if not nested_tuple else type(nested_tuple)((map(extract_even_helper, nested_tuple)), *nested_tuple[1:])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 5, [7, 6, [2, 4]], 6, 8]]], "plus_fail_tests": [[[1, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]]]}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Calculates the nth Catalan number using the recursive formula: C(n) = C(n-1) * (2*n+1) / (n+2)\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input should be non-negative integer\")\n\n    if n == 0 or n == 1:\n        return 1\n\n    return (4 * (2 * n + 1) // (n + 2) * catalan_number(n - 1) if n else 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[2]]}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    \"\"\"\n    Returns a list of n items with the highest prices from the given list.\n\n    :param items: List of dictionaries, where each dictionary represents an item with 'name' and 'price' keys.\n    :param n: Int, number of most expensive items to return.\n    :return: List of dictionaries, where each dictionary represents the name and price of an item.\n    \"\"\"\n\n    # Sort the items in descending order of their prices\n    items.sort(key=lambda x: x['price'], reverse=True)\n\n    # Return the first n items from the sorted list\n    return items[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(input_list):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(input_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(numbers):\n    \"\"\"\n    Find the difference between the largest and smallest value in a given list.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"List cannot be empty\")\n    return max(numbers) - min(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Returns a list of perfect squares between two given numbers.\n    \"\"\"\n    return [x*x for x in range(start, (end//2) + 1) if x*x <= end]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[50, 100]], "plus_fail_tests": [[1, 0]]}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (r, theta) to rectangular coordinates (x, y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, y.imag)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "from math import comb", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(n):\n    \"\"\"\n    Check if a given number is an Armstrong number.\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n    \"\"\"\n    power = len(str(n))\n    sum = 0\n    number = n\n\n    while number > 0:\n        sum += (number % 10) ** power\n        number //= 10\n\n    return sum == n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Function to find sum and average of first n natural numbers.\n    \"\"\"\n    total_sum = (n * (n + 1)) // 2\n    average = total_sum / n\n    return total_sum, round(average, 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Find the difference of the first even and first odd number in a given list.\n\n    :param numbers: A list of numbers\n    :return: The difference of the first even and first odd number\n    \"\"\"\n\n    # Filter the list to get the first odd and even numbers\n    odd_number = next(number for number in numbers if number % 2 != 0)\n    even_number = next(number for number in numbers if number % 2 == 0)\n\n    # Return the difference\n    return abs(even_number - odd_number)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 5, 3, 6, 1, 4, 9, 8, 7]]]}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "from itertools import combinations\ndef combinations_colors(input_list, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the given input_list of length n.\n    Returns a list of tuples.\n    \"\"\"\n    return list(combinations(input_list, n))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    \"\"\"\n    Returns the size in bytes of the given tuple.\n    \"\"\"\n    return sys.getsizeof(t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def merge_sorted_lists(arr1, arr2):\n    \"\"\"\n    Merges two sorted lists and returns a new sorted list.\n    \"\"\"\n    merged = []\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n\n    return merged\ndef merge_sorted_lists_merged_index(arr1, arr2, k):\n    \"\"\"\n    Finds the kth element in the merged list of two sorted arrays.\n    \"\"\"\n    merged = merge_sorted_lists(arr1, arr2)\n    return merged[k - 1]\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the kth element from the given two sorted arrays.\n    \"\"\"\n    total_length = len(arr1) + len(arr2)\n\n    if total_length < k:\n        raise ValueError(\"The sum of lengths of the arrays is less than k.\")\n\n    return merge_sorted_lists_merged_index(arr1, arr2, k)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3], [true, true, false], 3]]}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(s):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    # Create an empty dictionary to store character count\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in s:\n        # If character is already in the dictionary, return it\n        if char in char_count:\n            return char\n        # Else, add it to the dictionary with count 1\n        else:\n            char_count[char] = 1\n    # If no repeated character is found, return None\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Returns True if the given number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    \"\"\"\n    This function removes leading zeroes from an IP address string.\n\n    :param ip: IP address string\n    :return: IP address string with leading zeroes removed\n    \"\"\"\n    octets = ip.split('.')\n    for index, octet in enumerate(octets):\n        if octet.isdigit() and octet.startswith('0'):\n            octets[index] = octet[1:] if int(octet[1:]) else ''\n    return '.'.join(octets)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(input_string):\n    \"\"\"\n    This function takes a string as an argument and returns a new string with the words reversed in the order they appear in the original string.\n    \"\"\"\n    words = input_string.split()\n    reversed_words = [word for word in words][::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "def radians_from_degrees(degrees):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return (2 * 3.14159265358979323846 / 360) * degrees\ndef radian_degree(degrees):\n    \"\"\"\n    A convenience function to convert degrees to radians.\n    \"\"\"\n    return radians_from_degrees(degrees)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Function to check if the given integer is a prime number.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    \"\"\"\n    Search a string for a regex pattern and return the matching substring, start index, and end index.\n    \"\"\"\n    match = re.search(r'\\b{}\\b'.format(pattern), string)\n    if match:\n        return (pattern, match.start(), match.end())\n    else:\n        return None", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", ""]]}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Calculate the nth Bell number using the recursive formula: Bell(n) = Sum(Bell(i) for i in range(n) if i > 0)\n    \"\"\"\n    def bell_helper(n, memo={}):\n        \"\"\"\n        Helper function to calculate Bell number using memoization\n        \"\"\"\n        if n == 0:\n            return 1\n        if n in memo:\n            return memo[n]\n        memo[n] = sum(bell_helper(i) for i in range(1, n+1) if i != n)\n        return memo[n]\n\n    return bell_helper(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[10]]}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Function that takes a list and an integer 'k' as arguments,\n    and returns a new list with the 'k'-th element removed.\n    \"\"\"\n    if len(lst) < k:\n        raise IndexError(\"List index out of range\")\n    return lst[:k] + lst[k+1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 1]]}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value of the n-th column.\n\n    :param matrix: List[List[int]]\n    :param n: int\n    :return: int\n    \"\"\"\n    if len(matrix) == 0 or len(matrix[0]) == 0:\n        raise ValueError(\"Matrix cannot be empty\")\n    if len(matrix) < n:\n        raise IndexError(\"Column index out of range\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        try:\n            max_value = max(max_value, row[n])\n        except IndexError:\n            raise IndexError(\"Column index out of range\")\n\n    return max_value", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-6, -9, -4]], 2]]}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = ''\n    non_numbers = ''\n    for char in s:\n        if char.isdigit():\n            numbers += char\n        else:\n            non_numbers += char\n    return non_numbers + numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two numbers using Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\ndef largest_subset(numbers):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    def find_gcd(numbers):\n        \"\"\"\n        Returns the greatest common divisor of all numbers in the given list.\n        \"\"\"\n        return reducer(lambda a, x: gcd(a, x), (1,))(numbers)\n\n    def reducer(function, accumulator, *args):\n        \"\"\"\n        Applies a function to an accumulator and each argument in turn, passing the result as the new accumulator.\n        \"\"\"\n        return reducer(function, function(accumulator, *args), *args) if args else accumulator\n\n    gcd_value = find_gcd(numbers)\n    return int(len(numbers) / 2) if gcd_value and len(numbers) % 2 else len(numbers)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 6, 13, 17, 18]]], "plus_fail_tests": [[[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]]]}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Returns a new tuple where each element is the element-wise modulo of the corresponding elements in tuples.\n    \"\"\"\n    return tuple(x % y for x, y in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def merge_lists(list1, list2):\n    merged = list(sorted(list1 + list2))\n    length = len(merged)\n    if length % 2 == 0:\n        return (merged[length // 2 - 1] + merged[length // 2]) / 2\n    else:\n        return merged[length // 2]\ndef get_median(list1, list2, size):\n    assert len(list1) == len(list2) and len(list1) == size, \"Both lists must have the same size.\"\n    return merge_lists(list1, list2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[3, 6, 14, 23], [2, 18, 27, 39, 49, 55], 4]]}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    \"\"\"\n    This function converts a given string to uppercase.\n    \"\"\"\n    return string.upper()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(semi_radius):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    :param semi_radius: The radius of the semicircle.\n    :return: The area of the largest triangle inscribed in the semicircle.\n    \"\"\"\n    if semi_radius <= 0:\n        return None\n\n    # Calculate the side length of the inscribed triangle using the semi-radius\n    side_length = 2 * semi_radius\n\n    # Calculate the semi-perimeter of the triangle\n    s = side_length / 2\n\n    # Calculate the area of the triangle using Heron's formula\n    p = s * (s + side_length / 2)\n    area = (p * (p - side_length) * (p - side_length / 2)) ** 0.5\n\n    return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[0.5]]}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def Split(numbers):\n    \"\"\"\n    This function takes a list of numbers as an argument and returns a new list containing only even numbers.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    \"\"\"\n    Replace whitespaces with underscores and vice versa in a given string.\n    \"\"\"\n    return s.replace(\" \", \"_\").replace(\"_\", \" \")[::-1].replace(\"_\", \" \")[::-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Jumanji The Jungle"]], "plus_fail_tests": [["  Jumanji The Jungle  "]]}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(nums):\n    \"\"\"\n    Move all zeros to the end of the given list.\n    \"\"\"\n    try:\n        nums.remove(0)\n    except ValueError:\n        pass\n\n    for i in reversed(range(len(nums))):\n        if nums[i] == 0:\n            nums.pop(i)\n            nums.append(0)\n            i -= 1\n    return nums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 0, 2, 0, 3, 4]]], "plus_fail_tests": [[[2, 3, 4, 0, 0, 7, 0, 5, 6, 0, 0, 9, 0, 8, 10, 0, 0, 12, 13, 14, 0]]]}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n\n    def heap_sort_helper(arr, n):\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n        for i in range(n - 1, 0, -1):\n            arr[0], arr[i] = arr[i], arr[0]\n            heapify(arr, i, 0)\n\n    heap_sort_helper(arr, len(arr))\n\n    return arr", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]]], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(price1, price2):\n    \"\"\"\n    This function checks if there is no profit or loss in buying an item at price1 and selling it at price2.\n\n    :param price1: The price of buying an item\n    :param price2: The price of selling an item\n    :return: A boolean value indicating if there is no profit or loss\n    \"\"\"\n    return abs(price2 - price1) <= price1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1500, 1200]], "plus_fail_tests": [[-100, -100]]}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Check if a given number is a nonagonal number.\n    A nonagonal number is a number that can be represented as a triangle with 9 equilateral triangles.\n    The sum of the first n nonagonal numbers is given by the formula: n * (3n^2 + n)\n    \"\"\"\n    nonagonal = lambda n: n * (3 * (n ** 2) + n)\n    return nonagonal(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n\n    :param wind_velocity: Wind velocity in km/h\n    :param temperature: Temperature in Celsius\n    :return: Wind chill index rounded to the next integer\n    \"\"\"\n\n    # Wind chill formula: W = 35.74 + 0.6215T - 35.75(10**0.16) + 0.4275T(10**0.16) - 35.75(V**0.16) + 0.4275T(V**0.16)\n    # Rounding to the next integer\n\n    def wind_chill_formula(temperature, wind_velocity):\n        a = 35.74 + 0.6215 * temperature - 35.75 * (10 ** 0.16)\n        b = 0.4275 * temperature * (10 ** 0.16)\n        c = -35.75 * (wind_velocity ** 0.16)\n        d = 0.4275 * temperature * (wind_velocity ** 0.16)\n        return round(a + b - c + d)\n\n    return wind_chill_formula(temperature, wind_velocity)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[120, 35]], "plus_fail_tests": [[0, 0]]}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains the letter 'z' in the middle of a word,\n    except at the start and end of the word.\n\n    :param text: str - the input text\n    :return: bool - True if 'z' is present in the middle of a word, False otherwise\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if word and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["zzzxyabczzz"]]}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tuple_input, dict_input):\n    \"\"\"\n    Function to add a dictionary to a tuple.\n\n    :param tuple_input: Input tuple.\n    :param dict_input: Input dictionary.\n    :return: A new tuple that includes the original tuple and the dictionary as its last element.\n    \"\"\"\n    return tuple(tuple_input) + (dict_input,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filter students from the given dictionary based on height and weight minimums.\n\n    :param students: A dictionary with student names as keys and tuples of height and weight as values.\n    :param min_height: The minimum height.\n    :param min_weight: The minimum weight.\n    :return: A new dictionary with students that have height and weight above the minimum.\n    \"\"\"\n    return {name: value for name, value in students.items() if value[0] > min_height and value[1] > min_weight}\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 6.0, 70]], "plus_fail_tests": [[{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 5.8, 65]]}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(input_tuple):\n    \"\"\"\n    Function that takes as input a tuple of numbers and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    if len(input_tuple) < 2:\n        raise ValueError(\"Input tuple must have at least two elements.\")\n\n    output = [input_tuple[i] * input_tuple[i+1] for i in range(len(input_tuple)-1)]\n    return tuple(output)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12]]], "plus_fail_tests": [[[]]]}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "import re\ndef extract_quotation(input_str):\n    \"\"\"\n    Extracts values between quotation marks from the given string.\n    \"\"\"\n    return re.findall(r'\"([^\"]+)\"', input_str)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Overlapping quotation marks: \"This is the \"first quote\"\" and \"This is the \"second quote\"\""]]}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    sum = 0\n    base_digits_sum = 0\n    current_base = base\n\n    # Calculate the sum of all digits of base raised to the power\n    while power > 0:\n        power_remainder = power % 10\n        base_digits_sum += sum((int(digit / current_base) for digit in str(base) if digit.isdigit()))[0] ** power_remainder\n        power //= 10\n        current_base = base ** 10 if power > 0 else base\n        sum += base ** power\n        power += 1\n\n    # Calculate the sum of all digits of base\n    for digit in str(base):\n        if digit.isdigit():\n            sum += int(digit)\n\n    return int(base_digits_sum) + sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 100]], "plus_fail_tests": [[1, 1000000]]}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculates the lateral surface area of a cone with given radius r and height h.\n\n    :param r: The radius of the base of the cone.\n    :param h: The height of the cone.\n    :return: The lateral surface area of the cone.\n    \"\"\"\n    slop_angle = math.pi / 2 - math.atan(h / (2 * r))\n    lateral_surface = (math.pi * r ** 2) + ((h * math.sqrt(r ** 2 + (h ** 2 / 4))) * math.sqrt(1 + (math.tan(math.radians(90 - slop_angle)) ** 2)) * 2) - (r ** 2 * math.sqrt(1 + (math.tan(math.radians(90 - slop_angle)) ** 2)) * 2)\n    return abs(lateral_surface)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 12]], "plus_fail_tests": [[2.5, 8.3]]}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, num):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    :param arr: Sorted array of numbers\n    :param num: Number to find the index of\n    :return: Index of the first occurrence of the number in the array\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == num:\n            return i\narr = [2, 5, 5, 5, 6, 6, 8, 9, 9, 9]\nnum = 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(input_list):\n    \"\"\"\n    Function to remove consecutive duplicates from a given list.\n    \"\"\"\n    if not input_list:\n        return input_list\n\n    output_list = [input_list[0]]\n    for element in input_list[1:]:\n        if element != output_list[-1]:\n            output_list.append(element)\n\n    return output_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggles all bits except the first and the last one in the given binary number.\n    \"\"\"\n    # Calculate the number of bits in binary representation of the given number\n    num_bits = len(bin(abs(num))[2:])\n    \n    # Define a mask for toggling middle bits\n    mask = (1 << 2 if num_bits >= 3 else 0) | (1 << (num_bits - 1)) if num_bits else 0\n    \n    # Toggle middle bits\n    return (num ^ mask) & ~(1 << 0) & ~(1 << (num_bits - 1))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[2147483647]]}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regex.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    pattern = re.compile('^[' + vowels + ']')\n    return pattern.match(string) is not None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(side_length_ab):\n    \"\"\"Calculate the area of a regular tetrahedron with side length ab.\"\"\"\n    s = side_length_ab * math.sqrt(2 / 3)\n    return (3 * math.sqrt(2) / 4) * s ** 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate given list 'lst' by 'n' items to the right.\n    \"\"\"\n    return lst[-n:] + lst[:-n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(tuple_input):\n    \"\"\"\n    Function to check if the given tuple has any None value or not.\n    \"\"\"\n    return any(type(i) is None for i in tuple_input)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 4, 5, 6, null]]], "plus_fail_tests": [[[null, [null, [null, [null, [null, [null]]]]]]]]}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range that are divisible by every digit they contain.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(my_list, my_tuple):\n    \"\"\"\n    Adds the given tuple to the given list.\n    \"\"\"\n    my_list.extend(my_tuple)\n    return my_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(text):\n    \"\"\"\n    This function adds a single space between words in the given string where the first letter is capitalized.\n    \"\"\"\n    words = text.split()\n    output = [word.capitalize() if not word.isdigit() else word for word in words]\n    return ' '.join(output) if output else text", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PythonProgrammingExamples"]], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sort given list of strings numerically.\n\n    :param lst: List of strings\n    :return: Sorted list of strings as numbers\n    \"\"\"\n    return sorted(lst, key=lambda x: int(x) if x.isdigit() else int(x)*-1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["4", "12", "45", "7", "0", "100", "200", "-12", "-500"]]], "plus_fail_tests": [[["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]]]}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coord):\n    x, y = coord\n    return [(x-1, y), (x, y-1), (x-1, y-1), (x+1, y), (x, y+1), (x+1, y), (x-1, y+1), (x+1, y+1), (x, y)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(tuples, k):\n    # Sort tuples based on the second element in ascending order\n    tuples.sort(key=lambda x: x[1])\n    \n    # Return the first k tuples\n    return tuples[:k]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "import itertools\ndef count_reverse_pairs(string_list):\n    \"\"\"\n    Count the number of pairs of reverse strings in the given list.\n    \"\"\"\n    return len([i for i in itertools.combinations(string_list, 2) if i[0] == i[1][::-1]])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    \"\"\"\n    from collections import defaultdict\n\n    sublists = [tuple(sorted(i)) for i in set(lst) if type(i) is list]\n    result = defaultdict(int)\n\n    for sublist in sublists:\n        result[sublist] = lst.count(sublist)\n\n    return dict(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]]], "plus_fail_tests": [[[[]]]]}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(n):\n    \"\"\"\n    Checks if a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(n.replace(' ', '').replace(',', '.'))\n        return True\n    except (ValueError, ValueError):\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["3.124587"]], "plus_fail_tests": [["123.1111"]]}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber(month):\n    \"\"\"\n    Checks if the given month has 30 days.\n\n    :param month: An integer representing the month number (1-12)\n    :return: A boolean value indicating if the month has 30 days or not\n    \"\"\"\n    return month in [4, 6, 9, 11]\ndef check_monthnumber_number(month):\n    \"\"\"\n    A test function for the check_monthnumber function.\n    :param month: An integer representing the month number (1-12)\n    :return: A boolean value indicating if the test passed or not\n    \"\"\"\n    result = check_monthnumber(month)\n    expected = (month in [4, 6, 9, 11])\n    return result == expected", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[1]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    :param numbers: List of numbers\n    :return: Boolean value\n    \"\"\"\n    if len(numbers) == 1:\n        return True\n    elif len(set(numbers)) == 1:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    # Ensure the list has at least two elements\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least two elements\")\n\n    # Sort the list in non-descending order\n    numbers.sort()\n\n    # Return the second element of the sorted list\n    return numbers[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, -0.5, 0, 2, -2, -2]]], "plus_fail_tests": [[[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]]]}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(s):\n    \"\"\"\n    Count the number of digits in a given string.\n    \"\"\"\n    return sum(1 for char in s if char.isdigit())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Check if a number is polite. A polite number is a positive integer n such that:\n    1. Its digits are in non-descending order.\n    2. The difference between any two adjacent digits is less than or equal to 1.\n    \"\"\"\n    if n < 0:\n        return False\n\n    digits = list(str(n).digits(base=10, split_large_strings=True))\n\n    if len(digits) == 1:\n        return True\n\n    for i in range(1, len(digits)):\n        if abs(int(digits[i]) - int(digits[i - 1])) > 1:\n            return False\n\n    return True\nn = 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(input_list):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in the given list.\n    \"\"\"\n    return list(zip(input_list, input_list[1:])) if input_list else []", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    :param arr: A list or tuple of numbers\n    :return: The minimum difference between any two elements in the array\n    \"\"\"\n    arr = list(arr) # Make sure the input is a list or tuple\n    arr.sort()\n    return abs(arr[0] - arr[1])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 3, 19, 18, 25], 6]], "plus_fail_tests": [[[15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 25], 12]]}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    \"\"\"\n    This function returns the number of pairs in the given list whose sum equals the provided sum.\n\n    :param numbers: A list of numbers\n    :param sum: The desired sum of pairs\n    :return: The count of pairs whose sum equals the provided sum\n    \"\"\"\n\n    # Use a dictionary to store numbers as keys and their count as values for O(1) time complexity lookups\n    numbers_dict = {num: numbers.count(num) for num in set(numbers)}\n\n    count = 0\n    for num in numbers:\n        target = sum - num\n        if target in numbers_dict and numbers_dict[target] > 0:\n            count += numbers_dict[target]\n            if num != target:\n                count += numbers_dict.get(num, 0)  # Add the count of the other number if it's not a duplicate pair\n            numbers_dict[num] -= 1\n            if numbers_dict[num] == 0:\n                del numbers_dict[num]\n\n    return count // 2  # Divide by 2 to avoid double-counting pairs", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 1, 1], 2]], "plus_fail_tests": [[[-1, 0, 6, 1, 2, 3, 4, 5, 6, 7, 8, 9], 8]]}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    \"\"\"\n    Returns a new list that contains elements from list1 which are not in list2.\n    \"\"\"\n    return list(set(list1) - set(list2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], [6, 7, 1]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    num = 1\n    while n > 0:\n        total += num ** 4\n        num += 2\n        n -= 1\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_symbols = \"([{\"\n    closing_symbols = \")]}\"\n    for symbol in expression:\n        if symbol in opening_symbols:\n            stack.append(symbol)\n        elif symbol in closing_symbols:\n            if not stack or (stack.pop() if symbol != closing_symbols[::-1][::-1][0] else False) != opening_symbols[::-1][::-1][0] * 2 - ord(symbol) + ord(stack[-1]):\n                return False\n    return not stack", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["{()}[{}]"]], "plus_fail_tests": [[""]]}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substr):\n    start_positions = [i for i in range(len(string) - len(substr) + 1) if string.startswith(substr, i)]\n    if len(start_positions) > 0:\n        return substr, start_positions[0], string.find(substr, start_positions[0])\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python programming, python language", "python"]], "plus_fail_tests": [["UPmVaKepPO", "UPmVaKepPO"]]}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(text: str, k: int):\n    \"\"\"\n    Remove all words of given length (k) from the given text.\n    \"\"\"\n    import re\n    words = re.findall(r'\\w+\\s*', text)  # Find all words in the text\n    filtered_words = [word for word in words if len(word) != k]  # Filter out words of given length\n    return ' '.join(filtered_words)  # Join the filtered words back into a single string", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["The person is most value tet", 3]], "plus_fail_tests": [["This is a very long and complex sentence that contains words of different lengths such as abracadabra, internationalization, and antidisestablishmentarianism.", 10]]}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(input_list):\n    \"\"\"\n    Write a function to pack consecutive duplicates of given list elements into sublists.\n    \"\"\"\n    output_list = []\n    current_list = []\n    for element in input_list:\n        if not current_list or current_list[-1] != element:\n            output_list.append(list(current_list) if current_list else [element])\n            current_list = [element]\n        else:\n            current_list.append(element)\n    output_list.append(list(current_list) if current_list else [])\n    return output_list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]], "plus_fail_tests": [[[2, 5, 3, 1, 1, 0, 4, 4, 2, 3, 3]]]}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(input_list):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    unique_elements = set(input_list) # Convert list to a set to remove duplicates\n    sum_of_unique_elements = sum(unique_elements) # Calculate sum of unique elements\n    return sum_of_unique_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "from itertools import combinations\nimport itertools\ndef find_combinations(tuples):\n    def combine(current=(), combos=[]):\n        if not tuples:\n            combos.append(tuple(current))\n            return\n        for t in tuples:\n            combine(current + t, combos)\n            combine(current, combos)\n\n    combine()\n    return [x for x in [y for y in list(map(sum, itertools.combinations(tuples, 2)))] if x > sum(x[0] for x in tuples)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[100, 200], [300, 400], [500, 600], [700, 800]]]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "import math\ndef count_divisors(n):\n    \"\"\"\n    Function to calculate the count of divisors of a given number.\n    \"\"\"\n    divisors_count = 1\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            divisors_count += 1\n            if i != n // i:\n                divisors_count += 1\n            i = int(next(filter(lambda x: n % x == 0, range(i + 1, int(n**0.5) + 1))) or n)\n        else:\n            i += 1\n    return divisors_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1]]}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(nums):\n    \"\"\"\n    Finds the product of the first even and odd number in a given list.\n\n    :param nums: A list of numbers\n    :return: The product of the first even and odd number in the list\n    \"\"\"\n\n    even, odd = None, None\n    for num in nums:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n            break\n\n    if even is None or odd is None:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n    return even * odd", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 4, 1, 6, 8]]], "plus_fail_tests": [[[1, 2, -2, 3, -3, -3]]]}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, str_):\n    \"\"\"\n    Create a new tuple from given list and string.\n\n    :param lst: list\n    :param str_: str\n    :return: tuple\n    \"\"\"\n    return tuple(lst) + (str_.split(' '))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["WEB", "is"], "best"]], "plus_fail_tests": [[[], ""]]}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str: str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n    \"\"\"\n    tuple_elements = tuple(map(int, tuple_str[1:-1].split(', ')))\n    return tuple_elements", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((7, 8, 9)"]]}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    \"\"\"\n    Returns True if the text matches the pattern \"a followed by three b's\", False otherwise.\n    \"\"\"\n    return \"abbb\" in text", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "def text_starta_endb(text):\n    \"\"\"\n    Function that checks if a given string starts with 'a' and ends with 'b'.\n\n    :param text: str - input string\n    :return: bool - True if the string starts with 'a' and ends with 'b', False otherwise\n    \"\"\"\n    return text.startwith('a') and text.endswith('b')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aabbbb"]], "plus_fail_tests": [[""]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    \"\"\"\n    Find the last index of an element in a sorted array.\n\n    :param arr: Sorted array of integers.\n    :param x: Element to find the last index of.\n    :return: Last index of the given element in the array.\n    \"\"\"\n    return len(arr) - (1 if x not in arr else arr.index(x, len(arr) - 1))", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[1, 2, 3], 1]], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    This function calculates the sum of all odd natural numbers within the given range l and r.\n\n    :param l: The lower limit of the range\n    :param r: The upper limit of the range\n    :return: The sum of all odd natural numbers within the given range\n    \"\"\"\n    return sum(i for i in range(l, (r + 1), 2) if i > l)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 5]], "plus_fail_tests": [[1, 10000]]}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Function to find the sum of all odd length subarrays in a given list.\n\n    :param arr: List of integers\n    :return: Int, the sum of all odd length subarrays\n    \"\"\"\n    def subarray_sum(arr, start=0, end=None):\n        \"\"\"\n        Helper function to calculate sum of subarray from start to end (end inclusive)\n        :param arr: List of integers\n        :param start: Int, index of start of subarray\n        :param end: Int, index of end of subarray\n        :return: Int, sum of subarray\n        \"\"\"\n        if end is None:\n            end = len(arr)\n        return sum(arr[start:end])\n\n    n = len(arr)\n    sum_of_odd_length_subarrays = 0\n    for i in range(1, (2 * n + 1) // 2):\n        sum_of_odd_length_subarrays += subarray_sum(arr, 0, i) if i <= n else sum_sum_of_two_subarrays(arr, 0, i - n, i)\n    return sum_of_odd_length_subarrays\n\n    def sum_sum_of_two_subarrays(arr, start1, end1, start2):\n        \"\"\"\n        Helper function to calculate sum of two subarrays of given list\n        :param arr: List of integers\n        :param start1: Int, index of start of first subarray\n        :param end1: Int, index of end of first subarray\n        :param start2: Int, index of start of second subarray\n        :return: Int, sum of two subarrays\n        \"\"\"\n        return subarray_sum(arr, start1, end1) + subarray_sum(arr, start2)\n\n    assert len(arr) >= 1, \"Input list should have at least one element\"\n\n    return int(sum_of_odd_length_subarrays)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4]]], "plus_fail_tests": [[[4, 3, 2, 1, 9, 10, 7]]]}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    :param num: 32-bit integer\n    :param d: number of bits to rotate left\n    :return: rotated number\n    \"\"\"\n    return (num << d) | (num >> (32 - d % 32))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(input_str):\n    \"\"\"\n    Function to remove all whitespaces from a given string.\n    \"\"\"\n    return input_str.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of the given array.\n\n    :param arr: List of numbers\n    :return: The sum of all numbers in the array\n    \"\"\"\n    return sum(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square.\n    \"\"\"\n    return (n ** 0.5).is_integer()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-9]]}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(x, y, z):\n    \"\"\"\n    Returns the number of equal numbers among three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count + (3 if x == y and y == z else 0)  # bonus optimization for identical numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 1, 1]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    \"\"\"\n    Find the maximum run of uppercase characters in the given string.\n    \"\"\"\n    if not s:\n        return 0\n\n    current_run = 0\n    max_run = 0\n    state = 'lower'\n\n    for char in s:\n        if state == 'lower':\n            if char.isupper():\n                current_run = 1\n                state = 'upper'\n            else:\n                current_run = 0\n        else:\n            current_run += 1\n            max_run = max(max_run, current_run)\n\n    return max_run", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["GeMKSForGERksISBESt"]], "plus_fail_tests": [["A"]]}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Checks if the product of numbers in a list is even.\n\n    :param numbers: List of numbers\n    :return: Boolean value\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in the given list of lists with the highest sum of elements.\n\n    :param lst: A list of lists\n    :return: The list in the given list of lists with the highest sum of elements\n    \"\"\"\n    max_sum, max_list = float('-inf'), []\n    for sublist in lst:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum, max_list = current_sum, sublist\n    return max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    return all(x <= y for x, y in zip(tuple1, tuple2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3], [2, 3, 4]]], "plus_fail_tests": [[[3, 7, 11, 15, 19], [2, 6, 10, 14, 18]]]}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}