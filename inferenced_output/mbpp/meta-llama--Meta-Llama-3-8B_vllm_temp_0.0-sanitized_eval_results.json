{"date": "2024-08-08 15:57", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    return (base*height*length)/2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(lst, n):\n    heap = []\n    for i in lst:\n        if len(heap) < n:\n            heapq.heappush(heap, i)\n        else:\n            if i > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, i)\n    return heap", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], "plus_fail_tests": [[[9, 8, 7, 6, 5, 4, 3, 2, 1], 3]]}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    if len(string) == 1:\n        return 0\n    else:\n        for i in range(1, len(string)):\n            if string == string[i:] + string[:i]:\n                return i\n        return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(a,b):\n    a = bin(a)\n    b = bin(b)\n    a = a[2:]\n    b = b[2:]\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[15, 8]], "plus_fail_tests": [[-101, -100]]}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    return set(list1).intersection(list2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num**2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    matrix.sort(key=sum)\n    return matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(str1, char):\n    str1 = str1.replace(char, \"\")\n    str1 = str1.replace(char, \"\")\n    return str1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaa", "a"]]}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if rev * 2 - 1 == num:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[73]], "plus_fail_tests": [[1]]}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    if n == 1:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-71]]}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(dirty_string, clean_string):\n    return ''.join([char for char in dirty_string if char not in clean_string])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(array):\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] == array[j]:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side):\n    return side * 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(s):\n    return set([word for word in s.split() if len(word) >= 4])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    if text.islower() and \"_\" in text:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["_abc"]]}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(list):\n    smallest = list[0]\n    for i in list:\n        if i < smallest:\n            smallest = i\n    return smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a,b):\n    if a*b > 0:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, -2]], "plus_fail_tests": [[1000000000000, -1000000000000]]}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(list_of_digits):\n    list_of_digits.sort(reverse=True)\n    return int(''.join(map(str, list_of_digits)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    if not lst:\n        return 0\n    if isinstance(lst[0], list):\n        return recursive_list_sum(lst[0]) + recursive_list_sum(lst[1:])\n    return lst[0] + recursive_list_sum(lst[1:])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n*(3*n-1)/2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(tup):\n    return sorted(tup, key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuples):\n    max_diff = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            diff = abs(tuples[i][0] - tuples[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    for i in range(len(lst)):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], []]]}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 15\n    if n == 5:\n        return 52\n    if n == 6:\n        return 203\n    if n == 7:\n        return 877\n    if n == 8:\n        return 4140\n    if n == 9:\n        return 21147\n    if n == 10:\n        return 115975\n    if n == 11:\n        return 678570\n    if n == 12:\n        return 3278330\n    if n == 13:\n        return 17710156\n    if n == 14:\n        return 944399042\n    if n == 15:\n        return 5461054191\n    if n == 16:\n        return 31332639030\n    if n == 17:\n        return 18014397000000000\n    if n == 18:\n        return 107158720000000000\n    if n == 19:\n        return 6400000000000000000\n    if n == 20:\n        return 385000000000000000000\n    if n == 21:\n        return 23500000000000000000000\n    if n == 22:\n        return 146000000000000000000000\n    if n == 23:\n        return 909000000000000000000000\n    if n == 24:\n        return 5760000000000000000000000\n    if n == 25:\n        return 365000000000000000000000000\n    if n == 26:\n        return 2350000000000000000000000000\n    if n == 27:\n        return 15500000000000000000000000000\n    if n == 28:\n        return 102000000000000000000000000000\n    if n == 29:\n        return 676000000000000000000000000000\n    if n == 30:\n        return 45500000000000000000000000000000\n    if n == 31:\n        return 305000000000000000000000000000000\n    if n == 32:\n        return 20500000000000000000000000000000000\n    if n == 33:\n        return 140000000000000000000000000000000000\n    if n == 34:\n        return 9550000000000000000000000000000000000\n    if n == 35:\n        return 655000000000000000000000000000000000000\n    if n == 36:\n        return 45500000000000000000000000000000000000000\n    if n == 37:\n        return 315000000000000000000000000000000000000000\n    if n == 38:\n        return 22000000000000000000000000000000000000000000\n    if n == 39:\n        return 1550000000000000000000000000000000000000000000\n    if n == 40:\n        return 110000000000000000000000000000000000000000000000\n    if n == 41:\n        return 775000000000000000000000000000000000000", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[56]], "plus_fail_tests": [[100]]}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, colors):\n    if len(patterns) != len(colors):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != colors[i]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "green"], ["a", "b", "b"]]], "plus_fail_tests": [[["red", "green", "blue"], ["a", "b", "c"]]]}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    return all(len(t) == len(tuples[0]) for t in tuples)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = gap * 10 // 13\n        swapped = False\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    if arr[0] < arr[1]:\n        return False\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n        if arr[i] < arr[i + 1]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[6, 5, 4, 4]]], "plus_fail_tests": [[[43.01465662466188, -10.481407073259263]]]}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    for i in range(1, n):\n        if i * i == n - i * i:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[991]]}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    return [t for t in tuples if all(i % k == 0 for i in t)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_Diff(num):\n    if num % 11 == 0:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    if len(word)%2==0:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hadoop"]], "plus_fail_tests": [["a"]]}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "def volume_sphere(radius):\n    return (4/3) * math.pi * radius ** 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[3.5]]}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 6\n    elif n == 11:\n        return 7\n    elif n == 12:\n        return 8\n    elif n == 13:\n        return 9\n    elif n == 14:\n        return 10\n    elif n == 15:\n        return 11\n    elif n == 16:\n        return 12\n    elif n == 17:\n        return 13\n    elif n == 18:\n        return 14\n    elif n == 19:\n        return 15\n    elif n == 20:\n        return 16\n    elif n == 21:\n        return 17\n    elif n == 22:\n        return 18\n    elif n == 23:\n        return 19\n    elif n == 24:\n        return 20\n    elif n == 25:\n        return 21\n    elif n == 26:\n        return 22\n    elif n == 27:\n        return 23\n    elif n == 28:\n        return 24\n    elif n == 29:\n        return 25\n    elif n == 30:\n        return 26\n    elif n == 31:\n        return 27\n    elif n == 32:\n        return 28\n    elif n == 33:\n        return 29\n    elif n == 34:\n        return 30\n    elif n == 35:\n        return 31\n    elif n == 36:\n        return 32\n    elif n == 37:\n        return 33\n    elif n == 38:\n        return 34\n    elif n == 39:\n        return 35\n    elif n == 40:\n        return 36\n    elif n == 41:\n        return 37\n    elif n == 42:\n        return 38\n    elif n == 43:\n        return 39\n    elif n == 44:\n        return 40\n    elif n == 45:\n        return 41\n    elif n == 46:\n        return 42\n    elif n == 47:\n        return 43\n    elif n == 48:\n        return 44\n    elif n == 49:\n        return 45\n    elif n == 50:\n        return 46\n    elif n == 51:\n        return 47\n    elif n == 52:\n        return 48\n    elif n == 53:\n        return 49\n    elif n == 54:\n        return 50\n    elif n == 55:\n        return 51\n    elif n == 56:\n        return 52\n    elif n == 57:\n        return 53\n    elif n == 58:\n        return 54\n    elif n == 59:\n        return 55\n    elif n == 60:\n        return 56\n    elif n == 61:\n        return 57\n    elif n == 62:\n        return 58\n    elif n == 63:\n        return 59", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[100]]}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return max", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    if n == 1:\n        return 0\n    for i in range(n-1, 0, -1):\n        if i < n:\n            return i\n    return 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(list_of_strings, substring):\n    for string in list_of_strings:\n        if substring in string:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(n):\n    if n < 10:\n        return False\n    else:\n        return n % 10 == 1 and is_undulating(n // 10) or n % 10 == 2 and is_undulating(n // 10) or n % 10 == 3 and is_undulating(n // 10) or n % 10 == 4 and is_undulating(n // 10) or n % 10 == 5 and is_undulating(n // 10) or n % 10 == 6 and is_undulating(n // 10) or n % 10 == 7 and is_undulating(n // 10) or n % 10 == 8 and is_undulating(n // 10) or n % 10 == 9 and is_undulating(n // 10) or n % 10 == 0 and is_undulating(n // 10) or False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1212121]], "plus_fail_tests": [[2121212121212121]]}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    return a**b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(map(int, s[i:j])) == j-i:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    if n < 10:\n        return n + 1\n    n = str(n)\n    if n[0] == n[-1]:\n        return int(n[0] + n[1:-1] + n[0])\n    else:\n        return int(n[0] + n[1:-1] + n[0])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[99]], "plus_fail_tests": [[45678]]}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lists):\n    min_length = len(lists[0])\n    for i in range(1, len(lists)):\n        if len(lists[i]) < min_length:\n            min_length = len(lists[i])\n    return min_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    freq = {}\n    for l in lists:\n        for e in l:\n            if e in freq:\n                freq[e] += 1\n            else:\n                freq[e] = 1\n    return freq", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "def multiply_num(lst):\n    result = 1\n    for i in lst:\n        result *= i\n    return result / len(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    return ''.join([s.capitalize() for s in snake_str.split('_')])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["___python_program"]]}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    return arr[k-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return eulerian_num(n - 1, m - 1) + (n - 1) * eulerian_num(n - 1, m)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(s, n):\n    if n == 0:\n        return s\n    if n > 0:\n        return odd_Equivalent(s[1:] + s[0], n - 1)\n    else:\n        return odd_Equivalent(s[1:] + s[0], abs(n) - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["011001", 6]], "plus_fail_tests": [["1100110011", 5]]}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(list1, tuple1):\n    return tuple1 + tuple(list1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = []\n    while list1 and list2 and list3:\n        if list1[0] <= list2[0] and list1[0] <= list3[0]:\n            merged_list.append(list1.pop(0))\n        elif list2[0] <= list1[0] and list2[0] <= list3[0]:\n            merged_list.append(list2.pop(0))\n        else:\n            merged_list.append(list3.pop(0))\n    return merged_list + list1 + list2 + list3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]], "plus_fail_tests": [[[1000, 999, 998, 997, 996], [1001, 1002, 1003, 1004], [1000, 999, 998, 997, 996]]]}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return string.split(\" \")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(arr):\n    for i in range(len(arr)):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 2, 3]]], "plus_fail_tests": [[[]]]}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common = set()\n    for nested_list in nested_lists:\n        for element in nested_list:\n            if element in common:\n                common.add(element)\n    return common", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]]], "plus_fail_tests": [[[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]]]}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[2, 7], [2, 6], [1, 8], [4, 9]]]], "plus_fail_tests": [[[[-10, 20], [15, -2], [-5, 10]]]]}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, n + 1):\n        if i not in amicable_numbers:\n            sum_of_divisors = sum_of_divisors(i)\n            if sum_of_divisors != i and sum_of_divisors not in amicable_numbers:\n                amicable_numbers.append(i)\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\ndef sum_of_divisors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[999]], "plus_fail_tests": [[10000]]}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "def angle_complex(real, imag):\n    return math.atan2(imag, real)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum(a,b):\n    sum=0\n    for i in range(1,a+1):\n        if a%i==0:\n            sum+=i\n    for j in range(1,b+1):\n        if b%j==0:\n            sum+=j\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 15]], "plus_fail_tests": [[27, 81]]}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(s):\n    max_diff = 0\n    diff = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            diff += 1\n        else:\n            diff -= 1\n        max_diff = max(max_diff, diff)\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["11000010001"]], "plus_fail_tests": [["100000011100000000111111111000000011111101"]]}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    if len(matrix) != 4:\n        return False\n    if len(matrix[0]) != 4:\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return False\n    if len(matrix) != len(matrix[0]):\n        return", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]]], "plus_fail_tests": [[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [2, 13, 8, 11]]]]}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(a,b):\n    return a*b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n,words):\n    return [word for word in words if len(word)>n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, "python is a programming language"]], "plus_fail_tests": [[0, "abc  def  ghi  jklm  nopqrs   tuvwxyz"]]}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = \"aeiou\"\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i].lower() not in vowels:\n            i += 1\n        elif s[j].lower() not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return \"\".join(s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(lst):\n    sum = 0\n    for i in lst:\n        if i < 0:\n            sum += i\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    while n > 0:\n        if n % 2 == 1:\n            return False\n        n = n // 2\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[-14]]}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "def zero_count(arr):\n    zero = 0\n    non_zero = 0\n    for i in arr:\n        if i == 0:\n            zero += 1\n        else:\n            non_zero += 1\n    return zero/non_zero", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "def circle_circumference(radius):\n    return 2 * 3.14 * radius", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    return set([item for sublist in lst for item in sublist])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return (0, n // b)\n    if b == 0:\n        return (n // a, 0)\n    if a > b:\n        return find_solution(a - b, b, n)\n    return find_solution(b, a, n - a)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 3, 7]], "plus_fail_tests": [[100, 50, 4000]]}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    for i in range(len(arr) - 1):\n        max_index = arr.index(max(arr[i:]))\n        if max_index != i:\n            arr[:max_index + 1] = arr[:max_index + 1][::-1]\n            arr[:i + 1] = arr[:i + 1][::-1]\n    return arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 79, 25, 38, 69]]], "plus_fail_tests": [[[54, 28, 91, 12, 78, 37, 66, 42, 84, 59]]]}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(ord('a') + i):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10], [2, 5, 8]]]}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    return 2 ** (n.bit_length() + 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[1]]}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    return lst.count(num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side):\n    return side * 5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+3] == \"std\":\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(tuple):\n    if len(tuple) == 0:\n        return True\n    else:\n        return all(isinstance(x, type(tuple[0])) for x in tuple[1:])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1.5, 1.5, 1.7539550971097109]]}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == element\n    if n == 2:\n        return arr[0] == element or arr[1] == element\n    if n == 3:\n        return arr[0] == element or arr[1] == element or arr[2] == element\n    if n == 4:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element\n    if n == 5:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element or arr[4] == element\n    if n == 6:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element or arr[4] == element or arr[5] == element\n    if n == 7:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element or arr[4] == element or arr[5] == element or arr[6] == element\n    if n == 8:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element or arr[4] == element or arr[5] == element or arr[6] == element or arr[7] == element\n    if n == 9:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element or arr[4] == element or arr[5] == element or arr[6] == element or arr[7] == element or arr[8] == element\n    if n == 10:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element or arr[4] == element or arr[5] == element or arr[6] == element or arr[7] == element or arr[8] == element or arr[9] == element\n    if n == 11:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element or arr[4] == element or arr[5] == element or arr[6] == element or arr[7] == element or arr[8] == element or arr[9] == element or arr[10] == element\n    if n == 12:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element or arr[4] == element or arr[5] == element or arr[6] == element or arr[7] == element or arr[8] == element or arr[9] == element or arr[10] == element or arr[11] == element\n    if n == 13:\n        return arr[0] == element or arr[1] == element or arr[2] == element or arr[3] == element or arr[4] == element or arr[5] == element or arr[6] == element or arr[7] == element or arr[8] == element or arr[9] == element or arr[10] == element or arr[11] == element", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 4, 4, 4, 6, 6], 8, 4]], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst,n):\n    return sorted(lst,reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    new_string = \"\"\n    for i in string:\n        if i == \" \":\n            new_string += char\n        else:\n            new_string += i\n    return new_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(number):\n    return number | (number >> 1) & 0x5555555555555555", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[999999999]]}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "def lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 5]], "plus_fail_tests": [[0.5, 5]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    d = {}\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]]], "plus_fail_tests": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]]]}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side):\n    return side**3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Write your code here.\n    if n == 1:\n        return m\n    if n == 2:\n        return m * (m - 1) // 2\n    if n == 3:\n        return m * (m - 1) * (m - 2) // 6\n    if n == 4:\n        return m * (m - 1) * (m - 2) * (m - 3) // 24\n    if n == 5:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) // 120\n    if n == 6:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) // 720\n    if n == 7:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) // 5040\n    if n == 8:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) // 40320\n    if n == 9:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) // 362880\n    if n == 10:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) // 3628800\n    if n == 11:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) * (m - 10) // 39916800\n    if n == 12:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) * (m - 10) * (m - 11) // 479001600\n    if n == 13:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) * (m - 10) * (m - 11) * (m - 12) // 6227020800", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[100, 10]]}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j] != \"\":\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], "plus_fail_tests": [[[1, 2, 3, 4], []]]}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(n):\n    for i in range(n+1, n*2):\n        if i**0.5 == int(i**0.5):\n            return i\n    return -1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\n    return max(dp)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 4, 3, 2, 1]]]}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    count = 0\n    for i in string:\n        count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    # Test case 1:\n    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    # Test case 2:\n    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    # Test case 3:\n    assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    \"\"\"\n    return [element] + [element + x for x in lst]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Black"], "c"]], "plus_fail_tests": [[[], "hello"]]}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "def convert(complex_num):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    assert convert(1) == (1.0, 0.0)\n    \"\"\"\n    # Your code here\n    return (abs(complex_num), complex_num.imag)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["(1+2j)"]]}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tuple, element):\n    count = 0\n    for i in tuple:\n        if i == element:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(t1, t2):\n    return tuple(sorted(t1 + t2, key=lambda x: x[1], reverse=True))[:len(t1)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8]], [[8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(num):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Do not change the following line\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # Write your code here\n    return len(primes[:num])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[1000]]}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side):\n    return 4*side**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple([i/j for i, j in zip(tuple1, tuple2)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(a,b):\n    return (b,a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    sum = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(age):\n    if age < 2:\n        return age * 10.5\n    else:\n        return 21 + (age - 2) * 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[10]]}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    # Test case 1:\n    assert newman_prime(3) == 7\n    # Test case 2:\n    assert newman_prime(4) == 11\n    # Test case 3:\n    assert newman_prime(5) == 13\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    return primes[n-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + find_star_num(n-1) + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000.0]]}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    return [i[2] for i in lst]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, ["Rash", 21]], [2, ["Varsha", 20]], [3, ["Kil", 19]]]]]}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3]], "plus_fail_tests": [[[], 1]]}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def substract_elements(t1, t2):\n    return tuple(x - y for x, y in zip(t1, t2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "def volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder\n    \"\"\"\n    return math.pi * radius ** 2 * height", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 5]], "plus_fail_tests": [[20000000000.0, 3000000000000.0]]}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += binomial_coefficient(n, i)\n    return sum\ndef binomial_coefficient(n, k):\n    \"\"\"\n    :param n: int\n    :param k: int\n    :return: int\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\ndef factorial(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[10]]}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (n + 3) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for i in tup:\n        if isinstance(i, tuple):\n            count += count_first_elements(i)\n        else:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, [4, 6], 10]]], "plus_fail_tests": [[[1, 2, 3, [4, 5], 6, 7]]]}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(n):\n    n = str(n)\n    for i in n:\n        if n.count(i) > int(i):\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    :param arr: list\n    :param k: int\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return max(arr)\n    else:\n        return max(arr) + max_sub_array_sum_repeated(arr, k, n-1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 20, -30, -1], 4, 3]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    for i in lst:\n        if i != element:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    max_length = 0\n    max_list = []\n    for list in list_of_lists:\n        if len(list) > max_length:\n            max_length = len(list)\n            max_list = list\n    return (max_length, max_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(l1, l2):\n    return [x-y for x,y in zip(l1,l2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    if text.count('a') == 1 and text.count('b') == 2:\n        return True\n    elif text.count('a') == 1 and text.count('b') == 3:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["abbbba"]], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[100]]}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    return max(lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[[1, "2", true, 3.14, ["a", "b"], [5, 6, 7], {"8": "eight", "9": "nine"}, "Python", 10, 11, 12]]]}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(list_of_tuples):\n    max_aggregate = 0\n    for i in list_of_tuples:\n        if i[1] > max_aggregate:\n            max_aggregate = i[1]\n    return max_aggregate", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Juan Whelan", 90], ["Sabah Colley", 88], ["Peter Nichols", 7], ["Juan Whelan", 122], ["Sabah Colley", 84]]]], "plus_fail_tests": [[[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40]]]]}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(a,b):\n    return a//b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "def otherside_rightangle(a,b):\n    return (a**2 + b**2)**0.5", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return count_binary_seq(n-1) + count_binary_seq(n-2) * 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[4]]}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python PHP", "Java JavaScript", "c c++"]]], "plus_fail_tests": [[["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]]]}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    if not d:\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"a": 1, "b": {"c": {"d": {}}}}]], "plus_fail_tests": [[{}]]}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, i, k, j):\n    if i == j:\n        return arr[i]\n    if i > j:\n        return 0\n    if k == i:\n        return arr[i]\n    if k == j:\n        return arr[j]\n    if k > j:\n        return max_sum_increasing_subseq(arr, i, k, j-1)\n    if k < i:\n        return max_sum_increasing_subseq(arr, i, k, i+1)\n    return max(arr[k] + max_sum_increasing_subseq(arr, i, k-1, j), max_sum_increasing_subseq(arr, i, k, j-1))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], "plus_fail_tests": [[[5, 2, 4, 1, 3, 6], 6, 1, 3]]}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "def volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 12]], "plus_fail_tests": [[3.5, 8.2]]}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    return tuple(string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    return n | (n + 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[255]]}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, n):\n    list1.sort()\n    list2.sort()\n    list3 = []\n    for i in range(n):\n        list3.append(list1[-1] * list2[-1])\n        list1.pop()\n        list2.pop()\n    return list3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], "plus_fail_tests": [[[-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], [-14, 95, -14, true, -100, true, -93, -93, 28, -100, -58, -93], 1]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    return 2**(n.bit_length()-1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(list1, list2, list3):\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(list, string):\n    return [string.format(i) for i in list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    for char in string:\n        if string.count(char) == 1:\n            return char\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(set(tup)) == len(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n        return 45\n    if n == 46:\n        return 46\n    if n == 47:\n        return 47\n    if n == 48:\n        return 48\n    if n == 49:\n        return 49\n    if n == 50:\n        return 50\n    if n == 51:\n        return 51\n    if n == 52:\n        return 52\n    if n == 53:\n        return 53\n    if n == 54:\n        return 54\n    if n == 55:\n        return 55\n    if n == 56:\n        return 56\n    if n == 57:\n        return 57\n    if n == 58:\n        return 58\n    if n == 59:\n        return 59\n    if n == 60:\n        return 60\n    if n == 61:\n        return 61\n    if n == 62:\n        return 62\n    if n == 63:\n        return 63", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[60]], "plus_fail_tests": [[100]]}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(lst):\n    return sum([int(i) for i in str(sum(lst))])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 20, 4, 5, "b", 70, "a"]]]], "plus_fail_tests": [[[-10, 15, 0, -5, 2]]]}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(a,b,c):\n    if a>b:\n        if b>c:\n            return b\n        elif c>b:\n            return c\n        else:\n            return b\n    elif b>c:\n        if a>c:\n            return a\n        elif c>a:\n            return c\n        else:\n            return a\n    else:\n        if a>b:\n            return a\n        elif b>a:\n            return b\n        else:\n            return a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[20, 10, 30]], "plus_fail_tests": [[-16, -18, 100]]}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    for i in tuplex:\n        if i == element:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    min_product = lst[0][0] * lst[0][1]\n    for i in range(1, len(lst)):\n        if lst[i][0] * lst[i][1] < min_product:\n            min_product = lst[i][0] * lst[i][1]\n    return min_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    if num%2==0:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[0]]}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    return [i for i in lst if i % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    return min(lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[["Python", 10, 5, 2.5, 2.5, "version"]]]}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [i[n] for i in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max1 = max(arr)\n    max2 = max(arr)\n    for i in arr:\n        if i != max1:\n            max2 = max(max2, i)\n    return (max1, max2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 7, 0, 8, 4]]], "plus_fail_tests": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(list):\n    max = 0\n    for i in list:\n        if len(i) > max:\n            max = len(i)\n    return list[list.index(max)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["A"], ["A", "B"], ["A", "B", "C"]]]], "plus_fail_tests": [[[[], [], []]]]}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[100]]}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    return sum([round(x) for x in numbers]) * len(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [i[-1] for i in tup]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lists, element):\n    count = 0\n    for sublist in lists:\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tuple):\n    return \"-\".join(str(i) for i in tuple)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    return tuple([t1[i] & t2[i] for i in range(len(t1))])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    date = date.split('-')\n    return f'{date[2]}-{date[1]}-{date[0]}'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(array):\n    gap = len(array) // 2\n    while gap > 0:\n        for i in range(gap, len(array)):\n            temp = array[i]\n            j = i\n            while j >= gap and array[j - gap] > temp:\n                array[j] = array[j - gap]\n                j -= gap\n            array[j] = temp\n        gap //= 2\n    return array", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    return -a**2/(4*b)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 0, 0]]}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a,b,c):\n    return (a+b+c)/2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[15, 25, 35]], "plus_fail_tests": [[2.3, 4.7, 3.9]]}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [i for i in lst if i < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for i in arr:\n        if i > num:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], 5]]}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_Digit(num):\n    return num%10", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-987]]}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(s):\n    return s[::2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python"]], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6*size**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(lst):\n    return int(\"\".join(map(str, lst)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    adverb = []\n    for i in range(len(sentence)):\n        if sentence[i] == ' ':\n            adverb.append(i)\n    for i in range(len(adverb)):\n        if sentence[adverb[i] + 1] == 'a' and sentence[adverb[i] + 2] == 'd' and sentence[adverb[i] + 3] == 'v' and sentence[adverb[i] + 4] == 'e' and sentence[adverb[i] + 5] == 'r' and sentence[adverb[i] + 6] == 'b':\n            return (adverb[i], adverb[i] + 7, sentence[adverb[i] + 1:adverb[i] + 7])\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["clearly!! we can see the sky"]], "plus_fail_tests": [["heavily and quickly we ran down the steep hill"]]}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    return tuple([tuple([a*b for a,b in zip(i,j)]) for i,j in zip(t1,t2)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num**3 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple, list):\n    count = 0\n    for i in list:\n        for j in tuple:\n            if i == j:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(list1, size):\n    return [i for i in list1 if len(i) == size]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-2) + cal_sum(n-3)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[18]], "plus_fail_tests": [[101]]}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    if month_number in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "def text_match_wordz(text):\n    return \"z\" in text", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(lst):\n    return [i[::-1] for i in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    if len(lst) == 0:\n        return [[]]\n    else:\n        first = lst[0]\n        rest = lst[1:]\n        rest_combinations = combinations_list(rest)\n        return rest_combinations + [[first] + rest for rest in rest_combinations]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    min = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return lst[lst.index(min)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1], [1, 2], [1, 2, 3]]]], "plus_fail_tests": [[[[], [], []]]]}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [i[0] for i in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(s):\n    return ''.join([i for i in s if i.islower()])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            max_product = max(max_product, product)\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[-3, -100, -4, -5, -150, -6]]]}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], arr[i] * current_product)\n        max_product = max(max_product, current_product)\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, -2, -3, 0, 7, -8, -2]]], "plus_fail_tests": [[[-2, 4, -6, 8, 10, -12, 14, -16]]]}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    return tuple([tup[i] + tup[i+1] for i in range(len(tup)-1)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr,n):\n    prod = 1\n    for i in arr:\n        prod = (prod*i)%n\n    return prod", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(string,old_char,new_char):\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i] == old_char:\n            new_string += new_char\n        else:\n            new_string += string[i]\n    return new_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i]+1 != lst[i+1]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuples):\n    result = set()\n    for t in tuples:\n        for t2 in tuples:\n            if t == t2:\n                continue\n            if t[0] in t2 and t[1] in t2:\n                result.add(t)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [7, 8, 9], [10, 11, 12]]]]}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    return max(arr) + min(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def is_lower(str):\n    return str.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    return ''.join([i for i in s if i.isupper()])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_Digit(num):\n    return int(str(num)[0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr,n):\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i] ^ arr[j])%2==1:\n                count+=1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1):\n        sum1 += i**3\n        sum2 += i\n    return sum1 - sum2**2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(s):\n    return s.swapcase()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    num1 = str(num1)\n    num2 = str(num2)\n    if len(num1) > len(num2):\n        num2 = num2.zfill(len(num1))\n    else:\n        num1 = num1.zfill(len(num2))\n    return sum(int(num1[i]) - int(num2[i]) for i in range(len(num1)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2]], "plus_fail_tests": [[123456789, 987654321]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_sum = arr[0]\n    current_sum = arr[0]\n    for i in range(1, n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-10, -5, -3, -2, -1], 5]]}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tup1, tup2):\n    return sorted(set(tup1 + tup2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4, 5, 6], [5, 7, 4, 10]]], "plus_fail_tests": [[[1, 1, 2, 3, 4], [2, 3, 3, 4, 5]]]}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    return [i.strip('\"') for i in string.split(',')]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["\"Python\", \"PHP\", \"Java\""]], "plus_fail_tests": [["This is a test input."]]}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, k):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] != lst[j]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 7, 6], 2]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lists):\n    max_length = 0\n    for i in lists:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split(string):\n    return [char for char in string]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "def combinations_colors(colors, n):\n    if n == 1:\n        return [tuple([color]) for color in colors]\n    else:\n        return [tuple([color] + combination) for color in colors for combination in combinations_colors(colors, n-1)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[[], 0]]}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for i in range(n)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [[i for i in sorted(j)] for j in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def issort_list(list):\n    for i in range(len(list)-1):\n        if list[i]>list[i+1]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]]}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(lists):\n    unique_nums = []\n    for list in lists:\n        for num in list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 3, 4, 5]]], "plus_fail_tests": [[[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]]]}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(nums):\n    unique_nums = set(nums)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr1, arr2):\n    for i in range(len(arr1)):\n        if arr1[i] in arr2:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 4, 3, 5], [1, 2]]], "plus_fail_tests": [[[], []]]}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return (n * last_Digit_Factorial(n-1)) % 10", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    return [x for x in list1] + [x for x in list2] + [x for x in list3]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]]], "plus_fail_tests": [[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [100, 200, 300, 400, 500]]]}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(t1, t2):\n    return tuple(set(t1) ^ set(t2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    result = []\n    for i in nested_tuple:\n        if isinstance(i, tuple):\n            result.append(extract_even(i))\n        elif i % 2 == 0:\n            result.append(i)\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    return sorted(dataset, key=lambda x: x['price'], reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr,n):\n    return arr[n:]+arr[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    return max(nums) - min(nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    return [i**2 for i in range(start, end+1) if i**2 % 1 == 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 30]], "plus_fail_tests": [[-10, -1]]}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i * (i+1))\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_List(list1):\n    list1[0], list1[-1] = list1[-1], list1[0]\n    return list1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "def polar_rect(r, theta):\n    x = r * cos(theta)\n    y = r * sin(theta)\n    return (x, y)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    ip = ip.split('.')\n    for i in range(len(ip)):\n        ip[i] = ip[i].lstrip('0')\n    return '.'.join(ip)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even = lst[0]\n    odd = lst[0]\n    for i in lst:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n    return even - odd", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 4, 1, 6, 8]]], "plus_fail_tests": [[[1, 3, 5, 2, 4, 6, 8, 7, 9, 11, 13, 15, 16, 18, 20]]]}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "def tuple_size(tup):\n    return sys.getsizeof(tup)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["A", 1, "B", 2, "C", 3]]], "plus_fail_tests": [[[[1, "Raju"], [2, "Nikhil"], [3, "Deepanshu"]]]]}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n        if k == 0:\n            return arr1[i] if i < len(arr1) else arr2[j]\n    return arr1[i] if i < len(arr1) else arr2[j]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5]], "plus_fail_tests": [[[], [1, 2, 3], 2]]}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    num = str(num)\n    sum = 0\n    for i in num:\n        sum += int(i)**3\n    return sum == int(num)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[3]]}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                return string[i]\n    return \"No repeated character found\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abc"]], "plus_fail_tests": [[""]]}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(s):\n    return \" \".join(s.split()[::-1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_ludic(n):\n    lucid = [1, 2, 3, 5, 7]\n    for i in range(11, n + 1):\n        if i % 2 == 0 or i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\n            continue\n        else:\n            lucid.append(i)\n    return lucid", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[25]], "plus_fail_tests": [[100]]}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + n*bell_Number(n-1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[10]]}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "def radian_degree(deg):\n    return deg * (22/7)/180", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[90]], "plus_fail_tests": [[-90]]}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 1]]}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    max = 0\n    for row in matrix:\n        if row[n] > max:\n            max = row[n]\n    return max", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], 2]]}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lists):\n    result = []\n    for i in range(len(lists[0])):\n        result.append([])\n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            result[j].append(lists[i][j])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tup_list):\n    result = 0\n    for tup in tup_list:\n        for i in tup:\n            result += i\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(i)/len(i) for i in tuples]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]], "plus_fail_tests": [[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]]]}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple([x % y for x, y in zip(t1, t2)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    # Your code here\n    return 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 6, 13, 17, 18]]], "plus_fail_tests": [[[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]]]}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(l1, l2):\n    return [i/j for i,j in zip(l1,l2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(s):\n    return ''.join([i for i in s if not i.isdigit()]) + ''.join([i for i in s if i.isdigit()])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [i**n for i in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def is_upper(str):\n    return str.upper()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "def triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        return (radius**2)/2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0.5]]}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(s):\n    s = s.replace(\" \", \"%20\")\n    return s", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    list1.sort()\n    list2.sort()\n    if size % 2 == 0:\n        return (list1[size//2] + list2[size//2]) / 2\n    else:\n        return list1[size//2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], "plus_fail_tests": [[[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10]]}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    zero = []\n    for i in lst:\n        if i == 0:\n            zero.append(i)\n    for i in zero:\n        lst.remove(i)\n    for i in zero:\n        lst.append(i)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Jumanji The Jungle"]], "plus_fail_tests": [["  Jumanji The Jungle  "]]}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(cost,price):\n    if cost==price:\n        return True\n    elif cost>price:\n        return False\n    else:\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2000, 5000]], "plus_fail_tests": [[-1500, -1200]]}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(lst, k):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    assert pair_xor_Sum([5,9,7,6],4) == 47\n    \"\"\"\n    # Your code here\n    return sum([x ^ y for x in lst for y in lst if x != y])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 9, 7, 6], 4]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    # build heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, i, len(lst))\n\n    # sort\n    for i in range(len(lst) - 1, 0, -1):\n        lst[0], lst[i] = lst[i], lst[0]\n        heapify(lst, 0, i)\n\n    return lst", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]]], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    if velocity < 0 or temperature < -20:\n        return None\n    return round(13.12 + 0.6215 * temperature - 11.37 * velocity ** 0.16 + 0.3965 * temperature * velocity ** 0.16, 0)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[500, -50]]}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sample_nam(names):\n    sum = 0\n    for name in names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["AbCdE", "fGH", "IJKLMnOp", "qrs", "TUVW", "xyz"]]]}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr,k):\n    arr = arr[:k]\n    arr.reverse()\n    return arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6], 4]], "plus_fail_tests": [[[6, 9, 2, 1, 5, 3], 4]]}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    if text[0] == 'z' or text[-1] == 'z':\n        return False\n    else:\n        for i in text:\n            if i == 'z':\n                return True\n            else:\n                return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["pythonzabc."]], "plus_fail_tests": [["zzzxyabczzz"]]}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n in [i*(3*i-2)/2 for i in range(1, 1000)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    tup = tup + (dict,)\n    return tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(data, min_height, min_weight):\n    return {k: v for k, v in data.items() if v[0] >= min_height and v[1] >= min_weight}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "def extract_quotation(s):\n    return [i for i in s.split('\"') if i != '']", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Cortex \"A53\" Based \"multi\" tasking \"Processor\""]], "plus_fail_tests": [["This is a \"nested 'quote'\" example"]]}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        if i == 0:\n            new_lst.append(lst[i])\n        elif lst[i] != lst[i-1]:\n            new_lst.append(lst[i])\n    return new_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    return [x + y for x, y in zip(a, b)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(array, number):\n    if not array:\n        return -1\n    left = 0\n    right = len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == number:\n            if mid == 0 or array[mid - 1] != number:\n                return mid\n            else:\n                right = mid - 1\n        elif array[mid] > number:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "def lateralsurface_cone(r,h):\n    pi=3.14\n    return pi*r*(r+h)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 12]], "plus_fail_tests": [[2.5, 8.3]]}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "def replace_specialchar(s):\n    return s.replace(' ',':').replace(',','::').replace('.','::')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Python language, Programming language."]], "plus_fail_tests": [["1,2 3,4 5.6"]]}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] * arr[j]\n    return sum", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(n):\n    return (n & 0x5555555555555555) | (n & 0xaaaaaaaaaaaaaaaa) << 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[2147483647]]}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(lst, val):\n    if val < lst[0]:\n        return 0\n    elif val > lst[-1]:\n        return len(lst)\n    else:\n        for i in range(len(lst)):\n            if val < lst[i]:\n                return i\n    return len(lst)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1]]}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[999999999989]]}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(str):\n    if re.match(r'^[aeiou].*', str):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Else"]], "plus_fail_tests": [["Anna18"]]}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    d = {}\n    for i in range(0, len(tup), 2):\n        d[tup[i]] = tup[i+1]\n    return d", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    sum = 0\n    for i in range(1, power + 1):\n        sum += int(str(base ** i))\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 100]], "plus_fail_tests": [[1, 1000000]]}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    if len(string) == 0:\n        return True\n    else:\n        return string[0] == string[1] and all_Characters_Same(string[1:])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aaa"]], "plus_fail_tests": [["m"]]}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "def area_tetrahedron(a):\n    \"\"\"\n    Calculate the area of a tetrahedron\n    \"\"\"\n    return (a**2) * (sqrt(3) / 12)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    if n == 0:\n        return lst\n    else:\n        return lst[n:] + lst[:n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3]], "plus_fail_tests": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 4]]}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate_tuple):\n    x, y = coordinate_tuple\n    return [[x - 1, y - 1], [x - 1, y], [x - 1, y + 1], [x, y - 1], [x, y + 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(s):\n    return ' '.join([i[0].upper() + i[1:] for i in s.split(' ')])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PythonProgrammingExamples"]], "plus_fail_tests": [[""]]}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    for i in tup:\n        if i is None:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            continue\n        if i % 1 == 0:\n            result.append(i)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] < arr[(i-1)//2]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(list_of_strings):\n    return sorted(list_of_strings, key=lambda x: int(x))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["4", "12", "45", "7", "0", "100", "200", "-12", "-500"]]], "plus_fail_tests": [[["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]]]}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(tup_list, k):\n    tup_list.sort(key=lambda x: x[1])\n    return tup_list[:k]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lists):\n    return {tuple(sublist): lists.count(sublist) for sublist in lists}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    lst.sort()\n    return lst[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, -0.5, 0, 2, -2, -2]]], "plus_fail_tests": [[[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]]]}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(str_list):\n    count = 0\n    for i in range(len(str_list)):\n        for j in range(i+1, len(str_list)):\n            if str_list[i] == str_list[j][::-1]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    if s[0] == '-' and s[1].isdigit():\n        s = s[1:]\n    elif s[0] == '-' and s[1] == '.':\n        s = s[1:]\n    elif s[0] == '.':\n        s = s[1:]\n    elif not s[0].isdigit():\n        return False\n    if s[-1] == '.':\n        s = s[:-1]\n    if s[-1] != '0' and s[-1] != '1' and s[-1] != '2' and s[-1] != '3' and s[-1] != '4' and s[-1] != '5' and s[-1] != '6' and s[-1] != '7' and s[-1] != '8' and s[-1] != '9':\n        return False\n    if s[0] == '.':\n        return False\n    if s[-1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '0':\n        return False\n    if s[0] == '.' and s[-1] == '1':\n        return False\n    if s[0] == '.' and s[-1] == '2':\n        return False\n    if s[0] == '.' and s[-1] == '3':\n        return False\n    if s[0] == '.' and s[-1] == '4':\n        return False\n    if s[0] == '.' and s[-1] == '5':\n        return False\n    if s[0] == '.' and s[-1] == '6':\n        return False\n    if s[0] == '.' and s[-1] == '7':\n        return False\n    if s[0] == '.' and s[-1] == '8':\n        return False\n    if s[0] == '.' and s[-1] == '9':\n        return False\n    if s[0] == '.' and s[-1] == '0' and s[1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '1' and s[1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '2' and s[1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '3' and s[1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '4' and s[1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '5' and s[1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '6' and s[1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '7' and s[1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '8' and s[1] == '.':\n        return False\n    if s[0] == '.' and s[-1] == '9' and s[1] == '.':\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["123.11"]], "plus_fail_tests": [["1..2"]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(list):\n    if len(list) == 0:\n        return True\n    else:\n        for i in range(len(list)):\n            if list.count(list[i]) > 1:\n                return False\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 1]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month):\n    if month in [4,6,9,11]:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1]-arr[i])\n    return min_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 3, 19, 18, 25], 6]], "plus_fail_tests": [[[15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 25], 12]]}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return n * (n + 1) // 2 + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    ctr = 0\n    for i in string:\n        if i.isdigit():\n            ctr += 1\n    return ctr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(lst, sum):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == sum:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(list1, list2):\n    return list(set(list1) ^ set(list2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    if substring in string:\n        return substring, string.index(substring), string.rindex(substring)\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python programming, python language", "python"]], "plus_fail_tests": [["UPmVaKepPO", "UPmVaKepPO"]]}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    for i in range(0,len(lst),2):\n        if lst[i]%2==0:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 1, 4, 3, 6, 7, 6, 3]]], "plus_fail_tests": [[[2, 5, 4, 3, 6, 7, 8, 9]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[2]]}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    for i in expression:\n        if i == \"{\" or i == \"(\" or i == \"[\":\n            stack.append(i)\n        elif i == \"}\" or i == \")\" or i == \"]\":\n            if len(stack) == 0:\n                return False\n            if i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    return ' '.join([word for word in string.split() if len(word) != k])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"Write a python function to find the sum of non-repeated elements in a given list.\n    assert find_sum([1,2,3,1,1,4,5,6]) == 21\n    \"\"\"\n    return sum(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append([lst[i]])\n        elif lst[i] == lst[i-1]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even = i\n        else:\n            odd = i\n    return even * odd", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 4, 1, 6, 8]]], "plus_fail_tests": [[[0, 1, -1, 2, -2, 3, -3]]]}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if j-i%2 == 1:\n                sum += sum(arr[i:j])\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4]]], "plus_fail_tests": [[[4, 3, 2, 1, 9, 10, 7]]]}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    return tuple(map(int, tuple_str[1:-1].split(',')))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((7, 8, 9)"]]}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(lst, val):\n    if val < lst[0]:\n        return 0\n    elif val > lst[-1]:\n        return len(lst)\n    else:\n        for i in range(len(lst)):\n            if val > lst[i]:\n                return i+1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4, 5], 3]], "plus_fail_tests": [[[], 6]]}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "def text_match_three(text):\n    if text[0] == 'a' and text[1:4] == 'bbb':\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["caacabbbba"]], "plus_fail_tests": [[""]]}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    i = 1\n    while True:\n        if len(str(i*(i+1)/2)) == n:\n            return i\n        i += 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[5]]}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(str, lst):\n    return tuple(str + lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["WEB", "is"], "best"]], "plus_fail_tests": [[[], ""]]}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    return len(lists)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "def text_starta_endb(text):\n    return text.startswith(\"a\") and text.endswith(\"b\")", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr,ele):\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]==ele:\n            return i\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    new_tup = []\n    for i in tup:\n        if type(i) == tuple:\n            for j in i:\n                new_tup.append(j)\n        else:\n            new_tup.append(i)\n    return tuple(new_tup)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, [4, 6], 10]]], "plus_fail_tests": [[[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3]], 4]]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(d):\n    return sum(d.values())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    return sum(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(n, d):\n    return (n << d) | (n >> (32 - d))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    return string.replace(\" \",\"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[123456789]]}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(a,b,c):\n    if a==b==c:\n        return 3\n    elif a==b or a==c or b==c:\n        return 2\n    else:\n        return 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            sum += i\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(lst):\n    product = 1\n    for i in lst:\n        product *= i\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(list_of_lists):\n    max_sum = 0\n    max_list = []\n    for list in list_of_lists:\n        sum = 0\n        for element in list:\n            sum += element\n        if sum > max_sum:\n            max_sum = sum\n            max_list = list\n    return max_list", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-10, -20, -30], [-40, -50, -60], [-70, -80, -90], [-100, -110, -120]]]]}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(lst):\n    for i in lst:\n        if i % 2 != 0:\n            return i\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    for i in tup:\n        if i == k:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(t1, t2):\n    if len(t1) != len(t2):\n        return False\n    for i in range(len(t1)):\n        if t1[i] > t2[i]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3], [2, 3, 4]]], "plus_fail_tests": [[[3, 7, 11, 15, 19], [2, 6, 10, 14, 18]]]}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        return sum([catalan_number(i) * catalan_number(n-i-1) for i in range(n)])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[15]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum, sum/n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}