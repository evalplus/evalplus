{"date": "2024-08-09 20:34", "hash": "fe585eb4df8c88d844eeb463ea4d0302", "eval": {"HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List\nimport re\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those groups into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string\n    \"\"\"\n    # Regular expression pattern for matching balanced parentheses groups\n    pattern = r'\\(([^()]*)\\)'\n\n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, paren_string)\n\n    # Return the list of matched groups\n    return matches", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["(()()) ((())) () ((())()())"]], "plus_fail_tests": [["()"]]}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\n    :param numbers: List of integers\n    :param delimeter: Integer to be inserted between elements\n    :return: List with delimeter inserted between elements\n    \"\"\"\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[], 7]], "plus_fail_tests": [[[], 2]]}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from typing import List\nimport re\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n\n    def depth_first_search(match):\n        level = 1\n        for parenthesis in match.group(0):\n            level += 1 if parenthesis == '(' else level - 1\n        return level\n\n    pattern = re.compile(r'\\(([^()]*)\\)')\n    result = []\n    match = pattern.findall(paren_string)\n\n    for parentheses in match:\n        result.append(depth_first_search(re.search(r'\\(([^()]*)\\)', parentheses).group(0)))\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["(()()) ((())) () ((())()())"]], "plus_fail_tests": [["((()))"]]}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = ''\n    for i in range(len(a) if len(a) > len(b) else len(b)):\n        if i < len(a) and i < len(b):\n            bitwise_xor = int(a[i]) ^ int(b[i])\n            result += str(bitwise_xor).zfill(2)[-1]\n        elif i < len(a):\n            result += a[i]\n        else:\n            result += b[i]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    return len(list(filter(lambda x, y: abs(x - y) < threshold, numbers))) > 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3]], "plus_fail_tests": [[[1.0, 2.5, 3.0, 4.5, 5.0, 6.5], 0.4]]}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"List cannot be empty\")\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(num - mean) for num in numbers) / len(numbers)\n    return mad", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]):\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance.\n        Your task is to detect if at any point the balance of account falls below zero, and\n        at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    account_balance = 0\n    for operation in operations:\n        account_balance += operation\n        if account_balance < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    sum_ = 0\n    product_ = 1\n\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n\n    return (sum_, product_)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n\n    :param strings: List of strings\n    :param substring: Substring to filter by\n    :return: List of strings that contain the given substring\n    \"\"\"\n    return [s for s in strings if substring in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef longest_palindrome_suffix(string: str) -> str:\n    \"\"\" Find the longest palindromic suffix of a given string \"\"\"\n    n = len(string)\n    start = max((i for i in range(n, 0, -1) if is_palindrome(string[:i])))\n    return string[start:]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    suffix = longest_palindrome_suffix(string)\n    prefix = suffix[:len(suffix) // 2] if len(suffix) % 2 == 0 else suffix[:len(suffix) // 2] + suffix[len(suffix) // 2 + 1:]\n    return prefix + suffix + prefix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[""]], "plus_fail_tests": [["race"]]}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(max(num, result[-1]))\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    \"\"\"\n    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[""]], "plus_fail_tests": [["Hello there!"]]}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "def get_positive(l):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    return [num for num in l if num > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4, 4]]]}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\n    :param values: List of any python values\n    :return: List of integers present in the given list\n    \"\"\"\n    return list(filter(isinstance, values, int))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[]]], "plus_fail_tests": [[[1, 2, 3, 4, 5]]]}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n\n    :param strings: List of strings\n    :param prefix: String prefix\n    :return: List of strings that start with the given prefix\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]):\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number). \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements.\")\n\n    min_diff = float('inf')\n    closest_numbers = None\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            current_diff = abs(numbers[i] - numbers[j])\n            if current_diff < min_diff:\n                min_diff = current_diff\n                closest_numbers = (numbers[i], numbers[j])\n\n    return closest_numbers", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[1.0, 2.0, 5.9, 4.0, 5.0]]], "plus_fail_tests": []}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\nimport math\ndef is_prime(n: int) -> bool:\n    \"\"\" Check if given number is prime \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    \"\"\"\n    factors = []\n    i = 2\n    while n % i != 0:\n        i += 1\n        if i > int(math.sqrt(n)):\n            if is_prime(n):\n                factors.append(n)\n                break\n    while n % i == 0:\n        factors.append(i)\n        n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3249]], "plus_fail_tests": [[131]]}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    beats_per_note = {\n        'o': 4,\n        'o|': 2,\n        '|': 1\n    }\n    notes = []\n    current_note = ''\n    for symbol in music_string:\n        if symbol in beats_per_note:\n            if current_note:\n                notes.append(beats_per_note[current_note])\n            current_note = symbol\n        elif current_note:\n            notes[-1] += beats_per_note[current_note]\n    notes.append(beats_per_note[current_note])\n    return notes", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[""]], "plus_fail_tests": [["o o| o| o|"]]}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    valid_numbers = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    input_numbers = numbers.split()\n    sorted_numbers = [num for num in input_numbers if num in valid_numbers]\n    return ' '.join(sorted(sorted_numbers))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["three five nine"]], "plus_fail_tests": [["four eight two"]]}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n\n    :param string: The original string\n    :param substring: The substring to search for\n    :return: The number of occurrences of the substring in the original string\n    \"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += len(substring)\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["cacacacac", "cac"]], "plus_fail_tests": [["ababa", "aba"]]}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    return len(set(string.lower()))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int):\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "def unique(l):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return list(set(l)) if isinstance(l, (list, tuple)) else list(set(iterable=iter(l)))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-1, 5, -1, 3, 5, 2, 5]]]}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "def is_divisible_by_thirteen(n):\n    \"\"\"Check if a number is divisible by 13.\"\"\"\n    return bool(int(str(n)[-1]) % 13 == 0)\ndef fizz_buzz(n):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(n):\n        if is_divisible_by_eleven(i) or is_divisible_by_thirteen(i):\n            if str(i).count('7') > count:\n                count = str(i).count('7')\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[50]], "plus_fail_tests": [[1]]}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "import math\ndef poly(xs, x):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs):\n    \"\"\"\n    Finds the zero point of a polynomial with given coefficients xs.\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[0] == 0:\n        raise ValueError(\"find_zero only takes even number of coefficients \"\n                         \"with the largest non-zero coefficient.\")\n\n    n = len(xs) // 2\n    return (-xs[n] / xs[n] + math.sqrt(math.pow(xs[n], 2) + 4 * poly(xs[1:], n)) / 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-10, -2]]], "plus_fail_tests": [[[5, 10, -3, 1]]]}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "import math\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        next_number = a + b\n        if is_prime(next_number):\n            return next_number\n        a, b = b, next_number", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[11]]}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "def sort_even(l):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \"\"\"\n    odd_indices = [i for i, _ in enumerate(l) if i % 2 != 0]\n    even_indices = [i for i, _ in enumerate(l) if i % 2 == 0]\n\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n\n    return [l[i] if i not in even_indices else sorted_even_values[even_indices.index(i)] for i in range(len(l))]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    if len(s) % 3 != 0:\n        raise ValueError(\"Input string must have no remainder when divided by 3.\")\n\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    return \"\".join([group[1:] for group in groups])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["uzfplzjfzcltmdly"]], "plus_fail_tests": [["abcdefghijk"]]}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "def sort_third(l):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    index_list = [i for i, index in enumerate(l) if index % 3 != 0]\n    non_sorted_indices = [i for i, index in enumerate(l) if index % 3 == 0]\n\n    result = l[:]\n    for index in non_sorted_indices:\n        value = result.pop(index)\n        result[index] = next((val for i, val in enumerate(result) if i % 3 == index % 3 and val < value), value)\n\n    return [result[i] for i in index_list] + list(sorted(result[::3]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": [[[9, 12, 15, 6, 3, 8, 10, 23, 7]]]}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "def max_element(l):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    seen = set()\n    for num in l:\n        target = -num\n        if target in seen:\n            return True\n        seen.add(num)\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [i + 1 for i in l]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x, base):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n\n    def int_to_base(num, base):\n        if num == 0:\n            return ''\n        digits = '0123456789ABCDEF'[num % base:num % base + base]\n        return digits + int_to_base(num // base, base)\n\n    return int_to_base(abs(x), base)[::-1] if x >= 0 else '-' + int_to_base(-x, base)[::-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8, 3]], "plus_fail_tests": [[10, 5]]}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(numbers):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that sum to zero,\n    and False otherwise.\n    \"\"\"\n    if len(numbers) < 3:\n        return False\n\n    numbers.sort()\n    for i in range(len(numbers) - 2):\n        if numbers[i] + numbers[i+1] + numbers[i+2] == 0:\n            return True\n        if numbers[i] > -numbers[i+1]:\n            break\n\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, -1, 0, 0, 2, -2]]]}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "def triangle_area(base, height):\n    \"\"\"Given length of a base and height, return area for a triangle.\"\"\"\n    return 0.5 * base * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "def fib4(n):\n    if n < 4:\n        return 0 if n % 2 else 2\n\n    fib_sequence = [0, 0, 2]\n    for _ in range(4, n+1):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3])\n\n    return fib_sequence[-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8]], "plus_fail_tests": [[9]]}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    text = text.lower()  # Convert text to lowercase for case-insensitive comparison\n    return text == text[::-1]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Rats live on no evil star"]]}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "def median(l):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n = n // 2\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 5]], "plus_fail_tests": [[5, 17]]}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(num < t for num in l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        raise ValueError(\"Input should be positive integer.\")\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    return ''.join(char for char in text if char not in vowels)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "def same_chars(s0, s1):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "def monotonic(l):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    if len(l) < 2:\n        return True\n\n    direction = l[0] < l[1]\n    for num in l[1:]:\n        if direction ^ (num < l[-1]):\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4, 10]]], "plus_fail_tests": [[[1, 1, 2, 3, 3, 3, 4, 5]]]}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "def common(l1, l2):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return list(set(l1) & set(l2))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-50, 59, -37, 5], [-50, 59, -37, 5]]]}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    shift = 5\n\n    def shift_char(char):\n        return chr((ord(char) - shift - ord(\"a\") + 26) % 26 + ord(\"a\"))\n\n    return \"\".join([shift_char(char) for char in s])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, False otherwise.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    while not is_prime(n):\n        n //= 2\n    return n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[15]], "plus_fail_tests": [[100]]}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ...\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    n = len(xs)\n    return [0] * (n + 1) if n > 0 else [1]\n    if n < 2:\n        return [1,] * (n if n > 0 else 0) + xs\n\n    result = [0] * (n + 1)\n    for i in range(n):\n        result[i+1] = i+1 * result[i] + xs[i]\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 1, 2, 4, 5]]], "plus_fail_tests": [[[0, 0, 0, 0, 0, 5]]]}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    result = [lst[0]]\n    current_min = lst[0]\n    current_max = lst[0]\n\n    for num in lst[1:]:\n        if num < current_min:\n            current_min = num\n        elif num > current_max:\n            result.append(current_min)\n            current_min = num\n            current_max = num\n        else:\n            current_max = num\n\n    result.append(current_min)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4]]], "plus_fail_tests": [[[-5, 0, 5, 10]]]}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "def fibfib(n):\n    if n <= 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        fib_seq = [0, 0, 1]\n        for _ in range(3, n+1):\n            fib_seq.append(fib_seq[-1] + fib_seq[-2] + fib_seq[-3])\n        return fib_seq[-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[2]]}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 0,\n    and has a frequency greater than or equal to the value of the integer itself. If no such a value exist,\n    return -1.\n    \"\"\"\n    frequency = {}\n    for num in lst:\n        frequency[num] = frequency.get(num, 0) + 1\n\n    for num in reversed(range(1, max(lst) + 1)):\n        if frequency.get(num, 0) >= num:\n            return num\n\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(char.upper()) for char in s if char.isalpha())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abAB"]], "plus_fail_tests": [["abcd"]]}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "import re\ndef fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \"\"\"\n    pattern = r\"(\\d+) (\\w+)s?\\s+and\\s+(\\d+) (\\w+)s?s?\"\n    match = re.search(pattern, s)\n    apples, apple_plural = match.group(1, 2)\n    oranges, orange_plural = match.group(3, 4)\n\n    total_fruits = int(n)\n    mangos = total_fruits - int(apples) - int(oranges)\n\n    return mangos", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOUy\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s and s[-1] in vowels:\n        count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abcde"]], "plus_fail_tests": [["hello"]]}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    if not arr or all(i % 2 for i in arr):\n        return []\n\n    even_nodes = [i for i in arr if i % 2 == 0]\n    if not even_nodes:\n        return [0, len(arr)]  # return the first index if no even values are found\n\n    return [even_nodes[0], arr.index(even_nodes[0])]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 2, 3]]], "plus_fail_tests": [[[7, 15, 12, 21, 8, 13]]]}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string. If shift > number of digits, return digits reversed.\n    \"\"\"\n    if abs(shift) > len(str(abs(x))):\n        return str(abs(x))[::-1]\n\n    result = str(abs(x))[-shift:] + str(abs(x))[:-len(str(abs(x))[-shift:])]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "def is_palindromic_list(q):\n    \"\"\"\n    Helper function to check if a list is palindromic.\n    \"\"\"\n    return q == q[::-1]\ndef will_it_fly(q, w):\n    \"\"\"\n    Function that returns True if the object q will fly, and False otherwise.\n    \"\"\"\n    if not is_palindromic_list(q):\n        return False\n    if sum(q) > w:\n        return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic.\n    A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Calculate the number of elements with odd count\n    odd_count = sum(1 for i in arr if arr.count(i) % 2 != 0)\n\n    # If all elements are the same, the array is already palindromic\n    if len(arr) == odd_count or odd_count == 0:\n        return 0\n\n    # Find the middle element of the array\n    mid = len(arr) // 2\n\n    # Check if the middle element is different from its mirror\n    if arr[mid] != arr[-mid-1] if len(arr) % 2 else arr[mid] != arr[mid]:\n        return odd_count\n\n    # Calculate the number of changes to make the middle element a mirror\n    changes = sum(1 for i in arr[:mid] if i != arr[mid]) + sum(1 for i in arr[mid+1:] if i != arr[mid])\n\n    return odd_count + changes", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 5, 4, 7, 9, 6]]], "plus_fail_tests": [[[1, 2, 3, 4, 5]]]}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    total_char_lst1 = sum(len(s) for s in lst1)\n    total_char_lst2 = sum(len(s) for s in lst2)\n\n    if total_char_lst1 < total_char_lst2:\n        return lst1\n    elif total_char_lst1 > total_char_lst2:\n        return lst2\n    else:\n        return lst1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "import math\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple power of n\n    and false in other cases.\n    x is a simple power of n if n**int(log(x, n)) = x\n    \"\"\"\n    if x < 0 or n <= 0:\n        return False\n    log_x = math.log(x) / math.log(n)\n    return int(log_x) == log_x * n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[16, 2]], "plus_fail_tests": [[25, 5]]}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_multiply_prime(a):\n    \"\"\"Function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    \"\"\"\n    if a < 10 or a % 2 == 0:\n        return False\n\n    primes = []\n    i = 3\n    while len(primes) < 3:\n        if is_prime(i) and a % i:\n            primes.append(i)\n            a //= i\n        else:\n            i += 2\n\n    return len(primes) == 3 and a == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[30]], "plus_fail_tests": [[49]]}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa >= 3.7:\n            letter_grades.append(\"A\")\n        elif gpa >= 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa >= 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa >= 2.7:\n            letter_grades.append(\"B\")\n        elif gpa >= 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa >= 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa >= 1.7:\n            letter_grades.append(\"C\")\n        elif gpa >= 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa >= 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa >= 0.7:\n            letter_grades.append(\"D\")\n        elif gpa >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\ngrades = [4.0, 3.0, 1.7, 2.0, 3.5]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4.0, 3, 1.7, 2, 3.5]]], "plus_fail_tests": [[[3.8, 2.5, 3.9, 2.2, 1.0]]]}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a given decimal number to binary format with 'db' prefix and suffix.\n\n    :param decimal: An integer number in decimal format\n    :return: A string representation of the binary number with 'db' prefix and suffix\n    \"\"\"\n\n    def int_to_binary(n):\n        \"\"\"\n        Converts an integer number to binary format\n\n        :param n: An integer number\n        :return: A string representation of the binary number\n        \"\"\"\n        return '{0:08b}'.format(n)\n\n    binary = int_to_binary(decimal)\n    return 'db' + binary + 'db'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[7]]}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    \"\"\"Helper function to check if a given number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_length(string):\n    \"\"\"Function that checks if the length of a given string is a prime number.\"\"\"\n    length = len(string)\n    return is_prime(length)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"\n    Check if a given string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i:i+3] == s[i+1:i+3] or len(set(s[i:i+3])) < 3:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Calculate the number of digits in the given number n\n    digits = int(len(str(n)) if n else 1)\n    \n    # Initialize the count variable\n    count = 0\n    \n    # Calculate the count of numbers starting with 1\n    count += 10 ** (digits - 1)\n    for i in range(1, 10):\n        count += 10 ** (digits - 1)\n        count += 10 ** (digits - 1) * i\n\n    # Calculate the count of numbers ending with 1\n    count += 9 * 10 ** (digits - 1)\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[6]]}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "def decimal_to_binary(n):\n    \"\"\"Convert a decimal number to binary.\"\"\"\n    return bin(abs(n))[2:] if n else '0'\ndef int_to_binary_sum(n):\n    \"\"\"Return the sum of digits in binary for a given positive integer.\"\"\"\n    return ''.join(map(decimal_to_binary, [int(digit) for digit in str(abs(n))]))\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    binary_sum = int_to_binary_sum(N)\n    return ''.join(map(lambda x: '1' if x else '0', [int(bit) for bit in binary_sum[0]]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[150]], "plus_fail_tests": [[101]]}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef hex_key(num):\n    \"\"\"Function to count the number of prime hexadecimal digits in a given string.\"\"\"\n    count = 0\n    for digit in num:\n        decimal = int(digit, 16)\n        if is_prime(decimal):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    if len(lst) < 1:\n        raise ValueError(\"Input list cannot be empty\")\n\n    result = 0\n    index = 1\n    while index < len(lst):\n        if index % 2 == 1 and lst[index] % 2 == 0:\n            result += lst[index]\n        index += 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    \"\"\"\n\n    words = s.split()\n    return \" \".join([''.join(sorted(w)) for w in words])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\n123 456\n789\n"]]}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    Given a 2 dimensional data as a nested lists, find tuples of coordinates (row, column)\n    where the integer x is present in the list, and return a sorted list of these tuples.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n                break\n    return sorted(result, key=lambda x: (x[0], -x[1]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1]], "plus_fail_tests": [[[[1, 1], [1, 2, 3], [4, 5, 6, 7]], 1]]}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    if not array:\n        return []\n\n    sum_first_and_last = sum([array[0], array[-1]])\n    sorted_array = array.copy()\n\n    if sum_first_and_last % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n\n    return sorted_array", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \"\"\"\n    result = \"\"\n    shift = 2 * 26\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n            result += encrypted_char\n        else:\n            result += char\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hi"]], "plus_fail_tests": [["abcde"]]}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n\n    lst.sort()\n    return lst[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1]]], "plus_fail_tests": [[[2, 2, 2, 2, 2, 2, 3, 3, 3, 3]]]}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \"\"\"\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return (x == y + z or y == x + z or z == x + y)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "def is_vowel(char):\n    vowels = \"aeiouAEIOU\"\n    return char in vowels\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(s):\n        if is_vowel(s[index].upper()) and index % 2 == 0:\n            count += 1\n        index += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aBCdEf"]], "plus_fail_tests": [["abcDEf"]]}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef count_up_to(n):\n    \"\"\"Function that returns an array of the first n prime numbers.\"\"\"\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[2]]}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    try:\n        num = float(value)\n        int_num = int(num)\n        return int_num if abs(num - int_num) <= 0.5 else int(num + (0.5 if num > 0 else -0.5))\n    except ValueError:\n        pass\n\n    # Handle non-numeric input\n    abs_diff = float('inf')\n    sign = 1 if value[0] in ['+', '-'] else 1\n\n    for num in map(int, iterate_chars(abs(value[1:]))):\n        abs_diff = min(abs(abs(num - int(value[0:1])) * sign), abs_diff)\n\n    return int(value[0:1]) + sign * int(abs_diff)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["14.5"]], "plus_fail_tests": [["5.5"]]}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"Function that takes two integers and returns the product of their unit digits.\"\"\"\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-6, -9]]}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                next_vowel_index = vowels.index(char) + 2\n                encoded_message += chr(ord(char) + next_vowel_index - len(vowels))\n            else:\n                encoded_message += char\n    return encoded_message", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["TEST"]], "plus_fail_tests": [["abcdefghijklmnopqrstuvwxyz"]]}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict_):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not dict_:\n        return False\n\n    keys = list(dict_.keys())\n    all_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n\n    return all_lower or all_upper", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    sum = 0\n    count = 0\n    current = n\n\n    while current <= m:\n        sum += current\n        count += 1\n        current += 1\n\n    average = int(sum / (count + 1))\n    binary = bin(average)[2:]\n\n    return binary", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 5]], "plus_fail_tests": [[1, 1]]}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x % 2 != 0:  # x should be even\n        x += 1\n\n    return max(x, y) if x < y else -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12, 15]], "plus_fail_tests": [[30, 30]]}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    Splits a string of words separated by commas or spaces into an array of words.\n\n    Args:\n        s (str): A string of words separated by commas or spaces.\n\n    Returns:\n        list: A list of words in the given string.\n    \"\"\"\n    # Using the split() method with a regular expression to handle both commas and spaces\n    words = s.split(r'\\s*,\\s*|[,]')\n    # Removing any empty elements from the list\n    words = [word.strip() for word in words if word]\n    return words", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hi, my name is John"]], "plus_fail_tests": [[",,,,"]]}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def is_odd(num):\n        return all(digit % 2 for digit in list(str(num)))\n\n    return sorted(filter(is_odd, x))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 33, 1422, 1]]], "plus_fail_tests": [[[257, 369, 781, 409]]]}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out any numbers not between 1 and 9\n    valid_numbers = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort valid numbers and reverse the resulting array\n    sorted_numbers = sorted(valid_numbers)\n    reversed_numbers = sorted_numbers[::-1]\n\n    # Replace each digit with its corresponding name\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    named_numbers = [names[num - 1] for num in reversed_numbers]\n\n    # Return the final list\n    if not arr:\n        return []\n    return named_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = 1\n            for j in range(1, i+1):\n                result[i] *= j\n        else:\n            result[i] = sum(range(1, i+1))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[2]]}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    \"\"\"\n\n    # Remove characters in s that are in c\n    s = [char for char in s if char not in c]\n    s = ''.join(s)\n\n    # Check if the result string is palindrome\n    return s, s == s[::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"Determines if it is possible to exchange elements between lst1 and lst2\n       to make all elements in lst1 even.\n    \"\"\"\n\n    # Calculate the XOR of the sum of all elements in lst1 and lst2\n    # and the number of even elements in lst1.\n    xor_sum_even_count = (sum(lst1) + sum(lst2)) ^ len(lst1) & 1\n\n    # If XOR sum and even count have the same parity, it is possible to exchange\n    # elements between lst1 and lst2 to make all elements in lst1 even.\n    return xor_sum_even_count == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4], [1, 2, 3, 4]]], "plus_fail_tests": [[[2, 4, 6], [1, 3, 5]]]}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i-th string of the input.\n    \"\"\"\n    return [\"the number of odd elements \" + str(sum(map(lambda x: int(x) % 2, list(str(i))))) + \"n the str\" + str(i+1) + \" of the input.\" for i in enumerate(lst, 1)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["1234567"]]], "plus_fail_tests": [[["2468"]]]}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    \"\"\"Determines if it is possible to get an array sorted in non-decreasing order by performing right shift operations.\"\"\"\n\n    # Base case: empty array is already sorted\n    if not arr:\n        return True\n\n    # Find the index of the smallest element\n    min_index = arr.index(min(arr))\n\n    # Check if the smallest element is at the first position\n    if min_index == 0:\n        return True\n\n    # Try to move the smallest element to the first position by performing right shift operations\n    for _ in range(min_index):\n        arr.append(arr.pop(0))\n\n        # Check if the array is sorted after each right shift operation\n        if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n            return True\n\n    # If the array is not sorted after all possible right shift operations, return False\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 3, 2, 6]]]}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is a palindrome\n    \"\"\"\n    return str(n) == str(n)[::-1]\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    def sum_digits(num):\n        return sum(abs(digit) for digit in str(abs(num)).split('-')[0].split(' ')[0].split('+')[0].split(' '))\n\n    return len(list(filter(lambda x: sum_digits(x) > 0, arr)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[0, 0, 0]]]}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"Given a string representing space-separated lowercase letters, return a dictionary\n    of the letters with the most repetition and their corresponding counts.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not test:\n        return {}\n\n    # Split the input string into a list of characters\n    char_list = test.split()\n    char_count = {}\n\n    # Count the occurrences of each character\n    for char in char_list:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the letters with the most repetition\n    max_count = max(char_count.values())\n    result = {char: count for char, count in char_count.items() if count == max_count}\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "def is_consonant(char):\n    \"\"\"Helper function to check if a character is consonant.\"\"\"\n    return char.isalpha() and not char.isdigit() and char not in \"aeiouAEIOU\"\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if is_consonant(char):\n                count += 1\n                if count > n:\n                    break\n        if count == n:\n            result.append(word)\n            break\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Mary had a little lamb", 3]], "plus_fail_tests": [["apple banana cherry", 3]]}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    if not nums:\n        return \"Error: empty list is not allowed\"\n\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n\n    return min_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 3, 4, 1, 2, 4]]], "plus_fail_tests": [[[2, 4, -1, 3, 5, -4, 1, -2]]]}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    def count_ones(num):\n        return bin(abs(num)).count('1')\n\n    def get_key(num):\n        return (count_ones(num), num)\n\n    return sorted(arr, key=get_key)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"\n\n    def collatz_sequence(n):\n        sequence = [n]\n        while n != 1:\n            n = (n % 2) * (3 if n % 2 else 2) + 1\n            sequence.append(n)\n        return sequence\n\n    odd_numbers = [x for x in collatz_sequence(n) if x % 2 != 0]\n    return odd_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[14]], "plus_fail_tests": [[3]]}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Filter the first k elements with at most two digits\n    filtered_elements = list(filter(lambda x: len(str(abs(x))) <= 2, arr[:k]))\n\n    # Sum the filtered elements\n    return sum(filtered_elements)\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "import re\ndef valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid, otherwise False.\"\"\"\n\n    # Check if date string is empty\n    if not date:\n        return False\n\n    # Check if date format is mm-dd-yyyy\n    if not re.match(r'^(0[1-9]|1[0-2])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d{2}$', date):\n        return False\n\n    # Extract month, day, and year from date string\n    month, day, year = map(int, date.split('-')[:3])\n\n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if day is valid based on the month\n    valid_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            valid_days[1] = 29\n    if day < 1 or day > valid_days[month - 1]:\n        return False\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["02-29-2021"]]}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "def is_balanced(parentheses_str):\n    \"\"\"\n    Helper function to check if a single string of parentheses is balanced.\n    \"\"\"\n    stack = []\n    for p in parentheses_str:\n        if p == '(':\n            stack.append(p)\n        elif p == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack\ndef match_parens(lst):\n    \"\"\"\n    Given a list of two strings, check if it's possible to concatenate them\n    to form a balanced string.\n    \"\"\"\n    return \"Yes\" if is_balanced(a + b) else \"No\"\n    # a and b are the two strings from the input list", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["()(", ")"]]], "plus_fail_tests": [[["(", "("]]]}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    if not lst or len(lst) <= 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n        if i > 1 and lst[i] == lst[i-1]:\n            count = 1\n            for j in range(i+1, len(lst)):\n                if lst[i] == lst[j]:\n                    count += 1\n                    if count > 1:\n                        return False\n            break\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 5, 4]]]}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-3, -4, 5], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 3]]}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    if not isinstance(lst, list) or len(lst) < 1:\n        raise TypeError(\"Input must be a non-empty list\")\n\n    result = 0\n    index = 0\n    while index < len(lst):\n        if index % 2 == 0 and lst[index] % 2 != 0:\n            result += lst[index]\n        index += 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = txt.split()\n    if not words:\n        if any(ord(char) < 91 and ord(char) > ord('z') for char in txt):\n            return len([char for char in txt if ord(char.lower()) % 2 == 1])\n        else:\n            return txt.count(',') or 0\n    return words", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hello,world!"]], "plus_fail_tests": [["Hello?"]]}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "def is_vowel(char):\n    vowels = set(\"aeiouAEIOU\")\n    return char in vowels\ndef get_closest_vowel(word):\n    if not word or len(word) < 3:\n        return \"\"\n\n    last_consonant_index = len(word) - 1\n    while last_consonant_index > 0 and not is_vowel(word[last_consonant_index]):\n        last_consonant_index -= 1\n\n    if last_consonant_index == 0:\n        return \"\"\n\n    return word[last_consonant_index]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["easy"]], "plus_fail_tests": [["hello"]]}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "from collections import defaultdict, deque\ndef minPath(grid, k):\n    N = len(grid)\n    visited = set()\n    graph = defaultdict(list)\n\n    def add_edges(i, j):\n        if i > 0:\n            graph[i-1].append(i)\n            graph[i].append(i-1)\n        if j > 0:\n            graph[i].append(i+j)\n            graph[i+j].append(i)\n        if i < N-1:\n            graph[i].append(i+1)\n            graph[i+1].append(i)\n        if j < N-1:\n            graph[i+1].append(i+j+1)\n            graph[i+j+1].append(i+1)\n\n    def bfs(start):\n        queue = deque([(start, [start])])\n        visited.add(start)\n        while queue:\n            node, path = queue.popleft()\n            if len(path) == k:\n                return path\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    queue.append((neighbor, path + [neighbor]))\n\n        return None\n\n    for i in range(N):\n        for j in range(N):\n            add_edges(i*N + j, j)\n            add_edges(i*N + j, i)\n\n    paths = []\n    for i in range(N*N):\n        start = i\n        path = bfs(start)\n        if path is not None:\n            paths.append(path)\n\n    paths.sort()\n    return paths[0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1]]}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        sum_magnitudes += abs(num)\n        product *= (1 if num > 0 else -1)\n\n    return sum_magnitudes * product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1]]], "plus_fail_tests": [[[-1, 0, 1, 2]]]}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    \"\"\"Checks if a given number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef intersection(interval1, interval2):\n    start, end = interval1\n    start2, end2 = interval2\n\n    if end < start:\n        return \"NO\"\n\n    start_intersection = max(start, start2)\n    end_intersection = min(end, end2)\n\n    if end_intersection < start_intersection:\n        return \"NO\"\n\n    length_intersection = end_intersection - start_intersection + 1\n\n    return \"YES\" if is_prime(length_intersection) else \"NO\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 1], [0, 4]]], "plus_fail_tests": [[[10, 20], [15, 25]]]}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "import math\ndef car_race_collision(n: int):\n    \"\"\"\n    This function calculates the number of collisions between n left-moving and n right-moving cars.\n    \"\"\"\n    # Calculate the minimum distance of collision for two cars\n    car_speed = 1\n    minimum_distance = 2 * car_speed * n\n\n    # Calculate the maximum position of left-moving cars\n    max_left_position = (math.inf - minimum_distance) / (2 * car_speed)\n\n    # Calculate the maximum position of right-moving cars\n    max_right_position = (math.inf - minimum_distance) / (-2 * car_speed)\n\n    # Simulate the movement of cars and count collisions\n    collisions = 0\n    left_car_position = 0\n    right_car_position = 0\n\n    while left_car_position < max_left_position or right_car_position > max_right_position:\n        if left_car_position > right_car_position:\n            left_car_position += car_speed\n        else:\n            right_car_position -= car_speed\n\n        if abs(left_car_position - right_car_position) <= minimum_distance:\n            collisions += 1\n\n    return collisions", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[5]]}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    product = 1\n    is_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            is_odd = True\n        n //= 10\n        if not is_odd and n == 0:\n            return 0\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    return round(sum([int(i)**2 for i in lst]))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1.4, 4.2, 0]]], "plus_fail_tests": [[[0, 3.3, 7.7, -2.2]]]}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    def is_even(num):\n        \"\"\"Check if a number is even\"\"\"\n        return num % 2 == 0\n\n    def find_combinations(target, current_sum, current_combination):\n        \"\"\"Recursively find combinations of even numbers that sum up to the target\"\"\"\n        if current_sum > target:\n            return False\n        if current_sum == target:\n            return True in (is_even(target - num) for num in range(current_sum, 0, -1))\n        for i in range(current_sum, n, 2):\n            if not find_combinations(target, current_sum + i, i):\n                continue\n            if find_combinations(target, current_sum + i + i, i):\n                return True\n        return False\n\n    return find_combinations(n, 0, 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[20]]}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    \"\"\"\n\n    # Convert strings to floats if possible\n    a = float(a) if isinstance(a, str) else a\n    b = float(b) if isinstance(b, str) else b\n\n    # Compare values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": [["5,000", 5000]]}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n\n    if not negatives and not positives:\n        return None, None\n\n    if not negatives:\n        return None, min(positives)\n\n    if not positives:\n        return min(negatives), None\n\n    return max(negatives), min(positives)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -3, -5, -6]]], "plus_fail_tests": [[[-1, -2, -3, -4, -5]]]}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    \"\"\"\n    if not file_name or len(file_name.split('.')) != 2:\n        return 'No'\n\n    name_part, ext_part = file_name.split('.')\n    if len(name_part) == 0 or not name_part[0].isalpha():\n        return 'No'\n\n    if len(name_part) > 1 or len(ext_part) != len([\"txt\", \"exe\", \"dll\"][0]):\n        return 'No'\n\n    if len(name_part) > 1 and not all(char.isalpha() or char.isdigit() for char in name_part[:1]):\n        return 'No'\n\n    return 'Yes'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["example.txt"]], "plus_fail_tests": [["hello world.exe"]]}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with -\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"__\", \"-\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Yellow Yellow  Dirty  Fellow"]], "plus_fail_tests": [["Hello,   world!"]]}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not txt[-1].isalnum() and not txt[-2].isalpha():\n        return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["apple pi e"]], "plus_fail_tests": [["Pumpkin pi e"]]}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["[][]"]], "plus_fail_tests": [["[[]]]"]]}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    i = 0\n\n    # Check each element against its preceding element\n    while i < n - 1 and arr[i] < arr[i+1]:\n        i += 1\n\n    # If we have checked all elements and found no violation, return -1\n    if i == n - 1:\n        return -1\n\n    # Otherwise, return the index of the last valid element\n    return i", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4, 3, 5]]], "plus_fail_tests": [[[5, 4, 3, 2, 1]]]}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    return factorial(n) * factorial(n-1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[6]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 or (i % 3 != 0 and i % 4 == 0):\n            if i % 3 == 0:\n                num = num ** 2\n            elif i % 3 != 0 and i % 4 == 0:\n                num = num ** 3\n        result += num\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"\n    Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits are odd.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (abs(num % 10) % 2 == 1 and (num // 10) % 2 == 1):\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[33, -2, -3, 45, 21, 109]]], "plus_fail_tests": [[[101, -35, 16, 44, -67]]]}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples += 1\n                    break\n    return triples", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[6]], "plus_fail_tests": [[7]]}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = planets.index(planet1) if planet1 in planets else -1\n    index2 = planets.index(planet2) if planet2 in planets else -1\n\n    if index1 == -1 or index2 == -1:\n        return tuple()\n\n    result = [planets[i] for i in range(len(planets)) if index1 < i < index2]\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Earth", "Mercury"]], "plus_fail_tests": [["Neptune", "Mercury"]]}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    \"\"\"\n    Simplify the expression x * n by checking if their gcd is equal to 1.\n    \"\"\"\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    # Calculate the greatest common divisor (gcd) of x and n\n    gcd = gcd(abs(x_num), abs(n_num))\n\n    # If gcd is equal to 1, the expression is simplified\n    return gcd == 1 and (x_num > 0 and n_num > 0)\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor (gcd) of two integers using Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return abs(a)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["1/5", "5/1"]], "plus_fail_tests": [["3/4", "4/3"]]}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0.\n    \"\"\"\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares * 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4]]], "plus_fail_tests": [[[3, 5, 7]]]}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "import math\ndef is_prime(n):\n    \"\"\"Checks if a given number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which returns the value of x if n is prime,\n    and returns the value of y otherwise.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums.sort(key=lambda x: (digit_sum(x), nums.index(x)))\n\n    return nums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 11, -1, -11, -12]]], "plus_fail_tests": [[[1, 2, 3]]]}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    \"\"\"\n    Determines the absolute difference between each guessed score and the actual score.\n\n    :param game: list of integers representing the actual scores\n    :param guess: list of integers representing the guessed scores\n    :return: list of integers representing the absolute differences between the guessed and actual scores\n    \"\"\"\n\n    return [abs(x - y) for x, y in zip(game, guess)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "import math\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence, returns a string containing words whose lengths are prime numbers\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return \" \".join(prime_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list based on length and alphabetical order\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n\n    def rotate_string(string, n):\n        \"\"\"Rotate a string by n positions\"\"\"\n        return string[n:] + string[:n]\n\n    a_len = len(a)\n    b_len = len(b)\n\n    # Check if b is a substring of a\n    if b in a:\n        return True\n\n    # Check if any rotation of b is a substring of a\n    for i in range(b_len):\n        if a.find(rotate_string(b, i)) != -1:\n            return True\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [3]\n\n    sequence = [3]\n    if n % 2 == 0:\n        for _ in range(n - 1):\n            sequence.append(sequence[-1] + sequence[-2])\n    else:\n        for _ in range(n - 1):\n            last_three = sequence[-1], sequence[-2], sequence[-3]\n            sequence.append(last_three[0] + last_three[1] + last_three[2])\n\n    return sequence", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2]]}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n       even_odd_count(-12) ==> (1, 1)\n       even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n\n    # Convert the integer to a string for easier processing\n    num_str = str(abs(num))\n\n    # Iterate through each digit in the number\n    for digit in num_str:\n        # Increment the count of even digits if the digit is even\n        if int(digit) % 2 == 0:\n            count_even += 1\n        # Increment the count of odd digits otherwise\n        else:\n            count_odd += 1\n\n    # Return a tuple with the number of even and odd digits\n    return count_even, count_odd", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define roman numerals up to 1000\n    roman_numerals = {\n        1: \"i\",\n        5: \"v\",\n        10: \"x\",\n        50: \"l\",\n        100: \"c\",\n        500: \"d\",\n        1000: \"m\",\n    }\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate through the number from the largest possible value to 1\n    while number > 0:\n        for key in reversed(roman_numerals):\n            if number >= key:\n                result += roman_numerals[key]\n                number -= key\n                break\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[19]], "plus_fail_tests": [[39]]}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    '''\n    # Check if sides can form a right-angled triangle based on the side length relationship\n    return (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (a**2 + c**2) == b**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Convert integers to strings\n    a_str = str(a)\n    b_str = str(b)\n\n    # Find the smaller number between a and b\n    min_num = min(a, b)\n\n    # Find the larger number between a and b\n    max_num = max(a, b)\n\n    # Initialize an empty list to store even digits\n    even_digits = []\n\n    # Iterate through each digit in the string representation of the smaller number\n    for digit in a_str:\n        # Check if the digit is even\n        if int(digit) % 2 == 0:\n            even_digits.append(int(digit))\n\n    # Iterate through each digit in the string representation of the larger number\n    for digit in max_num_str:\n        # Check if the digit is even and greater than the last even digit in the list\n        if int(digit) % 2 == 0 and even_digits and int(digit) > even_digits[-1]:\n            even_digits.append(int(digit))\n\n    # Return the list of even digits\n    return even_digits", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 10]], "plus_fail_tests": [[6, 12]]}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "def apply_operator(operator, operand, index):\n    \"\"\"\n    Apply the given operator to the two operands at the given index.\n    \"\"\"\n    if operator == '+':\n        return operand[index[0]] + operand[index[1]]\n    elif operator == '-':\n        return operand[index[0]] - operand[index[1]]\n    elif operator == '*':\n        return operand[index[0]] * operand[index[1]]\n    elif operator == '//':\n        return int(operand[index[0]] / operand[index[1]])\n    elif operator == '**':\n        return operand[index[0]] ** operand[index[1]]\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. Use the two given lists to build the algebric expression and return the evaluation of this expression.\n    \"\"\"\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Length of operator list should be equal to the length of operand list minus one.\")\n\n    indexes = [(i, i+1) for i in range(len(operand)-1)]\n    result = operand[0]\n\n    for op, idx in zip(operator, indexes):\n        result = apply_operator(op, operand, idx)\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["**", "*", "+"], [2, 3, 4, 5]]], "plus_fail_tests": [[["+", "-", "*", "//"], [5, 2, 3, 4, 7]]]}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    If a character in the string is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \"\"\"\n\n    # Filter out non-alphabetic characters and reverse their order\n    non_alphabetic = [char for char in s if not char.isalpha()]\n    reversed_non_alphabetic = non_alphabetic[::-1] if non_alphabetic else []\n\n    # Process each letter in the string by reversing its case\n    letters = [char.capitalize() if char.islower() else char.lower() for char in s if char.isalpha()]\n\n    # Combine processed non-alphabetic characters and letters\n    return \"\".join(letters) + \"\".join(reversed_non_alphabetic)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["#a@C"]], "plus_fail_tests": [["tH1s Is A t3sT!"]]}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n    if not text:\n        return None\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    return [total_eaten, remaining - (total_eaten - number)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while True:\n        next_level = pile[-1] + (n % 2)\n        pile.append(next_level)\n        n = next_level\n    return pile[:-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1]]}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "import math\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    water = 0\n    steps = 0\n\n    while water < m * n:\n        for i in range(m):\n            if grid[i][0] > 0:\n                water += min(capacity, grid[i][0])\n                grid[i][0] -= min(capacity, grid[i][0])\n                steps += 1\n                break\n        else:\n            continue\n\n        for j in range(1, n):\n            if grid[0][j] > 0:\n                water += min(capacity, grid[0][j])\n                grid[0][j] -= min(capacity, grid[0][j])\n                steps += 1\n                break\n\n        for i in range(1, m):\n            if grid[i][0] > 0:\n                continue\n            for j in range(1, n):\n                if grid[i][j] > 0:\n                    water += min(capacity, grid[i][j])\n                    grid[i][j] -= min(capacity, grid[i][j])\n                    steps += 1\n                    break\n\n        if water >= m * n:\n            break\n\n    return steps", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1]], "plus_fail_tests": [[[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]], 2]]}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive. \"\"\"\n    return \" \".join(map(str, range(n + 1)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}